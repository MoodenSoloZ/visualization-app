"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fileUriToPath = _interopRequireDefault(require("file-uri-to-path"));

var _ = require(".");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var myGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {
  fetch: undefined
};

var RemoteFile = /*#__PURE__*/function () {
  (0, _createClass2.default)(RemoteFile, [{
    key: "getBufferFromResponse",
    value: function () {
      var _getBufferFromResponse = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(response) {
        var resp;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(typeof response.buffer === 'function')) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", response.buffer());

              case 4:
                if (!(typeof response.arrayBuffer === 'function')) {
                  _context.next = 11;
                  break;
                }

                _context.next = 7;
                return response.arrayBuffer();

              case 7:
                resp = _context.sent;
                return _context.abrupt("return", Buffer.from(resp));

              case 11:
                throw new TypeError('invalid HTTP response object, has no buffer method, and no arrayBuffer method');

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getBufferFromResponse(_x) {
        return _getBufferFromResponse.apply(this, arguments);
      }

      return getBufferFromResponse;
    }()
  }]);

  function RemoteFile(source) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, RemoteFile);
    (0, _defineProperty2.default)(this, "url", void 0);
    (0, _defineProperty2.default)(this, "_stat", void 0);
    (0, _defineProperty2.default)(this, "fetchImplementation", void 0);
    (0, _defineProperty2.default)(this, "baseOverrides", {});
    this.url = source; // if it is a file URL, monkey-patch ourselves to act like a LocalFile

    if (source.startsWith('file://')) {
      var path = (0, _fileUriToPath.default)(source);

      if (!path) {
        throw new TypeError('invalid file url');
      }

      var localFile = new _.LocalFile(path);
      this.read = localFile.read.bind(localFile);
      this.readFile = localFile.readFile.bind(localFile);
      this.stat = localFile.stat.bind(localFile); // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
      // @ts-ignore

      this.fetchImplementation = function () {
        /* intentionally blank */
      };

      return;
    }

    var fetch = opts.fetch || myGlobal.fetch && myGlobal.fetch.bind(myGlobal);

    if (!fetch) {
      throw new TypeError("no fetch function supplied, and none found in global environment");
    }

    if (opts.overrides) {
      this.baseOverrides = opts.overrides;
    }

    this.fetchImplementation = fetch;
  }

  (0, _createClass2.default)(RemoteFile, [{
    key: "fetch",
    value: function () {
      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(input, init) {
        var response;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this.fetchImplementation(input, init);

              case 3:
                response = _context2.sent;
                _context2.next = 16;
                break;

              case 6:
                _context2.prev = 6;
                _context2.t0 = _context2["catch"](0);

                if (!(_context2.t0.message === 'Failed to fetch')) {
                  _context2.next = 15;
                  break;
                }

                // refetch to to help work around a chrome bug (discussed in generic-filehandle issue #72) in
                // which the chrome cache returns a CORS error for content in its cache.
                // see also https://github.com/GMOD/jbrowse-components/pull/1511
                console.warn("generic-filehandle: refetching ".concat(input, " to attempt to work around chrome CORS header caching bug"));
                _context2.next = 12;
                return this.fetchImplementation(input, _objectSpread(_objectSpread({}, init), {}, {
                  cache: 'reload'
                }));

              case 12:
                response = _context2.sent;
                _context2.next = 16;
                break;

              case 15:
                throw _context2.t0;

              case 16:
                return _context2.abrupt("return", response);

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 6]]);
      }));

      function fetch(_x2, _x3) {
        return _fetch.apply(this, arguments);
      }

      return fetch;
    }()
  }, {
    key: "read",
    value: function () {
      var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(buffer) {
        var offset,
            length,
            position,
            opts,
            _opts$headers,
            headers,
            signal,
            _opts$overrides,
            overrides,
            args,
            response,
            responseData,
            bytesCopied,
            res,
            sizeMatch,
            _args3 = arguments;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                offset = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 0;
                length = _args3.length > 2 ? _args3[2] : undefined;
                position = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : 0;
                opts = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : {};
                _opts$headers = opts.headers, headers = _opts$headers === void 0 ? {} : _opts$headers, signal = opts.signal, _opts$overrides = opts.overrides, overrides = _opts$overrides === void 0 ? {} : _opts$overrides;

                if (length < Infinity) {
                  headers.range = "bytes=".concat(position, "-").concat(position + length);
                } else if (length === Infinity && position !== 0) {
                  headers.range = "bytes=".concat(position, "-");
                }

                args = _objectSpread(_objectSpread(_objectSpread({}, this.baseOverrides), overrides), {}, {
                  headers: _objectSpread(_objectSpread(_objectSpread({}, headers), overrides.headers), this.baseOverrides.headers),
                  method: 'GET',
                  redirect: 'follow',
                  mode: 'cors',
                  signal: signal
                });
                _context3.next = 9;
                return this.fetch(this.url, args);

              case 9:
                response = _context3.sent;

                if (response.ok) {
                  _context3.next = 12;
                  break;
                }

                throw new Error("HTTP ".concat(response.status, " ").concat(response.statusText));

              case 12:
                if (!(response.status === 200 && position === 0 || response.status === 206)) {
                  _context3.next = 21;
                  break;
                }

                _context3.next = 15;
                return this.getBufferFromResponse(response);

              case 15:
                responseData = _context3.sent;
                bytesCopied = responseData.copy(buffer, offset, 0, Math.min(length, responseData.length)); // try to parse out the size of the remote file

                res = response.headers.get('content-range');
                sizeMatch = /\/(\d+)$/.exec(res || '');

                if (sizeMatch && sizeMatch[1]) {
                  this._stat = {
                    size: parseInt(sizeMatch[1], 10)
                  };
                }

                return _context3.abrupt("return", {
                  bytesRead: bytesCopied,
                  buffer: buffer
                });

              case 21:
                if (!(response.status === 200)) {
                  _context3.next = 23;
                  break;
                }

                throw new Error('${this.url} fetch returned status 200, expected 206');

              case 23:
                throw new Error("HTTP ".concat(response.status, " fetching ").concat(this.url));

              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function read(_x4) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: "readFile",
    value: function () {
      var _readFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var options,
            encoding,
            opts,
            _opts,
            _opts$headers2,
            headers,
            signal,
            _opts$overrides2,
            overrides,
            args,
            response,
            _args4 = arguments;

        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};

                if (typeof options === 'string') {
                  encoding = options;
                  opts = {};
                } else {
                  encoding = options.encoding;
                  opts = options;
                  delete opts.encoding;
                }

                _opts = opts, _opts$headers2 = _opts.headers, headers = _opts$headers2 === void 0 ? {} : _opts$headers2, signal = _opts.signal, _opts$overrides2 = _opts.overrides, overrides = _opts$overrides2 === void 0 ? {} : _opts$overrides2;
                args = _objectSpread(_objectSpread({
                  headers: headers,
                  method: 'GET',
                  redirect: 'follow',
                  mode: 'cors',
                  signal: signal
                }, this.baseOverrides), overrides);
                _context4.next = 6;
                return this.fetch(this.url, args);

              case 6:
                response = _context4.sent;

                if (response) {
                  _context4.next = 9;
                  break;
                }

                throw new Error('generic-filehandle failed to fetch');

              case 9:
                if (!(response.status !== 200)) {
                  _context4.next = 11;
                  break;
                }

                throw Object.assign(new Error("HTTP ".concat(response.status, " fetching ").concat(this.url)), {
                  status: response.status
                });

              case 11:
                if (!(encoding === 'utf8')) {
                  _context4.next = 13;
                  break;
                }

                return _context4.abrupt("return", response.text());

              case 13:
                if (!encoding) {
                  _context4.next = 15;
                  break;
                }

                throw new Error("unsupported encoding: ".concat(encoding));

              case 15:
                return _context4.abrupt("return", this.getBufferFromResponse(response));

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function readFile() {
        return _readFile.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: "stat",
    value: function () {
      var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
        var buf;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this._stat) {
                  _context5.next = 6;
                  break;
                }

                buf = Buffer.allocUnsafe(10);
                _context5.next = 4;
                return this.read(buf, 0, 10, 0);

              case 4:
                if (this._stat) {
                  _context5.next = 6;
                  break;
                }

                throw new Error("unable to determine size of file at ".concat(this.url));

              case 6:
                return _context5.abrupt("return", this._stat);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function stat() {
        return _stat.apply(this, arguments);
      }

      return stat;
    }()
  }, {
    key: "close",
    value: function () {
      var _close = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return");

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function close() {
        return _close.apply(this, arguments);
      }

      return close;
    }()
  }]);
  return RemoteFile;
}();

exports.default = RemoteFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,