import type { TrackMouseEventData } from '@gosling.schema';
import type { HiGlassApi } from './higlass-component-wrapper';
import type { HiGlassSpec } from './higlass.schema';
import { subscribe, unsubscribe } from './pubsub';
import type { CompleteThemeDeep } from './utils/theme';
/**
 * Information of suggested genes.
 */
interface GeneSuggestion {
    geneName: string;
    score: number;
    chr: string;
    txStart: number;
    txEnd: number;
}
export interface GoslingApi {
    subscribe: typeof subscribe;
    unsubscribe: typeof unsubscribe;
    zoomTo(viewId: string, position: string, padding?: number, duration?: number): void;
    zoomToExtent(viewId: string, duration?: number): void;
    zoomToGene(viewId: string, gene: string, padding?: number, duration?: number): void;
    suggestGene(viewId: string, keyword: string, callback: (suggestions: GeneSuggestion[]) => void): void;
    getViewIds(): string[];
    getTracks(): TrackMouseEventData[];
    getTrack(trackId: string): TrackMouseEventData | undefined;
    exportPng(transparentBackground?: boolean): void;
    exportPdf(transparentBackground?: boolean): void;
    getCanvas(options?: {
        resolution?: number;
        transparentBackground?: boolean;
    }): {
        canvas: HTMLCanvasElement;
        canvasWidth: number;
        canvasHeight: number;
        resolution: number;
    };
}
export declare function createApi(hg: Readonly<HiGlassApi>, hgSpec: HiGlassSpec | undefined, trackInfos: readonly TrackMouseEventData[], theme: Required<CompleteThemeDeep>): GoslingApi;
export {};
//# sourceMappingURL=api.d.ts.map