import type { TilesetInfo } from '@higlass/types';
import type { ChromSizes } from '@gosling.schema';
declare type VcfFileOptions = {
    sampleLength: number;
};
declare type VcfRecord = {
    CHROM: string;
    POS: number;
    ID: null | string[];
    REF: string;
    ALT: null | string[];
    QUAL: null | number;
    FILTER: null | string;
    INFO: Record<string, true | (number | null)[] | string[]>;
};
export declare type VcfTile = Omit<VcfRecord, 'ALT' | 'INFO'> & {
    ALT: string | undefined;
    MUTTYPE: ReturnType<typeof getMutationType>;
    SUBTYPE: ReturnType<typeof getSubstitutionType>;
    INFO: string;
    ORIGINALPOS: number;
    POS: number;
    POSEND: number;
    DISTPREV: number | null;
    DISTPREVLOGE: number | null;
};
declare function init(uid: string, vcf: {
    url: string;
    indexUrl: string;
}, chromSizes: ChromSizes, options?: Partial<VcfFileOptions>): void;
declare const getMutationType: (ref: string, alt?: string) => "unknown" | "substitution" | "deletion" | "insertion";
declare const getSubstitutionType: (ref: string, alt?: string) => "unknown" | "C>A" | "C>G" | "C>T" | "T>A" | "T>C" | "T>G";
declare const tileFunctions: {
    init: typeof init;
    tilesetInfo: (uid: string) => {
        tile_size: number;
        bins_per_dimension: number;
        max_zoom: number;
        max_width: number;
        min_pos: number[];
        max_pos: number[];
    };
    fetchTilesDebounced: (uid: string, tileIds: string[]) => Promise<Record<string, VcfTile>>;
    tile: (uid: string, z: number, x: number) => Promise<void[]>;
    getTabularData: (uid: string, tileIds: string[]) => import("threads").TransferDescriptor<any>;
};
export declare type WorkerApi = typeof tileFunctions;
export type { TilesetInfo };
//# sourceMappingURL=vcf-worker.d.ts.map