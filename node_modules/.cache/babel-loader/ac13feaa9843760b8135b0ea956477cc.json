{"ast":null,"code":"import _slicedToArray from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport var deepEqual = deepEqual_;\nexport var duplicate = clone_;\nexport function never(message) {\n  throw new Error(message);\n}\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick(obj, props) {\n  var copy = {};\n  var _iterator = _createForOfIteratorHelper(props),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var prop = _step.value;\n      if (hasOwnProperty(obj, prop)) {\n        copy[prop] = obj[prop];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit(obj, props) {\n  var copy = Object.assign({}, obj);\n  var _iterator2 = _createForOfIteratorHelper(props),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var prop = _step2.value;\n      delete copy[prop];\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n  return \"Set(\".concat(_toConsumableArray(this).map(function (x) {\n    return stableStringify(x);\n  }).join(','), \")\");\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport var stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n  var str = isString(a) ? a : stableStringify(a);\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  var h = 0;\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n  var i = 0;\n  var _iterator3 = _createForOfIteratorHelper(arr.entries()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n        k = _step3$value[0],\n        a = _step3$value[1];\n      if (f(a, k, i++)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n  var i = 0;\n  var _iterator4 = _createForOfIteratorHelper(arr.entries()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n        k = _step4$value[0],\n        a = _step4$value[1];\n      if (!f(a, k, i++)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return true;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest) {\n  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    src[_key - 1] = arguments[_key];\n  }\n  for (var _i = 0, _src = src; _i < _src.length; _i++) {\n    var s = _src[_i];\n    deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n  }\n  return dest;\n}\nfunction deepMerge_(dest, src) {\n  var _iterator5 = _createForOfIteratorHelper(keys(src)),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var property = _step5.value;\n      writeConfig(dest, property, src[property], true);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n}\nexport function unique(values, f) {\n  var results = [];\n  var u = {};\n  var v;\n  var _iterator6 = _createForOfIteratorHelper(values),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var val = _step6.value;\n      v = f(val);\n      if (v in u) {\n        continue;\n      }\n      u[v] = 1;\n      results.push(val);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n  var dictKeys = keys(dict);\n  var otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  var _iterator7 = _createForOfIteratorHelper(dictKeys),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var key = _step7.value;\n      if (dict[key] !== other[key]) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  var _iterator8 = _createForOfIteratorHelper(a),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var e = _step8.value;\n      if (!b.has(e)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return true;\n}\nexport function hasIntersection(a, b) {\n  var _iterator9 = _createForOfIteratorHelper(a),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var key = _step9.value;\n      if (b.has(key)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n  return false;\n}\nexport function prefixGenerator(a) {\n  var prefixes = new Set();\n  var _iterator10 = _createForOfIteratorHelper(a),\n    _step10;\n  try {\n    var _loop = function _loop() {\n      var x = _step10.value;\n      var splitField = splitAccessPath(x);\n      // Wrap every element other than the first in `[]`\n      var wrappedWithAccessors = splitField.map(function (y, i) {\n        return i === 0 ? y : \"[\".concat(y, \"]\");\n      });\n      var computedPrefixes = wrappedWithAccessors.map(function (_, i) {\n        return wrappedWithAccessors.slice(0, i + 1).join('');\n      });\n      var _iterator11 = _createForOfIteratorHelper(computedPrefixes),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var y = _step11.value;\n          prefixes.add(y);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    };\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj) {\n  return keys(obj).length === 0;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport var keys = Object.keys;\nexport var vals = Object.values;\nexport var entries = Object.entries;\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  var alphanumericS = s.replace(/\\W/g, '_');\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return \"!(\".concat(logicalExpr(op.not, cb), \")\");\n  } else if (isLogicalAnd(op)) {\n    return \"(\".concat(op.and.map(function (and) {\n      return logicalExpr(and, cb);\n    }).join(') && ('), \")\");\n  } else if (isLogicalOr(op)) {\n    return \"(\".concat(op.or.map(function (or) {\n      return logicalExpr(or, cb);\n    }).join(') || ('), \")\");\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  var prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return isEmpty(obj);\n}\nexport function titleCase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path) {\n  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  var pieces = splitAccessPath(path);\n  var prefixes = [];\n  for (var i = 1; i <= pieces.length; i++) {\n    var prefix = \"[\".concat(pieces.slice(0, i).map(stringValue).join(']['), \"]\");\n    prefixes.push(\"\".concat(datum).concat(prefix));\n  }\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path) {\n  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  return \"\".concat(datum, \"[\").concat(stringValue(splitAccessPath(path).join('.')), \"]\");\n}\nfunction escapePathAccess(string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n  return \"\".concat(splitAccessPath(path).map(escapePathAccess).join('\\\\.'));\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n  return \"\".concat(splitAccessPath(path).join('.'));\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  for (var _i2 = 0, _args = args; _i2 < _args.length; _i2++) {\n    var arg = _args[_i2];\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n  return undefined;\n}\n// variable used to generate id\nvar idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n  var id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : \"__\".concat(name);\n}\nexport function isInternalField(name) {\n  return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle) {\n  if (angle === undefined) {\n    return undefined;\n  }\n  return (angle % 360 + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  }\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}","map":{"version":3,"sources":["../../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\nexport function never(message) {\n    throw new Error(message);\n}\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick(obj, props) {\n    const copy = {};\n    for (const prop of props) {\n        if (hasOwnProperty(obj, prop)) {\n            copy[prop] = obj[prop];\n        }\n    }\n    return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit(obj, props) {\n    const copy = Object.assign({}, obj);\n    for (const prop of props) {\n        delete copy[prop];\n    }\n    return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n    return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n    if (isNumber(a)) {\n        return a;\n    }\n    const str = isString(a) ? a : stableStringify(a);\n    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n    if (str.length < 250) {\n        return str;\n    }\n    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n    let h = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        h = (h << 5) - h + char;\n        h = h & h; // Convert to 32bit integer\n    }\n    return h;\n}\nexport function isNullOrFalse(x) {\n    return x === false || x === null;\n}\nexport function contains(array, item) {\n    return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n    let i = 0;\n    for (const [k, a] of arr.entries()) {\n        if (f(a, k, i++)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n    let i = 0;\n    for (const [k, a] of arr.entries()) {\n        if (!f(a, k, i++)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest, ...src) {\n    for (const s of src) {\n        deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n    }\n    return dest;\n}\nfunction deepMerge_(dest, src) {\n    for (const property of keys(src)) {\n        writeConfig(dest, property, src[property], true);\n    }\n}\nexport function unique(values, f) {\n    const results = [];\n    const u = {};\n    let v;\n    for (const val of values) {\n        v = f(val);\n        if (v in u) {\n            continue;\n        }\n        u[v] = 1;\n        results.push(val);\n    }\n    return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n    const dictKeys = keys(dict);\n    const otherKeys = keys(other);\n    if (dictKeys.length !== otherKeys.length) {\n        return false;\n    }\n    for (const key of dictKeys) {\n        if (dict[key] !== other[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function setEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const e of a) {\n        if (!b.has(e)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function hasIntersection(a, b) {\n    for (const key of a) {\n        if (b.has(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function prefixGenerator(a) {\n    const prefixes = new Set();\n    for (const x of a) {\n        const splitField = splitAccessPath(x);\n        // Wrap every element other than the first in `[]`\n        const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n        const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n        for (const y of computedPrefixes) {\n            prefixes.add(y);\n        }\n    }\n    return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a, b) {\n    if (a === undefined || b === undefined) {\n        return true;\n    }\n    return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj) {\n    return keys(obj).length === 0;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys;\nexport const vals = Object.values;\nexport const entries = Object.entries;\nexport function isBoolean(b) {\n    return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    const alphanumericS = s.replace(/\\W/g, '_');\n    // Add _ if the string has leading numbers.\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n        return `!(${logicalExpr(op.not, cb)})`;\n    }\n    else if (isLogicalAnd(op)) {\n        return `(${op.and.map((and) => logicalExpr(and, cb)).join(') && (')})`;\n    }\n    else if (isLogicalOr(op)) {\n        return `(${op.or.map((or) => logicalExpr(or, cb)).join(') || (')})`;\n    }\n    else {\n        return cb(op);\n    }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n        return true;\n    }\n    const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n        delete obj[prop];\n    }\n    return isEmpty(obj);\n}\nexport function titleCase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum = 'datum') {\n    const pieces = splitAccessPath(path);\n    const prefixes = [];\n    for (let i = 1; i <= pieces.length; i++) {\n        const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n        prefixes.push(`${datum}${prefix}`);\n    }\n    return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum = 'datum') {\n    return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\nfunction escapePathAccess(string) {\n    return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n    return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string, find, replacement) {\n    return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n    return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n    if (!path) {\n        return 0;\n    }\n    return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined(...args) {\n    for (const arg of args) {\n        if (arg !== undefined) {\n            return arg;\n        }\n    }\n    return undefined;\n}\n// variable used to generate id\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n    const id = ++idCounter;\n    return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n    idCounter = 42;\n}\nexport function internalField(name) {\n    return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n    return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle) {\n    if (angle === undefined) {\n        return undefined;\n    }\n    return ((angle % 360) + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value) {\n    if (isNumber(value)) {\n        return true;\n    }\n    return !isNaN(value) && !isNaN(parseFloat(value));\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}