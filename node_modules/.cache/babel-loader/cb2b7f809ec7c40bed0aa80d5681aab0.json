{"ast":null,"code":"import { signalOrValueRef } from '../../common';\nimport { midPoint } from './valueref';\nexport function positionOffset(_ref) {\n  var baseChannel = _ref.channel,\n    markDef = _ref.markDef,\n    _ref$encoding = _ref.encoding,\n    encoding = _ref$encoding === void 0 ? {} : _ref$encoding,\n    model = _ref.model,\n    bandPosition = _ref.bandPosition;\n  var channel = \"\".concat(baseChannel, \"Offset\"); // Need to cast as the type can't be inferred automatically\n  var defaultValue = markDef[channel];\n  var channelDef = encoding[channel];\n  if ((channel === 'xOffset' || channel === 'yOffset') && channelDef) {\n    var ref = midPoint({\n      channel: channel,\n      channelDef: channelDef,\n      markDef: markDef,\n      config: model === null || model === void 0 ? void 0 : model.config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null,\n      defaultRef: signalOrValueRef(defaultValue),\n      bandPosition: bandPosition\n    });\n    return {\n      offsetType: 'encoding',\n      offset: ref\n    };\n  }\n  var markDefOffsetValue = markDef[channel];\n  if (markDefOffsetValue) {\n    return {\n      offsetType: 'visual',\n      offset: markDefOffsetValue\n    };\n  }\n  return {};\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/offset.ts"],"names":[],"mappings":"AAQA,SAAQ,gBAAgB,QAAO,cAAc;AAE7C,SAAQ,QAAQ,QAAO,YAAY;AAOnC,OAAM,SAAU,cAAc,OAY7B;EAAA,IAXU,WAAW,QAApB,OAAO;IACP,OAAO,QAAP,OAAO;IAAA,qBACP,QAAQ;IAAR,QAAQ,8BAAG,CAAA,CAAE;IACb,KAAK,QAAL,KAAK;IACL,YAAY,QAAZ,YAAY;EAQZ,IAAM,OAAO,aAAM,WAAW,WAQX,CAAC,CAAC;EAErB,IAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC;EACrC,IAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC;EAEpC,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,KAAK,UAAU,EAAE;IAClE,IAAM,GAAG,GAAG,QAAQ,CAAC;MACnB,OAAO,EAAE,OAAO;MAChB,UAAU,EAAV,UAAU;MACV,OAAO,EAAP,OAAO;MACP,MAAM,EAAE,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,MAAM;MACrB,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC;MACnC,KAAK,EAAE,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC;MACvC,KAAK,EAAE,IAAI;MACX,UAAU,EAAE,gBAAgB,CAAC,YAAY,CAAC;MAC1C,YAAY,EAAZ;KACD,CAAC;IACF,OAAO;MAAC,UAAU,EAAE,UAAU;MAAE,MAAM,EAAE;IAAG,CAAC;EAC7C;EAED,IAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,kBAAkB,EAAE;IACtB,OAAO;MAAC,UAAU,EAAE,QAAQ;MAAE,MAAM,EAAE;IAAkB,CAAC;EAC1D;EAED,OAAO,CAAA,CAAE;AACX","sourceRoot":"","sourcesContent":["import { signalOrValueRef } from '../../common';\nimport { midPoint } from './valueref';\nexport function positionOffset({ channel: baseChannel, markDef, encoding = {}, model, bandPosition }) {\n    const channel = `${baseChannel}Offset`; // Need to cast as the type can't be inferred automatically\n    const defaultValue = markDef[channel];\n    const channelDef = encoding[channel];\n    if ((channel === 'xOffset' || channel === 'yOffset') && channelDef) {\n        const ref = midPoint({\n            channel: channel,\n            channelDef,\n            markDef,\n            config: model === null || model === void 0 ? void 0 : model.config,\n            scaleName: model.scaleName(channel),\n            scale: model.getScaleComponent(channel),\n            stack: null,\n            defaultRef: signalOrValueRef(defaultValue),\n            bandPosition\n        });\n        return { offsetType: 'encoding', offset: ref };\n    }\n    const markDefOffsetValue = markDef[channel];\n    if (markDefOffsetValue) {\n        return { offsetType: 'visual', offset: markDefOffsetValue };\n    }\n    return {};\n}\n//# sourceMappingURL=offset.js.map"]},"metadata":{},"sourceType":"module"}