{"ast":null,"code":"import { geoPath, geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEquidistant, geoConicConformal, geoConicEqualArea, geoConicEquidistant, geoEqualEarth, geoEquirectangular, geoGnomonic, geoIdentity, geoMercator, geoNaturalEarth1, geoOrthographic, geoStereographic, geoTransverseMercator } from 'd3-geo';\nimport { geoMollweide } from 'd3-geo-projection';\nvar defaultPath = geoPath();\nvar projectionProperties = [\n// standard properties in d3-geo\n'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY',\n// extended properties in d3-geo-projections\n'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n/**\n * Augment projections with their type and a copy method.\n */\n\nfunction create(type, constructor) {\n  return function projection() {\n    var p = constructor();\n    p.type = type;\n    p.path = geoPath().projection(p);\n    p.copy = p.copy || function () {\n      var c = projection();\n      projectionProperties.forEach(function (prop) {\n        if (p[prop]) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n    return p;\n  };\n}\nfunction projection(type, proj) {\n  if (!type || typeof type !== 'string') {\n    throw new Error('Projection type must be a name string.');\n  }\n  type = type.toLowerCase();\n  if (arguments.length > 1) {\n    projections[type] = create(type, proj);\n    return this;\n  } else {\n    return projections[type] || null;\n  }\n}\nfunction getProjectionPath(proj) {\n  return proj && proj.path || defaultPath;\n}\nvar projections = {\n  // base d3-geo projection types\n  albers: geoAlbers,\n  albersusa: geoAlbersUsa,\n  azimuthalequalarea: geoAzimuthalEqualArea,\n  azimuthalequidistant: geoAzimuthalEquidistant,\n  conicconformal: geoConicConformal,\n  conicequalarea: geoConicEqualArea,\n  conicequidistant: geoConicEquidistant,\n  equalEarth: geoEqualEarth,\n  equirectangular: geoEquirectangular,\n  gnomonic: geoGnomonic,\n  identity: geoIdentity,\n  mercator: geoMercator,\n  mollweide: geoMollweide,\n  naturalEarth1: geoNaturalEarth1,\n  orthographic: geoOrthographic,\n  stereographic: geoStereographic,\n  transversemercator: geoTransverseMercator\n};\nfor (var key in projections) {\n  projection(key, projections[key]);\n}\nexport { getProjectionPath, projection, projectionProperties };","map":{"version":3,"names":["geoPath","geoAlbers","geoAlbersUsa","geoAzimuthalEqualArea","geoAzimuthalEquidistant","geoConicConformal","geoConicEqualArea","geoConicEquidistant","geoEqualEarth","geoEquirectangular","geoGnomonic","geoIdentity","geoMercator","geoNaturalEarth1","geoOrthographic","geoStereographic","geoTransverseMercator","geoMollweide","defaultPath","projectionProperties","create","type","constructor","projection","p","path","copy","c","forEach","prop","pointRadius","proj","Error","toLowerCase","arguments","length","projections","getProjectionPath","albers","albersusa","azimuthalequalarea","azimuthalequidistant","conicconformal","conicequalarea","conicequidistant","equalEarth","equirectangular","gnomonic","identity","mercator","mollweide","naturalEarth1","orthographic","stereographic","transversemercator","key"],"sources":["/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/vega-projection/build/vega-projection.module.js"],"sourcesContent":["import { geoPath, geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEquidistant, geoConicConformal, geoConicEqualArea, geoConicEquidistant, geoEqualEarth, geoEquirectangular, geoGnomonic, geoIdentity, geoMercator, geoNaturalEarth1, geoOrthographic, geoStereographic, geoTransverseMercator } from 'd3-geo';\nimport { geoMollweide } from 'd3-geo-projection';\n\nconst defaultPath = geoPath();\nconst projectionProperties = [// standard properties in d3-geo\n'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections\n'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n/**\n * Augment projections with their type and a copy method.\n */\n\nfunction create(type, constructor) {\n  return function projection() {\n    const p = constructor();\n    p.type = type;\n    p.path = geoPath().projection(p);\n\n    p.copy = p.copy || function () {\n      const c = projection();\n      projectionProperties.forEach(prop => {\n        if (p[prop]) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n\n    return p;\n  };\n}\n\nfunction projection(type, proj) {\n  if (!type || typeof type !== 'string') {\n    throw new Error('Projection type must be a name string.');\n  }\n\n  type = type.toLowerCase();\n\n  if (arguments.length > 1) {\n    projections[type] = create(type, proj);\n    return this;\n  } else {\n    return projections[type] || null;\n  }\n}\nfunction getProjectionPath(proj) {\n  return proj && proj.path || defaultPath;\n}\nconst projections = {\n  // base d3-geo projection types\n  albers: geoAlbers,\n  albersusa: geoAlbersUsa,\n  azimuthalequalarea: geoAzimuthalEqualArea,\n  azimuthalequidistant: geoAzimuthalEquidistant,\n  conicconformal: geoConicConformal,\n  conicequalarea: geoConicEqualArea,\n  conicequidistant: geoConicEquidistant,\n  equalEarth: geoEqualEarth,\n  equirectangular: geoEquirectangular,\n  gnomonic: geoGnomonic,\n  identity: geoIdentity,\n  mercator: geoMercator,\n  mollweide: geoMollweide,\n  naturalEarth1: geoNaturalEarth1,\n  orthographic: geoOrthographic,\n  stereographic: geoStereographic,\n  transversemercator: geoTransverseMercator\n};\n\nfor (const key in projections) {\n  projection(key, projections[key]);\n}\n\nexport { getProjectionPath, projection, projectionProperties };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}