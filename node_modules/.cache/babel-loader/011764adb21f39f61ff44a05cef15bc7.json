{"ast":null,"code":"import _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { parseData as _parseData } from './data/parse';\nimport { assembleLayoutSignals as _assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nimport { Model } from './model';\nexport var ConcatModel = /*#__PURE__*/function (_Model) {\n  _inherits(ConcatModel, _Model);\n  var _super = _createSuper(ConcatModel);\n  function ConcatModel(spec, parent, parentGivenName, config) {\n    var _this;\n    _classCallCheck(this, ConcatModel);\n    var _a, _b, _c, _d;\n    _this = _super.call(this, spec, 'concat', parent, parentGivenName, config, spec.resolve);\n    if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n    _this.children = _this.getChildren(spec).map(function (child, i) {\n      return buildModel(child, _assertThisInitialized(_this), _this.getName(\"concat_\".concat(i)), undefined, config);\n    });\n    return _this;\n  }\n  _createClass(ConcatModel, [{\n    key: \"parseData\",\n    value: function parseData() {\n      this.component.data = _parseData(this);\n      var _iterator = _createForOfIteratorHelper(this.children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          child.parseData();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"parseSelections\",\n    value: function parseSelections() {\n      // Merge selections up the hierarchy so that they may be referenced\n      // across unit specs. Persist their definitions within each child\n      // to assemble signals which remain within output Vega unit groups.\n      this.component.selection = {};\n      var _iterator2 = _createForOfIteratorHelper(this.children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          child.parseSelections();\n          var _iterator3 = _createForOfIteratorHelper(keys(child.component.selection)),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var key = _step3.value;\n              this.component.selection[key] = child.component.selection[key];\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"parseMarkGroup\",\n    value: function parseMarkGroup() {\n      var _iterator4 = _createForOfIteratorHelper(this.children),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var child = _step4.value;\n          child.parseMarkGroup();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"parseAxesAndHeaders\",\n    value: function parseAxesAndHeaders() {\n      var _iterator5 = _createForOfIteratorHelper(this.children),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var child = _step5.value;\n          child.parseAxesAndHeaders();\n        }\n        // TODO(#2415): support shared axes\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren(spec) {\n      if (isVConcatSpec(spec)) {\n        return spec.vconcat;\n      } else if (isHConcatSpec(spec)) {\n        return spec.hconcat;\n      }\n      return spec.concat;\n    }\n  }, {\n    key: \"parseLayoutSize\",\n    value: function parseLayoutSize() {\n      parseConcatLayoutSize(this);\n    }\n  }, {\n    key: \"parseAxisGroup\",\n    value: function parseAxisGroup() {\n      return null;\n    }\n  }, {\n    key: \"assembleSelectionTopLevelSignals\",\n    value: function assembleSelectionTopLevelSignals(signals) {\n      return this.children.reduce(function (sg, child) {\n        return child.assembleSelectionTopLevelSignals(sg);\n      }, signals);\n    }\n  }, {\n    key: \"assembleSignals\",\n    value: function assembleSignals() {\n      this.children.forEach(function (child) {\n        return child.assembleSignals();\n      });\n      return [];\n    }\n  }, {\n    key: \"assembleLayoutSignals\",\n    value: function assembleLayoutSignals() {\n      var layoutSignals = _assembleLayoutSignals(this);\n      var _iterator6 = _createForOfIteratorHelper(this.children),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var child = _step6.value;\n          layoutSignals.push.apply(layoutSignals, _toConsumableArray(child.assembleLayoutSignals()));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return layoutSignals;\n    }\n  }, {\n    key: \"assembleSelectionData\",\n    value: function assembleSelectionData(data) {\n      return this.children.reduce(function (db, child) {\n        return child.assembleSelectionData(db);\n      }, data);\n    }\n  }, {\n    key: \"assembleMarks\",\n    value: function assembleMarks() {\n      // only children have marks\n      return this.children.map(function (child) {\n        var title = child.assembleTitle();\n        var style = child.assembleGroupStyle();\n        var encodeEntry = child.assembleGroupEncodeEntry(false);\n        return Object.assign(Object.assign(Object.assign(Object.assign({\n          type: 'group',\n          name: child.getName('group')\n        }, title ? {\n          title: title\n        } : {}), style ? {\n          style: style\n        } : {}), encodeEntry ? {\n          encode: {\n            update: encodeEntry\n          }\n        } : {}), child.assembleGroup());\n      });\n    }\n  }, {\n    key: \"assembleGroupStyle\",\n    value: function assembleGroupStyle() {\n      return undefined;\n    }\n  }, {\n    key: \"assembleDefaultLayout\",\n    value: function assembleDefaultLayout() {\n      var columns = this.layout.columns;\n      return Object.assign(Object.assign({}, columns != null ? {\n        columns: columns\n      } : {}), {\n        bounds: 'full',\n        // Use align each so it can work with multiple plots with different size\n        align: 'each'\n      });\n    }\n  }]);\n  return ConcatModel;\n}(Model);","map":{"version":3,"sources":["../../../src/compile/concat.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nimport { Model } from './model';\nexport class ConcatModel extends Model {\n    constructor(spec, parent, parentGivenName, config) {\n        var _a, _b, _c, _d;\n        super(spec, 'concat', parent, parentGivenName, config, spec.resolve);\n        if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        this.children = this.getChildren(spec).map((child, i) => {\n            return buildModel(child, this, this.getName(`concat_${i}`), undefined, config);\n        });\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        for (const child of this.children) {\n            child.parseData();\n        }\n    }\n    parseSelections() {\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        for (const child of this.children) {\n            child.parseSelections();\n            for (const key of keys(child.component.selection)) {\n                this.component.selection[key] = child.component.selection[key];\n            }\n        }\n    }\n    parseMarkGroup() {\n        for (const child of this.children) {\n            child.parseMarkGroup();\n        }\n    }\n    parseAxesAndHeaders() {\n        for (const child of this.children) {\n            child.parseAxesAndHeaders();\n        }\n        // TODO(#2415): support shared axes\n    }\n    getChildren(spec) {\n        if (isVConcatSpec(spec)) {\n            return spec.vconcat;\n        }\n        else if (isHConcatSpec(spec)) {\n            return spec.hconcat;\n        }\n        return spec.concat;\n    }\n    parseLayoutSize() {\n        parseConcatLayoutSize(this);\n    }\n    parseAxisGroup() {\n        return null;\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n    assembleSignals() {\n        this.children.forEach(child => child.assembleSignals());\n        return [];\n    }\n    assembleLayoutSignals() {\n        const layoutSignals = assembleLayoutSignals(this);\n        for (const child of this.children) {\n            layoutSignals.push(...child.assembleLayoutSignals());\n        }\n        return layoutSignals;\n    }\n    assembleSelectionData(data) {\n        return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n    assembleMarks() {\n        // only children have marks\n        return this.children.map(child => {\n            const title = child.assembleTitle();\n            const style = child.assembleGroupStyle();\n            const encodeEntry = child.assembleGroupEncodeEntry(false);\n            return Object.assign(Object.assign(Object.assign(Object.assign({ type: 'group', name: child.getName('group') }, (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), child.assembleGroup());\n        });\n    }\n    assembleGroupStyle() {\n        return undefined;\n    }\n    assembleDefaultLayout() {\n        const columns = this.layout.columns;\n        return Object.assign(Object.assign({}, (columns != null ? { columns } : {})), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    }\n}\n//# sourceMappingURL=concat.js.map"]},"metadata":{},"sourceType":"module"}