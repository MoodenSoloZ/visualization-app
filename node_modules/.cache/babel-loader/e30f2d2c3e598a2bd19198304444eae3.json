{"ast":null,"code":"// The MIT License (MIT)\n//\n// Copyright (c) 2014 Jonas Finnemann Jensen\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar uuidv4 = require('uuid/v4');\nvar uuidParse = require('uuid-parse');\n\n/**\n * Returns the given uuid as a 22 character slug. This can be a regular v4\n * slug or a \"nice\" slug.\n */\nexports.encode = function (uuid_) {\n  var bytes = uuidParse.parse(uuid_);\n  var base64 = new Buffer(bytes).toString('base64');\n  var slug = base64.replace(/\\+/g, '-') // Replace + with - (see RFC 4648, sec. 5)\n  .replace(/\\//g, '_') // Replace / with _ (see RFC 4648, sec. 5)\n  .substring(0, 22); // Drop '==' padding\n  return slug;\n};\n\n/**\n * Returns the uuid represented by the given v4 or \"nice\" slug\n */\nexports.decode = function (slug) {\n  var base64 = slug.replace(/-/g, '+').replace(/_/g, '/') + '==';\n  return uuidParse.unparse(new Buffer(base64, 'base64'));\n};\n\n/**\n * Returns a randomly generated uuid v4 compliant slug\n */\nexports.v4 = function () {\n  var bytes = uuidv4(null, new Buffer(16));\n  var base64 = bytes.toString('base64');\n  var slug = base64.replace(/\\+/g, '-') // Replace + with - (see RFC 4648, sec. 5)\n  .replace(/\\//g, '_') // Replace / with _ (see RFC 4648, sec. 5)\n  .substring(0, 22); // Drop '==' padding\n  return slug;\n};\n\n/**\n * Returns a randomly generated uuid v4 compliant slug which conforms to a set\n * of \"nice\" properties, at the cost of some entropy. Currently this means one\n * extra fixed bit (the first bit of the uuid is set to 0) which guarantees the\n * slug will begin with [A-Za-f]. For example such slugs don't require special\n * handling when used as command line parameters (whereas non-nice slugs may\n * start with `-` which can confuse command line tools).\n *\n * Potentially other \"nice\" properties may be added in future to further\n * restrict the range of potential uuids that may be generated.\n */\nexports.nice = function () {\n  var bytes = uuidv4(null, new Buffer(16));\n  bytes[0] = bytes[0] & 0x7f; // unset first bit to ensure [A-Za-f] first char\n  var base64 = bytes.toString('base64');\n  var slug = base64.replace(/\\+/g, '-') // Replace + with - (see RFC 4648, sec. 5)\n  .replace(/\\//g, '_') // Replace / with _ (see RFC 4648, sec. 5)\n  .substring(0, 22); // Drop '==' padding\n  return slug;\n};","map":{"version":3,"names":["uuidv4","require","uuidParse","exports","encode","uuid_","bytes","parse","base64","Buffer","toString","slug","replace","substring","decode","unparse","v4","nice"],"sources":["/Users/weihangzhang/Documents/webpage/visualization-app-git/node_modules/higlass-text/node_modules/slugid/slugid.js"],"sourcesContent":["// The MIT License (MIT)\n//\n// Copyright (c) 2014 Jonas Finnemann Jensen\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar uuidv4 = require('uuid/v4');\nvar uuidParse = require('uuid-parse');\n\n/**\n * Returns the given uuid as a 22 character slug. This can be a regular v4\n * slug or a \"nice\" slug.\n */\nexports.encode = function(uuid_) {\n  var bytes   = uuidParse.parse(uuid_);\n  var base64  = (new Buffer(bytes)).toString('base64');\n  var slug = base64\n              .replace(/\\+/g, '-')  // Replace + with - (see RFC 4648, sec. 5)\n              .replace(/\\//g, '_')  // Replace / with _ (see RFC 4648, sec. 5)\n              .substring(0, 22);    // Drop '==' padding\n  return slug;\n};\n\n/**\n * Returns the uuid represented by the given v4 or \"nice\" slug\n */\nexports.decode = function(slug) {\n  var base64 = slug\n                  .replace(/-/g, '+')\n                  .replace(/_/g, '/')\n                  + '==';\n  return uuidParse.unparse(new Buffer(base64, 'base64'));\n};\n\n/**\n * Returns a randomly generated uuid v4 compliant slug\n */\nexports.v4 = function() {\n  var bytes   = uuidv4(null, new Buffer(16));\n  var base64  = bytes.toString('base64');\n  var slug = base64\n              .replace(/\\+/g, '-')  // Replace + with - (see RFC 4648, sec. 5)\n              .replace(/\\//g, '_')  // Replace / with _ (see RFC 4648, sec. 5)\n              .substring(0, 22);    // Drop '==' padding\n  return slug;\n};\n\n/**\n * Returns a randomly generated uuid v4 compliant slug which conforms to a set\n * of \"nice\" properties, at the cost of some entropy. Currently this means one\n * extra fixed bit (the first bit of the uuid is set to 0) which guarantees the\n * slug will begin with [A-Za-f]. For example such slugs don't require special\n * handling when used as command line parameters (whereas non-nice slugs may\n * start with `-` which can confuse command line tools).\n *\n * Potentially other \"nice\" properties may be added in future to further\n * restrict the range of potential uuids that may be generated.\n */\nexports.nice = function() {\n  var bytes   = uuidv4(null, new Buffer(16));\n  bytes[0] = bytes[0] & 0x7f;  // unset first bit to ensure [A-Za-f] first char\n  var base64  = bytes.toString('base64');\n  var slug = base64\n              .replace(/\\+/g, '-')  // Replace + with - (see RFC 4648, sec. 5)\n              .replace(/\\//g, '_')  // Replace / with _ (see RFC 4648, sec. 5)\n              .substring(0, 22);    // Drop '==' padding\n  return slug;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAErC;AACA;AACA;AACA;AACAE,OAAO,CAACC,MAAM,GAAG,UAASC,KAAK,EAAE;EAC/B,IAAIC,KAAK,GAAKJ,SAAS,CAACK,KAAK,CAACF,KAAK,CAAC;EACpC,IAAIG,MAAM,GAAK,IAAIC,MAAM,CAACH,KAAK,CAAC,CAAEI,QAAQ,CAAC,QAAQ,CAAC;EACpD,IAAIC,IAAI,GAAGH,MAAM,CACJI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE;EAAA,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE;EAAA,CACrBC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAI;EAClC,OAAOF,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACAR,OAAO,CAACW,MAAM,GAAG,UAASH,IAAI,EAAE;EAC9B,IAAIH,MAAM,GAAGG,IAAI,CACAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,GACjB,IAAI;EACtB,OAAOV,SAAS,CAACa,OAAO,CAAC,IAAIN,MAAM,CAACD,MAAM,EAAE,QAAQ,CAAC,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACAL,OAAO,CAACa,EAAE,GAAG,YAAW;EACtB,IAAIV,KAAK,GAAKN,MAAM,CAAC,IAAI,EAAE,IAAIS,MAAM,CAAC,EAAE,CAAC,CAAC;EAC1C,IAAID,MAAM,GAAIF,KAAK,CAACI,QAAQ,CAAC,QAAQ,CAAC;EACtC,IAAIC,IAAI,GAAGH,MAAM,CACJI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE;EAAA,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE;EAAA,CACrBC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAI;EAClC,OAAOF,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,OAAO,CAACc,IAAI,GAAG,YAAW;EACxB,IAAIX,KAAK,GAAKN,MAAM,CAAC,IAAI,EAAE,IAAIS,MAAM,CAAC,EAAE,CAAC,CAAC;EAC1CH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAE;EAC7B,IAAIE,MAAM,GAAIF,KAAK,CAACI,QAAQ,CAAC,QAAQ,CAAC;EACtC,IAAIC,IAAI,GAAGH,MAAM,CACJI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE;EAAA,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE;EAAA,CACrBC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAI;EAClC,OAAOF,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"script"}