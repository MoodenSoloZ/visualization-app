{"ast":null,"code":"import _regeneratorRuntime from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { identity, array, isFunction, constant, isArray, id, error, truthy, debounce as _debounce, extend, visitArray, inherits, logger, Error, hasOwnProperty } from 'vega-util';\nimport { read, responseType, loader } from 'vega-loader';\nimport { defaultLocale } from 'vega-format';\nfunction UniqueList(idFunc) {\n  var $ = idFunc || identity,\n    list = [],\n    ids = {};\n  list.add = function (_) {\n    var id = $(_);\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n    return list;\n  };\n  list.remove = function (_) {\n    var id = $(_);\n    if (ids[id]) {\n      ids[id] = 0;\n      var idx = list.indexOf(_);\n      if (idx >= 0) list.splice(idx, 1);\n    }\n    return list;\n  };\n  return list;\n}\n\n/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nfunction asyncCallback(_x, _x2) {\n  return _asyncCallback.apply(this, arguments);\n}\nfunction _asyncCallback() {\n  _asyncCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(df, callback) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return callback(df);\n          case 3:\n            _context.next = 8;\n            break;\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            df.error(_context.t0);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 5]]);\n  }));\n  return _asyncCallback.apply(this, arguments);\n}\nvar TUPLE_ID_KEY = Symbol('vega_id');\nvar TUPLE_ID = 1;\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\n\nfunction isTuple(t) {\n  return !!(t && tupleid(t));\n}\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\n\nfunction tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\n\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\n\nfunction ingest$1(datum) {\n  var t = datum === Object(datum) ? datum : {\n    data: datum\n  };\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\n\nfunction derive(t) {\n  return rederive(t, ingest$1({}));\n}\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\n\nfunction rederive(t, d) {\n  for (var k in t) {\n    d[k] = t[k];\n  }\n  return d;\n}\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\n\nfunction replace(t, d) {\n  return setid(d, tupleid(t));\n}\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\n\nfunction stableCompare(cmp, f) {\n  return !cmp ? null : f ? function (a, b) {\n    return cmp(a, b) || tupleid(f(a)) - tupleid(f(b));\n  } : function (a, b) {\n    return cmp(a, b) || tupleid(a) - tupleid(b);\n  };\n}\nfunction isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\nfunction changeset() {\n  var add = [],\n    // insert tuples\n    rem = [],\n    // remove tuples\n    mod = [],\n    // modify tuples\n    remp = [],\n    // remove by predicate\n    modp = []; // modify by predicate\n\n  var _clean = null,\n    _reflow = false;\n  return {\n    constructor: changeset,\n    insert: function insert(t) {\n      var d = array(t),\n        n = d.length;\n      for (var i = 0; i < n; ++i) {\n        add.push(d[i]);\n      }\n      return this;\n    },\n    remove: function remove(t) {\n      var a = isFunction(t) ? remp : rem,\n        d = array(t),\n        n = d.length;\n      for (var i = 0; i < n; ++i) {\n        a.push(d[i]);\n      }\n      return this;\n    },\n    modify: function modify(t, field, value) {\n      var m = {\n        field: field,\n        value: constant(value)\n      };\n      if (isFunction(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n      return this;\n    },\n    encode: function encode(t, set) {\n      if (isFunction(t)) modp.push({\n        filter: t,\n        field: set\n      });else mod.push({\n        tuple: t,\n        field: set\n      });\n      return this;\n    },\n    clean: function clean(value) {\n      _clean = value;\n      return this;\n    },\n    reflow: function reflow() {\n      _reflow = true;\n      return this;\n    },\n    pulse: function pulse(_pulse, tuples) {\n      var cur = {},\n        out = {};\n      var i, n, m, f, t, id; // build lookup table of current tuples\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        cur[tupleid(tuples[i])] = 1;\n      } // process individual tuples to remove\n\n      for (i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        cur[tupleid(t)] = -1;\n      } // process predicate-based removals\n\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(function (t) {\n          if (f(t)) cur[tupleid(t)] = -1;\n        });\n      } // process all add tuples\n\n      for (i = 0, n = add.length; i < n; ++i) {\n        t = add[i];\n        id = tupleid(t);\n        if (cur[id]) {\n          // tuple already resides in dataset\n          // if flagged for both add and remove, cancel\n          cur[id] = 1;\n        } else {\n          // tuple does not reside in dataset, add\n          _pulse.add.push(ingest$1(add[i]));\n        }\n      } // populate pulse rem list\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        t = tuples[i];\n        if (cur[tupleid(t)] < 0) _pulse.rem.push(t);\n      } // modify helper method\n\n      function modify(t, f, v) {\n        if (v) {\n          t[f] = v(t);\n        } else {\n          _pulse.encode = f;\n        }\n        if (!_reflow) out[tupleid(t)] = t;\n      } // process individual tuples to modify\n\n      for (i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        t = m.tuple;\n        f = m.field;\n        id = cur[tupleid(t)];\n        if (id > 0) {\n          modify(t, f, m.value);\n          _pulse.modifies(f);\n        }\n      } // process predicate-based modifications\n\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(function (t) {\n          if (f(t) && cur[tupleid(t)] > 0) {\n            modify(t, m.field, m.value);\n          }\n        });\n        _pulse.modifies(m.field);\n      } // upon reflow request, populate mod with all non-removed tuples\n      // otherwise, populate mod with modified tuples only\n\n      if (_reflow) {\n        _pulse.mod = rem.length || remp.length ? tuples.filter(function (t) {\n          return cur[tupleid(t)] > 0;\n        }) : tuples.slice();\n      } else {\n        for (id in out) {\n          _pulse.mod.push(out[id]);\n        }\n      } // set pulse garbage collection request\n\n      if (_clean || _clean == null && (rem.length || remp.length)) {\n        _pulse.clean(true);\n      }\n      return _pulse;\n    }\n  };\n}\nvar CACHE = '_:mod:_';\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\n\nfunction Parameters() {\n  Object.defineProperty(this, CACHE, {\n    writable: true,\n    value: {}\n  });\n}\nParameters.prototype = {\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  set: function set(name, index, value, force) {\n    var o = this,\n      v = o[name],\n      mod = o[CACHE];\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n    return o;\n  },\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  modified: function modified(name, index) {\n    var mod = this[CACHE];\n    if (!arguments.length) {\n      for (var k in mod) {\n        if (mod[k]) return true;\n      }\n      return false;\n    } else if (isArray(name)) {\n      for (var _k = 0; _k < name.length; ++_k) {\n        if (mod[name[_k]]) return true;\n      }\n      return false;\n    }\n    return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n  },\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  clear: function clear() {\n    this[CACHE] = {};\n    return this;\n  }\n};\nvar OP_ID = 0;\nvar PULSE = 'pulse',\n  NO_PARAMS = new Parameters(); // Boolean Flags\n\nvar SKIP$1 = 1,\n  MODIFIED = 2;\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\n\nfunction Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n  if (update) {\n    this._update = update;\n  }\n  if (params) this.parameters(params, react);\n}\nfunction flag(bit) {\n  return function (state) {\n    var f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? f | bit : f & ~bit;\n    return this;\n  };\n}\nOperator.prototype = {\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  targets: function targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  set: function set(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  },\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  skip: flag(SKIP$1),\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  modified: flag(MODIFIED),\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initiatal evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  parameters: function parameters(params, react, initonly) {\n    var _this = this;\n    react = react !== false;\n    var argval = this._argval = this._argval || new Parameters(),\n      argops = this._argops = this._argops || [],\n      deps = [];\n    var name, value, n, i;\n    var add = function add(name, index, value) {\n      if (value instanceof Operator) {\n        if (value !== _this) {\n          if (react) value.targets().add(_this);\n          deps.push(value);\n        }\n        argops.push({\n          op: value,\n          name: name,\n          index: index\n        });\n      } else {\n        argval.set(name, index, value);\n      }\n    };\n    for (name in params) {\n      value = params[name];\n      if (name === PULSE) {\n        array(value).forEach(function (op) {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== _this) {\n            op.targets().add(_this);\n            deps.push(op);\n          }\n        });\n        this.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n        for (i = 0; i < n; ++i) {\n          add(name, i, value[i]);\n        }\n      } else {\n        add(name, -1, value);\n      }\n    }\n    this.marshall().clear(); // initialize values\n\n    if (initonly) argops.initonly = true;\n    return deps;\n  },\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  marshall: function marshall(stamp) {\n    var argval = this._argval || NO_PARAMS,\n      argops = this._argops;\n    var item, i, op, mod;\n    if (argops) {\n      var n = argops.length;\n      for (i = 0; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n      if (argops.initonly) {\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n        this._argops = null;\n        this._update = null;\n      }\n    }\n    return argval;\n  },\n  /**\n   * Detach this operator from the dataflow.\n   * Unregisters listeners on upstream dependencies.\n   */\n  detach: function detach() {\n    var argops = this._argops;\n    var i, n, item, op;\n    if (argops) {\n      for (i = 0, n = argops.length; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        if (op._targets) {\n          op._targets.remove(this);\n        }\n      }\n    } // remove references to the source and pulse object,\n    // if present, to prevent memory leaks of old data.\n\n    this.pulse = null;\n    this.source = null;\n  },\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  evaluate: function evaluate(pulse) {\n    var update = this._update;\n    if (update) {\n      var params = this.marshall(pulse.stamp),\n        v = update.call(this, params, pulse);\n      params.clear();\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  },\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run: function run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    var rv;\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    return this.pulse = rv || pulse;\n  }\n};\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\n\nfunction add(init, update, params, react) {\n  var shift = 1,\n    op;\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n  this.rank(op);\n  if (shift) {\n    react = params;\n    params = update;\n  }\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n  return op;\n}\n\n/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\nfunction connect(target, sources) {\n  var targetRank = target.rank,\n    n = sources.length;\n  for (var i = 0; i < n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\nvar STREAM_ID = 0;\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\n\nfunction EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\n\nfunction stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\nEventStream.prototype = {\n  _filter: truthy,\n  _apply: identity,\n  targets: function targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n  consume: function consume(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  },\n  receive: function receive(evt) {\n    if (this._filter(evt)) {\n      var val = this.value = this._apply(evt),\n        trg = this._targets,\n        n = trg ? trg.length : 0;\n      for (var i = 0; i < n; ++i) {\n        trg[i].receive(val);\n      }\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  },\n  filter: function filter(_filter) {\n    var s = stream(_filter);\n    this.targets().add(s);\n    return s;\n  },\n  apply: function apply(_apply) {\n    var s = stream(null, _apply);\n    this.targets().add(s);\n    return s;\n  },\n  merge: function merge() {\n    var s = stream();\n    this.targets().add(s);\n    for (var i = 0, n = arguments.length; i < n; ++i) {\n      arguments[i].targets().add(s);\n    }\n    return s;\n  },\n  throttle: function throttle(pause) {\n    var t = -1;\n    return this.filter(function () {\n      var now = Date.now();\n      if (now - t > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  },\n  debounce: function debounce(delay) {\n    var s = stream();\n    this.targets().add(stream(null, null, _debounce(delay, function (e) {\n      var df = e.dataflow;\n      s.receive(e);\n      if (df && df.run) df.run();\n    })));\n    return s;\n  },\n  between: function between(a, b) {\n    var active = false;\n    a.targets().add(stream(null, null, function () {\n      return active = true;\n    }));\n    b.targets().add(stream(null, null, function () {\n      return active = false;\n    }));\n    return this.filter(function () {\n      return active;\n    });\n  },\n  detach: function detach() {\n    // ensures compatibility with operators (#2753)\n    // remove references to other streams and filter functions that may\n    // be bound to subcontexts that need to be garbage collected.\n    this._filter = truthy;\n    this._targets = null;\n  }\n};\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\n\nfunction events(source, type, filter, apply) {\n  var df = this,\n    s = stream(filter, apply),\n    send = function send(e) {\n      e.dataflow = df;\n      try {\n        s.receive(e);\n      } catch (error) {\n        df.error(error);\n      } finally {\n        df.run();\n      }\n    };\n  var sources;\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n  var n = sources.length;\n  for (var i = 0; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n  return s;\n}\nfunction parse(data, format) {\n  var locale = this.locale();\n  return read(data, format, locale.timeParse, locale.utcParse);\n}\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\n\nfunction ingest(target, data, format) {\n  data = this.parse(data, format);\n  return this.pulse(target, this.changeset().insert(data));\n}\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\nfunction request(_x3, _x4) {\n  return _request.apply(this, arguments);\n}\nfunction _request() {\n  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, format) {\n    var df, status, data;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            df = this;\n            status = 0;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return df.loader().load(url, {\n              context: 'dataflow',\n              response: responseType(format && format.type)\n            });\n          case 5:\n            data = _context2.sent;\n            try {\n              data = df.parse(data, format);\n            } catch (err) {\n              status = -2;\n              df.warn('Data ingestion failed', url, err);\n            }\n            _context2.next = 13;\n            break;\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](2);\n            status = -1;\n            df.warn('Loading failed', url, _context2.t0);\n          case 13:\n            return _context2.abrupt(\"return\", {\n              data: data,\n              status: status\n            });\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[2, 9]]);\n  }));\n  return _request.apply(this, arguments);\n}\nfunction preload(_x5, _x6, _x7) {\n  return _preload.apply(this, arguments);\n}\nfunction _preload() {\n  _preload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(target, url, format) {\n    var df, pending, res;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            df = this, pending = df._pending || loadPending(df);\n            pending.requests += 1;\n            _context3.next = 4;\n            return df.request(url, format);\n          case 4:\n            res = _context3.sent;\n            df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n            pending.done();\n            return _context3.abrupt(\"return\", res);\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _preload.apply(this, arguments);\n}\nfunction loadPending(df) {\n  var accept;\n  var pending = new Promise(function (a) {\n    return accept = a;\n  });\n  pending.requests = 0;\n  pending.done = function () {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n  return df._pending = pending;\n}\nvar SKIP = {\n  skip: true\n};\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\n\nfunction on(source, target, update, params, options) {\n  var fn = source instanceof Operator ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n}\nfunction onStream(df, stream, target, update, params, options) {\n  var opt = extend({}, options, SKIP);\n  var func, op;\n  if (!isFunction(target)) target = constant(target);\n  if (update === undefined) {\n    func = function func(e) {\n      return df.touch(target(e));\n    };\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n    func = function func(e) {\n      op.evaluate(e);\n      var t = target(e),\n        v = op.value;\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = function func(e) {\n      return df.update(target(e), update, opt);\n    };\n  }\n  stream.apply(func);\n}\nfunction onOperator(df, source, target, update, params, options) {\n  if (update === undefined) {\n    source.targets().add(target);\n  } else {\n    var opt = options || {},\n      op = new Operator(null, updater(target, update), params, false);\n    op.modified(opt.force);\n    op.rank = source.rank; // immediately follow source\n\n    source.targets().add(op); // add dependency\n\n    if (target) {\n      op.skip(true); // skip first invocation\n\n      op.value = target.value; // initialize value\n\n      op.targets().add(target); // chain dependencies\n\n      df.connect(target, [op]); // rerank as needed, #1672\n    }\n  }\n}\n\nfunction updater(target, update) {\n  update = isFunction(update) ? update : constant(update);\n  return target ? function (_, pulse) {\n    var value = update(_, pulse);\n    if (!target.skip()) {\n      target.skip(value !== this.value).value = value;\n    }\n    return value;\n  } : update;\n}\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\n\nfunction rank(op) {\n  op.rank = ++this._rank;\n}\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\n\nfunction rerank(op) {\n  var queue = [op];\n  var cur, list, i;\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n    if (list = cur._targets) {\n      for (i = list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\n\nvar StopPropagation = {}; // Pulse visit type flags\n\nvar ADD = 1 << 0,\n  REM = 1 << 1,\n  MOD = 1 << 2,\n  ADD_REM = ADD | REM,\n  ADD_MOD = ADD | MOD,\n  ALL = ADD | REM | MOD,\n  REFLOW = 1 << 3,\n  SOURCE = 1 << 4,\n  NO_SOURCE = 1 << 5,\n  NO_FIELDS = 1 << 6;\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\n\nfunction Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\nfunction _materialize(data, filter) {\n  var out = [];\n  visitArray(data, filter, function (_) {\n    return out.push(_);\n  });\n  return out;\n}\nfunction filter(pulse, flags) {\n  var map = {};\n  pulse.visit(flags, function (t) {\n    map[tupleid(t)] = 1;\n  });\n  return function (t) {\n    return map[tupleid(t)] ? null : t;\n  };\n}\nfunction addFilter(a, b) {\n  return a ? function (t, i) {\n    return a(t, i) && b(t, i);\n  } : b;\n}\nPulse.prototype = {\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  StopPropagation: StopPropagation,\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  ADD: ADD,\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  REM: REM,\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  MOD: MOD,\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  ADD_REM: ADD_REM,\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  ADD_MOD: ADD_MOD,\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  ALL: ALL,\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  REFLOW: REFLOW,\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  SOURCE: SOURCE,\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_SOURCE: NO_SOURCE,\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_FIELDS: NO_FIELDS,\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  fork: function fork(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  },\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  clone: function clone() {\n    var p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  },\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  addAll: function addAll() {\n    var p = this;\n    var reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n    || !p.rem.length && p.source.length === p.add.length;\n    if (reuse) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      p.rem = []; // new operators can ignore rem #2769\n\n      return p;\n    }\n  },\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  init: function init(src, flags) {\n    var p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n      if (src.cleans) p.cleans = src.cleans;\n    }\n    return p;\n  },\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  runAfter: function runAfter(func) {\n    this.dataflow.runAfter(func);\n  },\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  changed: function changed(flags) {\n    var f = flags || ALL;\n    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;\n  },\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  reflow: function reflow(fork) {\n    if (fork) return this.fork(ALL).reflow();\n    var len = this.add.length,\n      src = this.source && this.source.length;\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n    return this;\n  },\n  /**\n   * Get/set metadata to pulse requesting garbage collection\n   * to reclaim currently unused resources.\n   */\n  clean: function clean(value) {\n    if (arguments.length) {\n      this.cleans = !!value;\n      return this;\n    } else {\n      return this.cleans;\n    }\n  },\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  modifies: function modifies(_) {\n    var hash = this.fields || (this.fields = {});\n    if (isArray(_)) {\n      _.forEach(function (f) {\n        return hash[f] = true;\n      });\n    } else {\n      hash[_] = true;\n    }\n    return this;\n  },\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  modified: function modified(_, nomod) {\n    var fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(function (f) {\n      return fields[f];\n    }) : fields[_];\n  },\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  filter: function filter(flags, _filter2) {\n    var p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, _filter2);\n    if (flags & REM) p.remF = addFilter(p.remF, _filter2);\n    if (flags & MOD) p.modF = addFilter(p.modF, _filter2);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, _filter2);\n    return p;\n  },\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  materialize: function materialize(flags) {\n    flags = flags || ALL;\n    var p = this;\n    if (flags & ADD && p.addF) {\n      p.add = _materialize(p.add, p.addF);\n      p.addF = null;\n    }\n    if (flags & REM && p.remF) {\n      p.rem = _materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n    if (flags & MOD && p.modF) {\n      p.mod = _materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n    if (flags & SOURCE && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n    return p;\n  },\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  visit: function visit(flags, visitor) {\n    var p = this,\n      v = visitor;\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n    var src = p.source;\n    if (flags & REFLOW && src) {\n      var sum = p.add.length + p.mod.length;\n      if (sum === src.length) ;else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n    return p;\n  }\n};\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\n\nfunction MultiPulse(dataflow, stamp, pulses, encode) {\n  var p = this,\n    n = pulses.length;\n  var c = 0;\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n  for (var i = 0; i < n; ++i) {\n    var _pulse2 = pulses[i];\n    if (_pulse2.stamp !== stamp) continue;\n    if (_pulse2.fields) {\n      var hash = p.fields || (p.fields = {});\n      for (var f in _pulse2.fields) {\n        hash[f] = 1;\n      }\n    }\n    if (_pulse2.changed(p.ADD)) c |= p.ADD;\n    if (_pulse2.changed(p.REM)) c |= p.REM;\n    if (_pulse2.changed(p.MOD)) c |= p.MOD;\n  }\n  this.changes = c;\n}\ninherits(MultiPulse, Pulse, {\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  fork: function fork(flags) {\n    var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n    if (flags !== undefined) {\n      if (flags & p.ADD) this.visit(p.ADD, function (t) {\n        return p.add.push(t);\n      });\n      if (flags & p.REM) this.visit(p.REM, function (t) {\n        return p.rem.push(t);\n      });\n      if (flags & p.MOD) this.visit(p.MOD, function (t) {\n        return p.mod.push(t);\n      });\n    }\n    return p;\n  },\n  changed: function changed(flags) {\n    return this.changes & flags;\n  },\n  modified: function modified(_) {\n    var p = this,\n      fields = p.fields;\n    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(function (f) {\n      return fields[f];\n    }) : fields[_];\n  },\n  filter: function filter() {\n    error('MultiPulse does not support filtering.');\n  },\n  materialize: function materialize() {\n    error('MultiPulse does not support materialization.');\n  },\n  visit: function visit(flags, visitor) {\n    var p = this,\n      pulses = p.pulses,\n      n = pulses.length;\n    var i = 0;\n    if (flags & p.SOURCE) {\n      for (; i < n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i < n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n    return p;\n  }\n});\n\n/* eslint-disable require-atomic-updates */\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\nfunction evaluate(_x8, _x9, _x10) {\n  return _evaluate.apply(this, arguments);\n}\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\nfunction _evaluate() {\n  _evaluate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(encode, prerun, postrun) {\n    var df, async, stamp, count, op, next, error, pr, i;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            df = this, async = []; // if the pulse value is set, this is a re-entrant call\n            if (!df._pulse) {\n              _context4.next = 3;\n              break;\n            }\n            return _context4.abrupt(\"return\", reentrant(df));\n          case 3:\n            if (!df._pending) {\n              _context4.next = 6;\n              break;\n            }\n            _context4.next = 6;\n            return df._pending;\n          case 6:\n            if (!prerun) {\n              _context4.next = 9;\n              break;\n            }\n            _context4.next = 9;\n            return asyncCallback(df, prerun);\n          case 9:\n            if (df._touched.length) {\n              _context4.next = 12;\n              break;\n            }\n            df.debug('Dataflow invoked, but nothing to do.');\n            return _context4.abrupt(\"return\", df);\n          case 12:\n            // increment timestamp clock\n            stamp = ++df._clock; // set the current pulse\n            df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators\n\n            df._touched.forEach(function (op) {\n              return df._enqueue(op, true);\n            });\n            df._touched = UniqueList(id);\n            count = 0;\n            _context4.prev = 17;\n          case 18:\n            if (!(df._heap.size() > 0)) {\n              _context4.next = 35;\n              break;\n            }\n            // dequeue operator with highest priority\n            op = df._heap.pop(); // re-queue if rank changed\n            if (!(op.rank !== op.qrank)) {\n              _context4.next = 23;\n              break;\n            }\n            df._enqueue(op, true);\n            return _context4.abrupt(\"continue\", 18);\n          case 23:\n            // otherwise, evaluate the operator\n\n            next = op.run(df._getPulse(op, encode));\n            if (!next.then) {\n              _context4.next = 30;\n              break;\n            }\n            _context4.next = 27;\n            return next;\n          case 27:\n            next = _context4.sent;\n            _context4.next = 31;\n            break;\n          case 30:\n            if (next.async) {\n              // queue parallel asynchronous execution\n              async.push(next.async);\n              next = StopPropagation;\n            }\n          case 31:\n            // propagate evaluation, enqueue dependent operators\n\n            if (next !== StopPropagation) {\n              if (op._targets) op._targets.forEach(function (op) {\n                return df._enqueue(op);\n              });\n            } // increment visit counter\n\n            ++count;\n            _context4.next = 18;\n            break;\n          case 35:\n            _context4.next = 41;\n            break;\n          case 37:\n            _context4.prev = 37;\n            _context4.t0 = _context4[\"catch\"](17);\n            df._heap.clear();\n            error = _context4.t0;\n          case 41:\n            // reset pulse map\n\n            df._input = {};\n            df._pulse = null;\n            df.debug(\"Pulse \".concat(stamp, \": \").concat(count, \" operators\"));\n            if (error) {\n              df._postrun = [];\n              df.error(error);\n            } // invoke callbacks queued via runAfter\n            if (!df._postrun.length) {\n              _context4.next = 55;\n              break;\n            }\n            pr = df._postrun.sort(function (a, b) {\n              return b.priority - a.priority;\n            });\n            df._postrun = [];\n            i = 0;\n          case 49:\n            if (!(i < pr.length)) {\n              _context4.next = 55;\n              break;\n            }\n            _context4.next = 52;\n            return asyncCallback(df, pr[i].callback);\n          case 52:\n            ++i;\n            _context4.next = 49;\n            break;\n          case 55:\n            if (!postrun) {\n              _context4.next = 58;\n              break;\n            }\n            _context4.next = 58;\n            return asyncCallback(df, postrun);\n          case 58:\n            // handle non-blocking asynchronous callbacks\n\n            if (async.length) {\n              Promise.all(async).then(function (cb) {\n                return df.runAsync(null, function () {\n                  cb.forEach(function (f) {\n                    try {\n                      f(df);\n                    } catch (err) {\n                      df.error(err);\n                    }\n                  });\n                });\n              });\n            }\n            return _context4.abrupt(\"return\", df);\n          case 60:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[17, 37]]);\n  }));\n  return _evaluate.apply(this, arguments);\n}\nfunction runAsync(_x11, _x12, _x13) {\n  return _runAsync.apply(this, arguments);\n}\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\nfunction _runAsync() {\n  _runAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(encode, prerun, postrun) {\n    var _this3 = this;\n    var clear;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!this._running) {\n              _context5.next = 5;\n              break;\n            }\n            _context5.next = 3;\n            return this._running;\n          case 3:\n            _context5.next = 0;\n            break;\n          case 5:\n            // run dataflow, manage running promise\n            clear = function clear() {\n              return _this3._running = null;\n            };\n            (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n            return _context5.abrupt(\"return\", this._running);\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _runAsync.apply(this, arguments);\n}\nfunction run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n}\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\n\nfunction runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try {\n      callback(this);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n}\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\n\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\n\nfunction enqueue(op, force) {\n  var q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n  if (q || force) {\n    op.qrank = op.rank;\n    this._heap.push(op);\n  }\n}\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\n\nfunction getPulse(op, encode) {\n  var s = op.source,\n    stamp = this._clock;\n  return s && isArray(s) ? new MultiPulse(this, stamp, s.map(function (_) {\n    return _.pulse;\n  }), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n  p = p.fork();\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n  return p;\n}\nvar NO_OPT = {\n  skip: false,\n  force: false\n};\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction touch(op, options) {\n  var opt = options || NO_OPT;\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n  if (opt.skip) op.skip(true);\n  return this;\n}\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction update(op, value, options) {\n  var opt = options || NO_OPT;\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n  return this;\n}\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n    t = op.pulse && op.pulse.source || [];\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n  return this;\n}\nfunction Heap(cmp) {\n  var nodes = [];\n  return {\n    clear: function clear() {\n      return nodes = [];\n    },\n    size: function size() {\n      return nodes.length;\n    },\n    peek: function peek() {\n      return nodes[0];\n    },\n    push: function push(x) {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: function pop() {\n      var last = nodes.pop();\n      var item;\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n      return item;\n    }\n  };\n}\nfunction siftdown(array, start, idx, cmp) {\n  var parent, pidx;\n  var item = array[idx];\n  while (idx > start) {\n    pidx = idx - 1 >> 1;\n    parent = array[pidx];\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n    break;\n  }\n  return array[idx] = item;\n}\nfunction siftup(array, idx, cmp) {\n  var start = idx,\n    end = array.length,\n    item = array[idx];\n  var cidx = (idx << 1) + 1,\n    ridx;\n  while (cidx < end) {\n    ridx = cidx + 1;\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\n\nfunction Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n  this._clock = 0;\n  this._rank = 0;\n  this._locale = defaultLocale();\n  try {\n    this._loader = loader();\n  } catch (e) {// do nothing if loader module is unavailable\n  }\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n  this._heap = Heap(function (a, b) {\n    return a.qrank - b.qrank;\n  });\n  this._postrun = [];\n}\nfunction logMethod(method) {\n  return function () {\n    return this._log[method].apply(this, arguments);\n  };\n}\nDataflow.prototype = {\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  stamp: function stamp() {\n    return this._clock;\n  },\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  loader: function loader(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  },\n  /**\n   * Gets or sets the locale instance to use for formatting and parsing\n   * string values. The locale object should be provided by the\n   * vega-format library, and include methods such as format, timeFormat,\n   * utcFormat, timeParse, and utcParse.\n   * @param {object} _ - The locale instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current locale instance. Otherwise returns this Dataflow instance.\n   */\n  locale: function locale(_) {\n    if (arguments.length) {\n      this._locale = _;\n      return this;\n    } else {\n      return this._locale;\n    }\n  },\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  logger: function logger(_logger) {\n    if (arguments.length) {\n      this._log = _logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  },\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  error: logMethod('error'),\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  warn: logMethod('warn'),\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  info: logMethod('info'),\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  debug: logMethod('debug'),\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  logLevel: logMethod('level'),\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  cleanThreshold: 1e4,\n  // OPERATOR REGISTRATION\n  add: add,\n  connect: connect,\n  rank: rank,\n  rerank: rerank,\n  // OPERATOR UPDATES\n  pulse: pulse,\n  touch: touch,\n  update: update,\n  changeset: changeset,\n  // DATA LOADING\n  ingest: ingest,\n  parse: parse,\n  preload: preload,\n  request: request,\n  // EVENT HANDLING\n  events: events,\n  on: on,\n  // PULSE PROPAGATION\n  evaluate: evaluate,\n  run: run,\n  runAsync: runAsync,\n  runAfter: runAfter,\n  _enqueue: enqueue,\n  _getPulse: getPulse\n};\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\n\nfunction Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\ninherits(Transform, Operator, {\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run: function run(pulse) {\n    var _this2 = this;\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    var rv;\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    rv = rv || pulse;\n    if (rv.then) {\n      rv = rv.then(function (_) {\n        return _this2.pulse = _;\n      });\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n    return rv;\n  },\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n  */\n  evaluate: function evaluate(pulse) {\n    var params = this.marshall(pulse.stamp),\n      out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  },\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  transform: function transform() {}\n});\nvar transforms = {};\nfunction definition(type) {\n  var t = transform(type);\n  return t && t.Definition || null;\n}\nfunction transform(type) {\n  type = type && type.toLowerCase();\n  return hasOwnProperty(transforms, type) ? transforms[type] : null;\n}\nexport { Dataflow, EventStream, MultiPulse, Operator, Parameters, Pulse, Transform, UniqueList, asyncCallback, changeset, definition, derive, ingest$1 as ingest, isChangeSet, isTuple, rederive, replace, stableCompare, transform, transforms, tupleid };","map":{"version":3,"names":["identity","array","isFunction","constant","isArray","id","error","truthy","debounce","extend","visitArray","inherits","logger","Error","hasOwnProperty","read","responseType","loader","defaultLocale","UniqueList","idFunc","$","list","ids","add","_","push","remove","idx","indexOf","splice","asyncCallback","df","callback","TUPLE_ID_KEY","Symbol","TUPLE_ID","isTuple","t","tupleid","setid","ingest$1","datum","Object","data","derive","rederive","d","k","replace","stableCompare","cmp","f","a","b","isChangeSet","v","constructor","changeset","rem","mod","remp","modp","clean","reflow","insert","n","length","i","modify","field","value","m","filter","tuple","encode","set","pulse","tuples","cur","out","forEach","modifies","slice","CACHE","Parameters","defineProperty","writable","prototype","name","index","force","o","modified","arguments","clear","OP_ID","PULSE","NO_PARAMS","SKIP$1","MODIFIED","Operator","init","update","params","react","stamp","rank","qrank","flags","_update","parameters","flag","bit","state","targets","_targets","skip","initonly","argval","_argval","argops","_argops","deps","op","source","Array","marshall","item","detach","evaluate","call","StopPropagation","run","rv","shift","connect","touch","target","sources","targetRank","rerank","STREAM_ID","EventStream","apply","receive","_filter","_apply","stream","consume","_consume","evt","val","trg","preventDefault","stopPropagation","s","merge","throttle","pause","now","Date","delay","e","dataflow","between","active","events","type","send","document","querySelectorAll","addEventListener","parse","format","locale","timeParse","utcParse","ingest","request","url","status","load","context","response","err","warn","preload","pending","_pending","loadPending","requests","res","done","accept","Promise","SKIP","on","options","fn","onOperator","onStream","opt","func","undefined","updater","_rank","queue","pop","ADD","REM","MOD","ADD_REM","ADD_MOD","ALL","REFLOW","SOURCE","NO_SOURCE","NO_FIELDS","Pulse","fields","materialize","map","visit","addFilter","fork","clone","p","addAll","reuse","src","addF","remF","modF","srcF","cleans","runAfter","changed","len","hash","nomod","some","visitor","sum","MultiPulse","pulses","c","changes","prerun","postrun","async","_pulse","reentrant","_touched","debug","_clock","_enqueue","count","_heap","size","next","_getPulse","then","_input","_postrun","pr","sort","priority","all","cb","runAsync","_running","enqueue","q","getPulse","singlePulse","NO_OPT","Heap","nodes","peek","x","siftdown","last","siftup","start","parent","pidx","end","cidx","ridx","Dataflow","logLevel","_locale","_loader","logMethod","method","_log","info","cleanThreshold","Transform","transform","transforms","definition","Definition","toLowerCase"],"sources":["/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/vega-dataflow/build/vega-dataflow.module.js"],"sourcesContent":["import { identity, array, isFunction, constant, isArray, id, error, truthy, debounce, extend, visitArray, inherits, logger, Error, hasOwnProperty } from 'vega-util';\nimport { read, responseType, loader } from 'vega-loader';\nimport { defaultLocale } from 'vega-format';\n\nfunction UniqueList(idFunc) {\n  const $ = idFunc || identity,\n        list = [],\n        ids = {};\n\n  list.add = _ => {\n    const id = $(_);\n\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n\n    return list;\n  };\n\n  list.remove = _ => {\n    const id = $(_);\n\n    if (ids[id]) {\n      ids[id] = 0;\n      const idx = list.indexOf(_);\n      if (idx >= 0) list.splice(idx, 1);\n    }\n\n    return list;\n  };\n\n  return list;\n}\n\n/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nasync function asyncCallback (df, callback) {\n  try {\n    await callback(df);\n  } catch (err) {\n    df.error(err);\n  }\n}\n\nconst TUPLE_ID_KEY = Symbol('vega_id');\nlet TUPLE_ID = 1;\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\n\nfunction isTuple(t) {\n  return !!(t && tupleid(t));\n}\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\n\nfunction tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\n\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\n\n\nfunction ingest$1(datum) {\n  const t = datum === Object(datum) ? datum : {\n    data: datum\n  };\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\n\nfunction derive(t) {\n  return rederive(t, ingest$1({}));\n}\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\n\nfunction rederive(t, d) {\n  for (const k in t) d[k] = t[k];\n\n  return d;\n}\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\n\nfunction replace(t, d) {\n  return setid(d, tupleid(t));\n}\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\n\nfunction stableCompare(cmp, f) {\n  return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);\n}\n\nfunction isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\nfunction changeset() {\n  const add = [],\n        // insert tuples\n  rem = [],\n        // remove tuples\n  mod = [],\n        // modify tuples\n  remp = [],\n        // remove by predicate\n  modp = []; // modify by predicate\n\n  let clean = null,\n      reflow = false;\n  return {\n    constructor: changeset,\n\n    insert(t) {\n      const d = array(t),\n            n = d.length;\n\n      for (let i = 0; i < n; ++i) add.push(d[i]);\n\n      return this;\n    },\n\n    remove(t) {\n      const a = isFunction(t) ? remp : rem,\n            d = array(t),\n            n = d.length;\n\n      for (let i = 0; i < n; ++i) a.push(d[i]);\n\n      return this;\n    },\n\n    modify(t, field, value) {\n      const m = {\n        field: field,\n        value: constant(value)\n      };\n\n      if (isFunction(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n\n      return this;\n    },\n\n    encode(t, set) {\n      if (isFunction(t)) modp.push({\n        filter: t,\n        field: set\n      });else mod.push({\n        tuple: t,\n        field: set\n      });\n      return this;\n    },\n\n    clean(value) {\n      clean = value;\n      return this;\n    },\n\n    reflow() {\n      reflow = true;\n      return this;\n    },\n\n    pulse(pulse, tuples) {\n      const cur = {},\n            out = {};\n      let i, n, m, f, t, id; // build lookup table of current tuples\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        cur[tupleid(tuples[i])] = 1;\n      } // process individual tuples to remove\n\n\n      for (i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        cur[tupleid(t)] = -1;\n      } // process predicate-based removals\n\n\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(t => {\n          if (f(t)) cur[tupleid(t)] = -1;\n        });\n      } // process all add tuples\n\n\n      for (i = 0, n = add.length; i < n; ++i) {\n        t = add[i];\n        id = tupleid(t);\n\n        if (cur[id]) {\n          // tuple already resides in dataset\n          // if flagged for both add and remove, cancel\n          cur[id] = 1;\n        } else {\n          // tuple does not reside in dataset, add\n          pulse.add.push(ingest$1(add[i]));\n        }\n      } // populate pulse rem list\n\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        t = tuples[i];\n        if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n      } // modify helper method\n\n\n      function modify(t, f, v) {\n        if (v) {\n          t[f] = v(t);\n        } else {\n          pulse.encode = f;\n        }\n\n        if (!reflow) out[tupleid(t)] = t;\n      } // process individual tuples to modify\n\n\n      for (i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        t = m.tuple;\n        f = m.field;\n        id = cur[tupleid(t)];\n\n        if (id > 0) {\n          modify(t, f, m.value);\n          pulse.modifies(f);\n        }\n      } // process predicate-based modifications\n\n\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(t => {\n          if (f(t) && cur[tupleid(t)] > 0) {\n            modify(t, m.field, m.value);\n          }\n        });\n        pulse.modifies(m.field);\n      } // upon reflow request, populate mod with all non-removed tuples\n      // otherwise, populate mod with modified tuples only\n\n\n      if (reflow) {\n        pulse.mod = rem.length || remp.length ? tuples.filter(t => cur[tupleid(t)] > 0) : tuples.slice();\n      } else {\n        for (id in out) pulse.mod.push(out[id]);\n      } // set pulse garbage collection request\n\n\n      if (clean || clean == null && (rem.length || remp.length)) {\n        pulse.clean(true);\n      }\n\n      return pulse;\n    }\n\n  };\n}\n\nconst CACHE = '_:mod:_';\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\n\nfunction Parameters() {\n  Object.defineProperty(this, CACHE, {\n    writable: true,\n    value: {}\n  });\n}\nParameters.prototype = {\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  set(name, index, value, force) {\n    const o = this,\n          v = o[name],\n          mod = o[CACHE];\n\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n\n    return o;\n  },\n\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  modified(name, index) {\n    const mod = this[CACHE];\n\n    if (!arguments.length) {\n      for (const k in mod) {\n        if (mod[k]) return true;\n      }\n\n      return false;\n    } else if (isArray(name)) {\n      for (let k = 0; k < name.length; ++k) {\n        if (mod[name[k]]) return true;\n      }\n\n      return false;\n    }\n\n    return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n  },\n\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  clear() {\n    this[CACHE] = {};\n    return this;\n  }\n\n};\n\nlet OP_ID = 0;\nconst PULSE = 'pulse',\n      NO_PARAMS = new Parameters(); // Boolean Flags\n\nconst SKIP$1 = 1,\n      MODIFIED = 2;\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\n\nfunction Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n\n  if (update) {\n    this._update = update;\n  }\n\n  if (params) this.parameters(params, react);\n}\n\nfunction flag(bit) {\n  return function (state) {\n    const f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? f | bit : f & ~bit;\n    return this;\n  };\n}\n\nOperator.prototype = {\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  set(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  skip: flag(SKIP$1),\n\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  modified: flag(MODIFIED),\n\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initiatal evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  parameters(params, react, initonly) {\n    react = react !== false;\n    const argval = this._argval = this._argval || new Parameters(),\n          argops = this._argops = this._argops || [],\n          deps = [];\n    let name, value, n, i;\n\n    const add = (name, index, value) => {\n      if (value instanceof Operator) {\n        if (value !== this) {\n          if (react) value.targets().add(this);\n          deps.push(value);\n        }\n\n        argops.push({\n          op: value,\n          name: name,\n          index: index\n        });\n      } else {\n        argval.set(name, index, value);\n      }\n    };\n\n    for (name in params) {\n      value = params[name];\n\n      if (name === PULSE) {\n        array(value).forEach(op => {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== this) {\n            op.targets().add(this);\n            deps.push(op);\n          }\n        });\n        this.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n\n        for (i = 0; i < n; ++i) add(name, i, value[i]);\n      } else {\n        add(name, -1, value);\n      }\n    }\n\n    this.marshall().clear(); // initialize values\n\n    if (initonly) argops.initonly = true;\n    return deps;\n  },\n\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  marshall(stamp) {\n    const argval = this._argval || NO_PARAMS,\n          argops = this._argops;\n    let item, i, op, mod;\n\n    if (argops) {\n      const n = argops.length;\n\n      for (i = 0; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n\n      if (argops.initonly) {\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n\n        this._argops = null;\n        this._update = null;\n      }\n    }\n\n    return argval;\n  },\n\n  /**\n   * Detach this operator from the dataflow.\n   * Unregisters listeners on upstream dependencies.\n   */\n  detach() {\n    const argops = this._argops;\n    let i, n, item, op;\n\n    if (argops) {\n      for (i = 0, n = argops.length; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n\n        if (op._targets) {\n          op._targets.remove(this);\n        }\n      }\n    } // remove references to the source and pulse object,\n    // if present, to prevent memory leaks of old data.\n\n\n    this.pulse = null;\n    this.source = null;\n  },\n\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  evaluate(pulse) {\n    const update = this._update;\n\n    if (update) {\n      const params = this.marshall(pulse.stamp),\n            v = update.call(this, params, pulse);\n      params.clear();\n\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  },\n\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    let rv;\n\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n\n    return this.pulse = rv || pulse;\n  }\n\n};\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\n\nfunction add (init, update, params, react) {\n  let shift = 1,\n      op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n\n  if (shift) {\n    react = params;\n    params = update;\n  }\n\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n  return op;\n}\n\n/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\nfunction connect (target, sources) {\n  const targetRank = target.rank,\n        n = sources.length;\n\n  for (let i = 0; i < n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\n\nlet STREAM_ID = 0;\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\n\nfunction EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\n\nfunction stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\nEventStream.prototype = {\n  _filter: truthy,\n  _apply: identity,\n\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  consume(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  },\n\n  receive(evt) {\n    if (this._filter(evt)) {\n      const val = this.value = this._apply(evt),\n            trg = this._targets,\n            n = trg ? trg.length : 0;\n\n      for (let i = 0; i < n; ++i) trg[i].receive(val);\n\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  },\n\n  filter(filter) {\n    const s = stream(filter);\n    this.targets().add(s);\n    return s;\n  },\n\n  apply(apply) {\n    const s = stream(null, apply);\n    this.targets().add(s);\n    return s;\n  },\n\n  merge() {\n    const s = stream();\n    this.targets().add(s);\n\n    for (let i = 0, n = arguments.length; i < n; ++i) {\n      arguments[i].targets().add(s);\n    }\n\n    return s;\n  },\n\n  throttle(pause) {\n    let t = -1;\n    return this.filter(() => {\n      const now = Date.now();\n\n      if (now - t > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  },\n\n  debounce(delay) {\n    const s = stream();\n    this.targets().add(stream(null, null, debounce(delay, e => {\n      const df = e.dataflow;\n      s.receive(e);\n      if (df && df.run) df.run();\n    })));\n    return s;\n  },\n\n  between(a, b) {\n    let active = false;\n    a.targets().add(stream(null, null, () => active = true));\n    b.targets().add(stream(null, null, () => active = false));\n    return this.filter(() => active);\n  },\n\n  detach() {\n    // ensures compatibility with operators (#2753)\n    // remove references to other streams and filter functions that may\n    // be bound to subcontexts that need to be garbage collected.\n    this._filter = truthy;\n    this._targets = null;\n  }\n\n};\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\n\nfunction events (source, type, filter, apply) {\n  const df = this,\n        s = stream(filter, apply),\n        send = function (e) {\n    e.dataflow = df;\n\n    try {\n      s.receive(e);\n    } catch (error) {\n      df.error(error);\n    } finally {\n      df.run();\n    }\n  };\n\n  let sources;\n\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  const n = sources.length;\n\n  for (let i = 0; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n\nfunction parse(data, format) {\n  const locale = this.locale();\n  return read(data, format, locale.timeParse, locale.utcParse);\n}\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\n\nfunction ingest(target, data, format) {\n  data = this.parse(data, format);\n  return this.pulse(target, this.changeset().insert(data));\n}\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\n\nasync function request(url, format) {\n  const df = this;\n  let status = 0,\n      data;\n\n  try {\n    data = await df.loader().load(url, {\n      context: 'dataflow',\n      response: responseType(format && format.type)\n    });\n\n    try {\n      data = df.parse(data, format);\n    } catch (err) {\n      status = -2;\n      df.warn('Data ingestion failed', url, err);\n    }\n  } catch (err) {\n    status = -1;\n    df.warn('Loading failed', url, err);\n  }\n\n  return {\n    data,\n    status\n  };\n}\nasync function preload(target, url, format) {\n  const df = this,\n        pending = df._pending || loadPending(df);\n  pending.requests += 1;\n  const res = await df.request(url, format);\n  df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n  pending.done();\n  return res;\n}\n\nfunction loadPending(df) {\n  let accept;\n  const pending = new Promise(a => accept = a);\n  pending.requests = 0;\n\n  pending.done = () => {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n\n  return df._pending = pending;\n}\n\nconst SKIP = {\n  skip: true\n};\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\n\nfunction on (source, target, update, params, options) {\n  const fn = source instanceof Operator ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n}\n\nfunction onStream(df, stream, target, update, params, options) {\n  const opt = extend({}, options, SKIP);\n  let func, op;\n  if (!isFunction(target)) target = constant(target);\n\n  if (update === undefined) {\n    func = e => df.touch(target(e));\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n\n    func = e => {\n      op.evaluate(e);\n      const t = target(e),\n            v = op.value;\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = e => df.update(target(e), update, opt);\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  if (update === undefined) {\n    source.targets().add(target);\n  } else {\n    const opt = options || {},\n          op = new Operator(null, updater(target, update), params, false);\n    op.modified(opt.force);\n    op.rank = source.rank; // immediately follow source\n\n    source.targets().add(op); // add dependency\n\n    if (target) {\n      op.skip(true); // skip first invocation\n\n      op.value = target.value; // initialize value\n\n      op.targets().add(target); // chain dependencies\n\n      df.connect(target, [op]); // rerank as needed, #1672\n    }\n  }\n}\n\nfunction updater(target, update) {\n  update = isFunction(update) ? update : constant(update);\n  return target ? function (_, pulse) {\n    const value = update(_, pulse);\n\n    if (!target.skip()) {\n      target.skip(value !== this.value).value = value;\n    }\n\n    return value;\n  } : update;\n}\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\n\nfunction rank(op) {\n  op.rank = ++this._rank;\n}\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\n\nfunction rerank(op) {\n  const queue = [op];\n  let cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n\n    if (list = cur._targets) {\n      for (i = list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\n\nconst StopPropagation = {}; // Pulse visit type flags\n\nconst ADD = 1 << 0,\n      REM = 1 << 1,\n      MOD = 1 << 2,\n      ADD_REM = ADD | REM,\n      ADD_MOD = ADD | MOD,\n      ALL = ADD | REM | MOD,\n      REFLOW = 1 << 3,\n      SOURCE = 1 << 4,\n      NO_SOURCE = 1 << 5,\n      NO_FIELDS = 1 << 6;\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\n\nfunction Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\n\nfunction materialize(data, filter) {\n  const out = [];\n  visitArray(data, filter, _ => out.push(_));\n  return out;\n}\n\nfunction filter(pulse, flags) {\n  const map = {};\n  pulse.visit(flags, t => {\n    map[tupleid(t)] = 1;\n  });\n  return t => map[tupleid(t)] ? null : t;\n}\n\nfunction addFilter(a, b) {\n  return a ? (t, i) => a(t, i) && b(t, i) : b;\n}\n\nPulse.prototype = {\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  StopPropagation,\n\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  ADD,\n\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  REM,\n\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  MOD,\n\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  ADD_REM,\n\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  ADD_MOD,\n\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  ALL,\n\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  REFLOW,\n\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  SOURCE,\n\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_SOURCE,\n\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_FIELDS,\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  fork(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  },\n\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  clone() {\n    const p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  },\n\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  addAll() {\n    let p = this;\n    const reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n    || !p.rem.length && p.source.length === p.add.length;\n\n    if (reuse) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      p.rem = []; // new operators can ignore rem #2769\n\n      return p;\n    }\n  },\n\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  init(src, flags) {\n    const p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n      if (src.cleans) p.cleans = src.cleans;\n    }\n\n    return p;\n  },\n\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  runAfter(func) {\n    this.dataflow.runAfter(func);\n  },\n\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  changed(flags) {\n    const f = flags || ALL;\n    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;\n  },\n\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  reflow(fork) {\n    if (fork) return this.fork(ALL).reflow();\n    const len = this.add.length,\n          src = this.source && this.source.length;\n\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n\n    return this;\n  },\n\n  /**\n   * Get/set metadata to pulse requesting garbage collection\n   * to reclaim currently unused resources.\n   */\n  clean(value) {\n    if (arguments.length) {\n      this.cleans = !!value;\n      return this;\n    } else {\n      return this.cleans;\n    }\n  },\n\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  modifies(_) {\n    const hash = this.fields || (this.fields = {});\n\n    if (isArray(_)) {\n      _.forEach(f => hash[f] = true);\n    } else {\n      hash[_] = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  modified(_, nomod) {\n    const fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(f => fields[f]) : fields[_];\n  },\n\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  filter(flags, filter) {\n    const p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, filter);\n    if (flags & REM) p.remF = addFilter(p.remF, filter);\n    if (flags & MOD) p.modF = addFilter(p.modF, filter);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n    return p;\n  },\n\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  materialize(flags) {\n    flags = flags || ALL;\n    const p = this;\n\n    if (flags & ADD && p.addF) {\n      p.add = materialize(p.add, p.addF);\n      p.addF = null;\n    }\n\n    if (flags & REM && p.remF) {\n      p.rem = materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n\n    if (flags & MOD && p.modF) {\n      p.mod = materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n\n    if (flags & SOURCE && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n\n    return p;\n  },\n\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  visit(flags, visitor) {\n    const p = this,\n          v = visitor;\n\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n    const src = p.source;\n\n    if (flags & REFLOW && src) {\n      const sum = p.add.length + p.mod.length;\n\n      if (sum === src.length) ; else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n\n    return p;\n  }\n\n};\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\n\nfunction MultiPulse(dataflow, stamp, pulses, encode) {\n  const p = this,\n        n = pulses.length;\n  let c = 0;\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (let i = 0; i < n; ++i) {\n    const pulse = pulses[i];\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      const hash = p.fields || (p.fields = {});\n\n      for (const f in pulse.fields) {\n        hash[f] = 1;\n      }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\ninherits(MultiPulse, Pulse, {\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  fork(flags) {\n    const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n\n    if (flags !== undefined) {\n      if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));\n      if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));\n      if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));\n    }\n\n    return p;\n  },\n\n  changed(flags) {\n    return this.changes & flags;\n  },\n\n  modified(_) {\n    const p = this,\n          fields = p.fields;\n    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(f => fields[f]) : fields[_];\n  },\n\n  filter() {\n    error('MultiPulse does not support filtering.');\n  },\n\n  materialize() {\n    error('MultiPulse does not support materialization.');\n  },\n\n  visit(flags, visitor) {\n    const p = this,\n          pulses = p.pulses,\n          n = pulses.length;\n    let i = 0;\n\n    if (flags & p.SOURCE) {\n      for (; i < n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i < n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n\n    return p;\n  }\n\n});\n\n/* eslint-disable require-atomic-updates */\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nasync function evaluate(encode, prerun, postrun) {\n  const df = this,\n        async = []; // if the pulse value is set, this is a re-entrant call\n\n  if (df._pulse) return reentrant(df); // wait for pending datasets to load\n\n  if (df._pending) await df._pending; // invoke prerun function, if provided\n\n  if (prerun) await asyncCallback(df, prerun); // exit early if there are no updates\n\n  if (!df._touched.length) {\n    df.debug('Dataflow invoked, but nothing to do.');\n    return df;\n  } // increment timestamp clock\n\n\n  const stamp = ++df._clock; // set the current pulse\n\n  df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators\n\n  df._touched.forEach(op => df._enqueue(op, true));\n\n  df._touched = UniqueList(id);\n  let count = 0,\n      op,\n      next,\n      error;\n\n  try {\n    while (df._heap.size() > 0) {\n      // dequeue operator with highest priority\n      op = df._heap.pop(); // re-queue if rank changed\n\n      if (op.rank !== op.qrank) {\n        df._enqueue(op, true);\n\n        continue;\n      } // otherwise, evaluate the operator\n\n\n      next = op.run(df._getPulse(op, encode));\n\n      if (next.then) {\n        // await if operator returns a promise directly\n        next = await next;\n      } else if (next.async) {\n        // queue parallel asynchronous execution\n        async.push(next.async);\n        next = StopPropagation;\n      } // propagate evaluation, enqueue dependent operators\n\n\n      if (next !== StopPropagation) {\n        if (op._targets) op._targets.forEach(op => df._enqueue(op));\n      } // increment visit counter\n\n\n      ++count;\n    }\n  } catch (err) {\n    df._heap.clear();\n\n    error = err;\n  } // reset pulse map\n\n\n  df._input = {};\n  df._pulse = null;\n  df.debug(`Pulse ${stamp}: ${count} operators`);\n\n  if (error) {\n    df._postrun = [];\n    df.error(error);\n  } // invoke callbacks queued via runAfter\n\n\n  if (df._postrun.length) {\n    const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n\n    df._postrun = [];\n\n    for (let i = 0; i < pr.length; ++i) {\n      await asyncCallback(df, pr[i].callback);\n    }\n  } // invoke postrun function, if provided\n\n\n  if (postrun) await asyncCallback(df, postrun); // handle non-blocking asynchronous callbacks\n\n  if (async.length) {\n    Promise.all(async).then(cb => df.runAsync(null, () => {\n      cb.forEach(f => {\n        try {\n          f(df);\n        } catch (err) {\n          df.error(err);\n        }\n      });\n    }));\n  }\n\n  return df;\n}\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nasync function runAsync(encode, prerun, postrun) {\n  // await previously queued functions\n  while (this._running) await this._running; // run dataflow, manage running promise\n\n\n  const clear = () => this._running = null;\n\n  (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n  return this._running;\n}\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\n\nfunction run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n}\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\n\nfunction runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try {\n      callback(this);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n}\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\n\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\n\n\nfunction enqueue(op, force) {\n  const q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n\n  if (q || force) {\n    op.qrank = op.rank;\n\n    this._heap.push(op);\n  }\n}\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\n\nfunction getPulse(op, encode) {\n  const s = op.source,\n        stamp = this._clock;\n  return s && isArray(s) ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\n\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n\n  p = p.fork();\n\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n\n  return p;\n}\n\nconst NO_OPT = {\n  skip: false,\n  force: false\n};\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction touch(op, options) {\n  const opt = options || NO_OPT;\n\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n\n  if (opt.skip) op.skip(true);\n  return this;\n}\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction update(op, value, options) {\n  const opt = options || NO_OPT;\n\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n\n  return this;\n}\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n  const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n        t = op.pulse && op.pulse.source || [];\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n  return this;\n}\n\nfunction Heap(cmp) {\n  let nodes = [];\n  return {\n    clear: () => nodes = [],\n    size: () => nodes.length,\n    peek: () => nodes[0],\n    push: x => {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: () => {\n      const last = nodes.pop();\n      let item;\n\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  let parent, pidx;\n  const item = array[idx];\n\n  while (idx > start) {\n    pidx = idx - 1 >> 1;\n    parent = array[pidx];\n\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n\n    break;\n  }\n\n  return array[idx] = item;\n}\n\nfunction siftup(array, idx, cmp) {\n  const start = idx,\n        end = array.length,\n        item = array[idx];\n  let cidx = (idx << 1) + 1,\n      ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\n\nfunction Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n  this._clock = 0;\n  this._rank = 0;\n  this._locale = defaultLocale();\n\n  try {\n    this._loader = loader();\n  } catch (e) {// do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n  this._heap = Heap((a, b) => a.qrank - b.qrank);\n  this._postrun = [];\n}\n\nfunction logMethod(method) {\n  return function () {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\nDataflow.prototype = {\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  stamp() {\n    return this._clock;\n  },\n\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  loader(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  },\n\n  /**\n   * Gets or sets the locale instance to use for formatting and parsing\n   * string values. The locale object should be provided by the\n   * vega-format library, and include methods such as format, timeFormat,\n   * utcFormat, timeParse, and utcParse.\n   * @param {object} _ - The locale instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current locale instance. Otherwise returns this Dataflow instance.\n   */\n  locale(_) {\n    if (arguments.length) {\n      this._locale = _;\n      return this;\n    } else {\n      return this._locale;\n    }\n  },\n\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  logger(logger) {\n    if (arguments.length) {\n      this._log = logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  },\n\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  error: logMethod('error'),\n\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  warn: logMethod('warn'),\n\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  info: logMethod('info'),\n\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  debug: logMethod('debug'),\n\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  logLevel: logMethod('level'),\n\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  cleanThreshold: 1e4,\n  // OPERATOR REGISTRATION\n  add,\n  connect,\n  rank,\n  rerank,\n  // OPERATOR UPDATES\n  pulse,\n  touch,\n  update,\n  changeset,\n  // DATA LOADING\n  ingest,\n  parse,\n  preload,\n  request,\n  // EVENT HANDLING\n  events,\n  on,\n  // PULSE PROPAGATION\n  evaluate,\n  run,\n  runAsync,\n  runAfter,\n  _enqueue: enqueue,\n  _getPulse: getPulse\n};\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\n\nfunction Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\ninherits(Transform, Operator, {\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    let rv;\n\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n\n    rv = rv || pulse;\n\n    if (rv.then) {\n      rv = rv.then(_ => this.pulse = _);\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n\n    return rv;\n  },\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n  */\n  evaluate(pulse) {\n    const params = this.marshall(pulse.stamp),\n          out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  },\n\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  transform() {}\n\n});\n\nconst transforms = {};\nfunction definition(type) {\n  const t = transform(type);\n  return t && t.Definition || null;\n}\nfunction transform(type) {\n  type = type && type.toLowerCase();\n  return hasOwnProperty(transforms, type) ? transforms[type] : null;\n}\n\nexport { Dataflow, EventStream, MultiPulse, Operator, Parameters, Pulse, Transform, UniqueList, asyncCallback, changeset, definition, derive, ingest$1 as ingest, isChangeSet, isTuple, rederive, replace, stableCompare, transform, transforms, tupleid };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}