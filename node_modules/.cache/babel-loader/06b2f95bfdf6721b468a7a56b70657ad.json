{"ast":null,"code":"import _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { normalizeEncoding } from '../encoding';\nimport * as log from '../log';\nimport { CompositeMarkNormalizer } from './base';\nimport { makeCompositeAggregatePartFactory } from './common';\nimport { errorBarParams } from './errorbar';\nexport var ERRORBAND = 'errorband';\nexport var ERRORBAND_PARTS = ['band', 'borders'];\nexport var errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\nexport function normalizeErrorBand(spec, _ref) {\n  var config = _ref.config;\n  // Need to initEncoding first so we can infer type\n  spec = Object.assign(Object.assign({}, spec), {\n    encoding: normalizeEncoding(spec.encoding, config)\n  });\n  var _errorBarParams = errorBarParams(spec, ERRORBAND, config),\n    transform = _errorBarParams.transform,\n    continuousAxisChannelDef = _errorBarParams.continuousAxisChannelDef,\n    continuousAxis = _errorBarParams.continuousAxis,\n    encodingWithoutContinuousAxis = _errorBarParams.encodingWithoutContinuousAxis,\n    markDef = _errorBarParams.markDef,\n    outerSpec = _errorBarParams.outerSpec,\n    tooltipEncoding = _errorBarParams.tooltipEncoding;\n  var errorBandDef = markDef;\n  var makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n  var is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n  var bandMark = {\n    type: is2D ? 'area' : 'rect'\n  };\n  var bordersMark = {\n    type: is2D ? 'line' : 'rule'\n  };\n  var interpolate = Object.assign(Object.assign({}, errorBandDef.interpolate ? {\n    interpolate: errorBandDef.interpolate\n  } : {}), errorBandDef.tension && errorBandDef.interpolate ? {\n    tension: errorBandDef.tension\n  } : {});\n  if (is2D) {\n    bandMark = Object.assign(Object.assign(Object.assign({}, bandMark), interpolate), {\n      ariaRoleDescription: 'errorband'\n    });\n    bordersMark = Object.assign(Object.assign(Object.assign({}, bordersMark), interpolate), {\n      aria: false\n    });\n  } else if (errorBandDef.interpolate) {\n    log.warn(log.message.errorBand1DNotSupport('interpolate'));\n  } else if (errorBandDef.tension) {\n    log.warn(log.message.errorBand1DNotSupport('tension'));\n  }\n  return Object.assign(Object.assign({}, outerSpec), {\n    transform: transform,\n    layer: [].concat(_toConsumableArray(makeErrorBandPart({\n      partName: 'band',\n      mark: bandMark,\n      positionPrefix: 'lower',\n      endPositionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    })), _toConsumableArray(makeErrorBandPart({\n      partName: 'borders',\n      mark: bordersMark,\n      positionPrefix: 'lower',\n      extraEncoding: tooltipEncoding\n    })), _toConsumableArray(makeErrorBandPart({\n      partName: 'borders',\n      mark: bordersMark,\n      positionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    })))\n  });\n}","map":{"version":3,"sources":["../../../src/compositemark/errorband.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { normalizeEncoding } from '../encoding';\nimport * as log from '../log';\nimport { CompositeMarkNormalizer } from './base';\nimport { makeCompositeAggregatePartFactory } from './common';\nimport { errorBarParams } from './errorbar';\nexport const ERRORBAND = 'errorband';\nexport const ERRORBAND_PARTS = ['band', 'borders'];\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\nexport function normalizeErrorBand(spec, { config }) {\n    // Need to initEncoding first so we can infer type\n    spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });\n    const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);\n    const errorBandDef = markDef;\n    const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n    const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n    let bandMark = { type: is2D ? 'area' : 'rect' };\n    let bordersMark = { type: is2D ? 'line' : 'rule' };\n    const interpolate = Object.assign(Object.assign({}, (errorBandDef.interpolate ? { interpolate: errorBandDef.interpolate } : {})), (errorBandDef.tension && errorBandDef.interpolate ? { tension: errorBandDef.tension } : {}));\n    if (is2D) {\n        bandMark = Object.assign(Object.assign(Object.assign({}, bandMark), interpolate), { ariaRoleDescription: 'errorband' });\n        bordersMark = Object.assign(Object.assign(Object.assign({}, bordersMark), interpolate), { aria: false });\n    }\n    else if (errorBandDef.interpolate) {\n        log.warn(log.message.errorBand1DNotSupport('interpolate'));\n    }\n    else if (errorBandDef.tension) {\n        log.warn(log.message.errorBand1DNotSupport('tension'));\n    }\n    return Object.assign(Object.assign({}, outerSpec), { transform, layer: [\n            ...makeErrorBandPart({\n                partName: 'band',\n                mark: bandMark,\n                positionPrefix: 'lower',\n                endPositionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBandPart({\n                partName: 'borders',\n                mark: bordersMark,\n                positionPrefix: 'lower',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBandPart({\n                partName: 'borders',\n                mark: bordersMark,\n                positionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            })\n        ] });\n}\n//# sourceMappingURL=errorband.js.map"]},"metadata":{},"sourceType":"module"}