{"ast":null,"code":"import { TUPLE, unitName } from '.';\nexport var TOGGLE = '_toggle';\nvar toggle = {\n  defined: function defined(selCmpt) {\n    return selCmpt.type === 'point' && !!selCmpt.toggle;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    return _signals.concat({\n      name: selCmpt.name + TOGGLE,\n      value: false,\n      on: [{\n        events: selCmpt.events,\n        update: selCmpt.toggle\n      }]\n    });\n  },\n  modifyExpr: function modifyExpr(model, selCmpt) {\n    var tpl = selCmpt.name + TUPLE;\n    var signal = selCmpt.name + TOGGLE;\n    return \"\".concat(signal, \" ? null : \").concat(tpl, \", \") + (selCmpt.resolve === 'global' ? \"\".concat(signal, \" ? null : true, \") : \"\".concat(signal, \" ? null : {unit: \").concat(unitName(model), \"}, \")) + \"\".concat(signal, \" ? \").concat(tpl, \" : null\");\n  }\n};\nexport default toggle;","map":{"version":3,"sources":["../../../../src/compile/selection/toggle.ts"],"names":[],"mappings":"AAAA,SAAQ,KAAK,EAAE,QAAQ,QAAO,GAAG;AAGjC,OAAO,IAAM,MAAM,GAAG,SAAS;AAE/B,IAAM,MAAM,GAA+B;EACzC,OAAO,EAAE,iBAAA,OAAO,EAAG;IACjB,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM;EACrD,CAAC;EAED,OAAO,EAAE,iBAAC,KAAK,EAAE,OAAO,EAAE,QAAO,EAAI;IACnC,OAAO,QAAO,CAAC,MAAM,CAAC;MACpB,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,MAAM;MAC3B,KAAK,EAAE,KAAK;MACZ,EAAE,EAAE,CAAC;QAAC,MAAM,EAAE,OAAO,CAAC,MAAM;QAAE,MAAM,EAAE,OAAO,CAAC;MAAM,CAAC;KACtD,CAAC;EACJ,CAAC;EAED,UAAU,EAAE,oBAAC,KAAK,EAAE,OAAO,EAAI;IAC7B,IAAM,GAAG,GAAG,OAAO,CAAC,IAAI,GAAG,KAAK;IAChC,IAAM,MAAM,GAAG,OAAO,CAAC,IAAI,GAAG,MAAM;IAEpC,OACE,UAAG,MAAM,uBAAa,GAAG,WACxB,OAAO,CAAC,OAAO,KAAK,QAAQ,aAAM,MAAM,kCAAwB,MAAM,8BAAoB,QAAQ,CAAC,KAAK,CAAC,QAAK,CAAC,aAC7G,MAAM,gBAAM,GAAG,YAAS;EAE/B;CACD;AAED,eAAe,MAAM","sourceRoot":"","sourcesContent":["import { TUPLE, unitName } from '.';\nexport const TOGGLE = '_toggle';\nconst toggle = {\n    defined: selCmpt => {\n        return selCmpt.type === 'point' && !!selCmpt.toggle;\n    },\n    signals: (model, selCmpt, signals) => {\n        return signals.concat({\n            name: selCmpt.name + TOGGLE,\n            value: false,\n            on: [{ events: selCmpt.events, update: selCmpt.toggle }]\n        });\n    },\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        const signal = selCmpt.name + TOGGLE;\n        return (`${signal} ? null : ${tpl}, ` +\n            (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +\n            `${signal} ? ${tpl} : null`);\n    }\n};\nexport default toggle;\n//# sourceMappingURL=toggle.js.map"]},"metadata":{},"sourceType":"module"}