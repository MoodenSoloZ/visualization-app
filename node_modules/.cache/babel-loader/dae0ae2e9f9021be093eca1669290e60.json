{"ast":null,"code":"import { keys } from './util';\n/**\n * Data type based on level of measurement\n */\nexport var Type = {\n  quantitative: 'quantitative',\n  ordinal: 'ordinal',\n  temporal: 'temporal',\n  nominal: 'nominal',\n  geojson: 'geojson'\n};\nexport function isType(t) {\n  return t in Type;\n}\nexport function isContinuous(type) {\n  return type === 'quantitative' || type === 'temporal';\n}\nexport function isDiscrete(type) {\n  return type === 'ordinal' || type === 'nominal';\n}\nexport var QUANTITATIVE = Type.quantitative;\nexport var ORDINAL = Type.ordinal;\nexport var TEMPORAL = Type.temporal;\nexport var NOMINAL = Type.nominal;\nexport var GEOJSON = Type.geojson;\nexport var TYPES = keys(Type);\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n  if (type) {\n    type = type.toLowerCase();\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n      case GEOJSON:\n        return 'geojson';\n    }\n  }\n  // If we get invalid input, return undefined type.\n  return undefined;\n}","map":{"version":3,"sources":["../../src/type.ts"],"names":[],"mappings":"AAAA,SAAQ,IAAI,QAAO,QAAQ;AAE3B;;AAEG;AACH,OAAO,IAAM,IAAI,GAAG;EAClB,YAAY,EAAE,cAAc;EAC5B,OAAO,EAAE,SAAS;EAClB,QAAQ,EAAE,UAAU;EACpB,OAAO,EAAE,SAAS;EAClB,OAAO,EAAE;CACD;AAIV,OAAM,SAAU,MAAM,CAAC,CAAM,EAAA;EAC3B,OAAO,CAAC,IAAI,IAAI;AAClB;AAEA,OAAM,SAAU,YAAY,CAAC,IAAU,EAAA;EACrC,OAAO,IAAI,KAAK,cAAc,IAAI,IAAI,KAAK,UAAU;AACvD;AACA,OAAM,SAAU,UAAU,CAAC,IAAU,EAAA;EACnC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS;AACjD;AAEA,OAAO,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY;AAC7C,OAAO,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO;AACnC,OAAO,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ;AACrC,OAAO,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO;AAEnC,OAAO,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO;AAInC,OAAO,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAE/B;;;;AAIG;AACH,OAAM,SAAU,WAAW,CAAC,IAAmB,EAAA;EAC7C,IAAI,IAAI,EAAE;IACR,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;IACzB,QAAQ,IAAI;MACV,KAAK,GAAG;MACR,KAAK,YAAY;QACf,OAAO,cAAc;MACvB,KAAK,GAAG;MACR,KAAK,QAAQ;QACX,OAAO,UAAU;MACnB,KAAK,GAAG;MACR,KAAK,OAAO;QACV,OAAO,SAAS;MAClB,KAAK,GAAG;MACR,KAAK,OAAO;QACV,OAAO,SAAS;MAClB,KAAK,OAAO;QACV,OAAO,SAAS;IAAC;EAEtB;EACD;EACA,OAAO,SAAS;AAClB","sourceRoot":"","sourcesContent":["import { keys } from './util';\n/**\n * Data type based on level of measurement\n */\nexport const Type = {\n    quantitative: 'quantitative',\n    ordinal: 'ordinal',\n    temporal: 'temporal',\n    nominal: 'nominal',\n    geojson: 'geojson'\n};\nexport function isType(t) {\n    return t in Type;\n}\nexport function isContinuous(type) {\n    return type === 'quantitative' || type === 'temporal';\n}\nexport function isDiscrete(type) {\n    return type === 'ordinal' || type === 'nominal';\n}\nexport const QUANTITATIVE = Type.quantitative;\nexport const ORDINAL = Type.ordinal;\nexport const TEMPORAL = Type.temporal;\nexport const NOMINAL = Type.nominal;\nexport const GEOJSON = Type.geojson;\nexport const TYPES = keys(Type);\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n    if (type) {\n        type = type.toLowerCase();\n        switch (type) {\n            case 'q':\n            case QUANTITATIVE:\n                return 'quantitative';\n            case 't':\n            case TEMPORAL:\n                return 'temporal';\n            case 'o':\n            case ORDINAL:\n                return 'ordinal';\n            case 'n':\n            case NOMINAL:\n                return 'nominal';\n            case GEOJSON:\n                return 'geojson';\n        }\n    }\n    // If we get invalid input, return undefined type.\n    return undefined;\n}\n//# sourceMappingURL=type.js.map"]},"metadata":{},"sourceType":"module"}