{"ast":null,"code":"import { getSecondaryRangeChannel } from '../../channel';\nimport { channelDefType, getFieldOrDatumDef, isFieldDef, isPositionFieldOrDatumDef } from '../../channeldef';\nimport { formatCustomType, isCustomFormatType } from '../format';\nexport function labels(model, channel, specifiedLabelsSpec) {\n  var _a;\n  var encoding = model.encoding,\n    config = model.config;\n  var fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n  var axis = model.axis(channel) || {};\n  var format = axis.format,\n    formatType = axis.formatType;\n  if (isCustomFormatType(formatType)) {\n    return Object.assign({\n      text: formatCustomType({\n        fieldOrDatumDef: fieldOrDatumDef,\n        field: 'datum.value',\n        format: format,\n        formatType: formatType,\n        config: config\n      })\n    }, specifiedLabelsSpec);\n  } else if (format === undefined && formatType === undefined && config.customFormatTypes) {\n    if (channelDefType(fieldOrDatumDef) === 'quantitative') {\n      if (isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === 'normalize' && config.normalizedNumberFormatType) {\n        return Object.assign({\n          text: formatCustomType({\n            fieldOrDatumDef: fieldOrDatumDef,\n            field: 'datum.value',\n            format: config.normalizedNumberFormat,\n            formatType: config.normalizedNumberFormatType,\n            config: config\n          })\n        }, specifiedLabelsSpec);\n      } else if (config.numberFormatType) {\n        return Object.assign({\n          text: formatCustomType({\n            fieldOrDatumDef: fieldOrDatumDef,\n            field: 'datum.value',\n            format: config.numberFormat,\n            formatType: config.numberFormatType,\n            config: config\n          })\n        }, specifiedLabelsSpec);\n      }\n    }\n    if (channelDefType(fieldOrDatumDef) === 'temporal' && config.timeFormatType && isFieldDef(fieldOrDatumDef) && !fieldOrDatumDef.timeUnit) {\n      return Object.assign({\n        text: formatCustomType({\n          fieldOrDatumDef: fieldOrDatumDef,\n          field: 'datum.value',\n          format: config.timeFormat,\n          formatType: config.timeFormatType,\n          config: config\n        })\n      }, specifiedLabelsSpec);\n    }\n  }\n  return specifiedLabelsSpec;\n}","map":{"version":3,"sources":["../../../../src/compile/axis/encode.ts"],"names":[],"mappings":"AAAA,SAAQ,wBAAwB,QAA6B,eAAe;AAC5E,SAAQ,cAAc,EAAE,kBAAkB,EAAE,UAAU,EAAE,yBAAyB,QAAO,kBAAkB;AAC1G,SAAQ,gBAAgB,EAAE,kBAAkB,QAAO,WAAW;AAG9D,OAAM,SAAU,MAAM,CAAC,KAAgB,EAAE,OAA6B,EAAE,mBAAwB,EAAA;;EAC9F,IAAO,QAAQ,GAAY,KAAK,CAAzB,QAAQ;IAAE,MAAM,GAAI,KAAK,CAAf,MAAM;EAEvB,IAAM,eAAe,GACnB,CAAA,EAAA,GAAA,kBAAkB,CAAS,QAAQ,CAAC,OAAO,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,kBAAkB,CAAC,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC;EAClH,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA,CAAE;EACtC,IAAO,MAAM,GAAgB,IAAI,CAA1B,MAAM;IAAE,UAAU,GAAI,IAAI,CAAlB,UAAU;EAEzB,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAAE;IAClC,OAAA,MAAA,CAAA,MAAA,CAAA;MACE,IAAI,EAAE,gBAAgB,CAAC;QACrB,eAAe,EAAf,eAAe;QACf,KAAK,EAAE,aAAa;QACpB,MAAM,EAAN,MAAM;QACN,UAAU,EAAV,UAAU;QACV,MAAM,EAAN;OACD;IAAC,CAAA,EACC,mBAAmB,CAAA;GAEzB,MAAM,IAAI,MAAM,KAAK,SAAS,IAAI,UAAU,KAAK,SAAS,IAAI,MAAM,CAAC,iBAAiB,EAAE;IACvF,IAAI,cAAc,CAAC,eAAe,CAAC,KAAK,cAAc,EAAE;MACtD,IACE,yBAAyB,CAAC,eAAe,CAAC,IAC1C,eAAe,CAAC,KAAK,KAAK,WAAW,IACrC,MAAM,CAAC,0BAA0B,EACjC;QACA,OAAA,MAAA,CAAA,MAAA,CAAA;UACE,IAAI,EAAE,gBAAgB,CAAC;YACrB,eAAe,EAAf,eAAe;YACf,KAAK,EAAE,aAAa;YACpB,MAAM,EAAE,MAAM,CAAC,sBAAsB;YACrC,UAAU,EAAE,MAAM,CAAC,0BAA0B;YAC7C,MAAM,EAAN;WACD;QAAC,CAAA,EACC,mBAAmB,CAAA;OAEzB,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE;QAClC,OAAA,MAAA,CAAA,MAAA,CAAA;UACE,IAAI,EAAE,gBAAgB,CAAC;YACrB,eAAe,EAAf,eAAe;YACf,KAAK,EAAE,aAAa;YACpB,MAAM,EAAE,MAAM,CAAC,YAAY;YAC3B,UAAU,EAAE,MAAM,CAAC,gBAAgB;YACnC,MAAM,EAAN;WACD;QAAC,CAAA,EACC,mBAAmB,CAAA;MAEzB;IACF;IACD,IACE,cAAc,CAAC,eAAe,CAAC,KAAK,UAAU,IAC9C,MAAM,CAAC,cAAc,IACrB,UAAU,CAAC,eAAe,CAAC,IAC3B,CAAC,eAAe,CAAC,QAAQ,EACzB;MACA,OAAA,MAAA,CAAA,MAAA,CAAA;QACE,IAAI,EAAE,gBAAgB,CAAC;UACrB,eAAe,EAAf,eAAe;UACf,KAAK,EAAE,aAAa;UACpB,MAAM,EAAE,MAAM,CAAC,UAAU;UACzB,UAAU,EAAE,MAAM,CAAC,cAAc;UACjC,MAAM,EAAN;SACD;MAAC,CAAA,EACC,mBAAmB,CAAA;IAEzB;EACF;EACD,OAAO,mBAAmB;AAC5B","sourceRoot":"","sourcesContent":["import { getSecondaryRangeChannel } from '../../channel';\nimport { channelDefType, getFieldOrDatumDef, isFieldDef, isPositionFieldOrDatumDef } from '../../channeldef';\nimport { formatCustomType, isCustomFormatType } from '../format';\nexport function labels(model, channel, specifiedLabelsSpec) {\n    var _a;\n    const { encoding, config } = model;\n    const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n    const axis = model.axis(channel) || {};\n    const { format, formatType } = axis;\n    if (isCustomFormatType(formatType)) {\n        return Object.assign({ text: formatCustomType({\n                fieldOrDatumDef,\n                field: 'datum.value',\n                format,\n                formatType,\n                config\n            }) }, specifiedLabelsSpec);\n    }\n    else if (format === undefined && formatType === undefined && config.customFormatTypes) {\n        if (channelDefType(fieldOrDatumDef) === 'quantitative') {\n            if (isPositionFieldOrDatumDef(fieldOrDatumDef) &&\n                fieldOrDatumDef.stack === 'normalize' &&\n                config.normalizedNumberFormatType) {\n                return Object.assign({ text: formatCustomType({\n                        fieldOrDatumDef,\n                        field: 'datum.value',\n                        format: config.normalizedNumberFormat,\n                        formatType: config.normalizedNumberFormatType,\n                        config\n                    }) }, specifiedLabelsSpec);\n            }\n            else if (config.numberFormatType) {\n                return Object.assign({ text: formatCustomType({\n                        fieldOrDatumDef,\n                        field: 'datum.value',\n                        format: config.numberFormat,\n                        formatType: config.numberFormatType,\n                        config\n                    }) }, specifiedLabelsSpec);\n            }\n        }\n        if (channelDefType(fieldOrDatumDef) === 'temporal' &&\n            config.timeFormatType &&\n            isFieldDef(fieldOrDatumDef) &&\n            !fieldOrDatumDef.timeUnit) {\n            return Object.assign({ text: formatCustomType({\n                    fieldOrDatumDef,\n                    field: 'datum.value',\n                    format: config.timeFormat,\n                    formatType: config.timeFormatType,\n                    config\n                }) }, specifiedLabelsSpec);\n        }\n    }\n    return specifiedLabelsSpec;\n}\n//# sourceMappingURL=encode.js.map"]},"metadata":{},"sourceType":"module"}