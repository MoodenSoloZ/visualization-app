{"ast":null,"code":"import _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { getFieldOrDatumDef, isDatumDef, isFieldDef, isValueDef } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport var GeoJSONNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(GeoJSONNode, _DataFlowNode);\n  var _super = _createSuper(GeoJSONNode);\n  function GeoJSONNode(parent, fields, geojson, signal) {\n    var _this;\n    _classCallCheck(this, GeoJSONNode);\n    _this = _super.call(this, parent);\n    _this.fields = fields;\n    _this.geojson = geojson;\n    _this.signal = signal;\n    return _this;\n  }\n  _createClass(GeoJSONNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n      var fields = ((_a = this.fields) !== null && _a !== void 0 ? _a : []).filter(isString);\n      return new Set([].concat(_toConsumableArray(this.geojson ? [this.geojson] : []), _toConsumableArray(fields)));\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set();\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"GeoJSON \".concat(this.geojson, \" \").concat(this.signal, \" \").concat(_hash(this.fields));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return [].concat(_toConsumableArray(this.geojson ? [{\n        type: 'filter',\n        expr: \"isValid(datum[\\\"\".concat(this.geojson, \"\\\"])\")\n      }] : []), [Object.assign(Object.assign(Object.assign({\n        type: 'geojson'\n      }, this.fields ? {\n        fields: this.fields\n      } : {}), this.geojson ? {\n        geojson: this.geojson\n      } : {}), {\n        signal: this.signal\n      })]);\n    }\n  }], [{\n    key: \"parseAll\",\n    value: function parseAll(parent, model) {\n      if (model.component.projection && !model.component.projection.isFit) {\n        return parent;\n      }\n      var geoJsonCounter = 0;\n      for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {\n        var coordinates = _arr[_i];\n        var pair = coordinates.map(function (channel) {\n          var def = getFieldOrDatumDef(model.encoding[channel]);\n          return isFieldDef(def) ? def.field : isDatumDef(def) ? {\n            expr: \"\".concat(def.datum)\n          } : isValueDef(def) ? {\n            expr: \"\".concat(def['value'])\n          } : undefined;\n        });\n        if (pair[0] || pair[1]) {\n          parent = new GeoJSONNode(parent, pair, null, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n        }\n      }\n      if (model.channelHasField(SHAPE)) {\n        var fieldDef = model.typedFieldDef(SHAPE);\n        if (fieldDef.type === GEOJSON) {\n          parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n        }\n      }\n      return parent;\n    }\n  }]);\n  return GeoJSONNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/geojson.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { getFieldOrDatumDef, isDatumDef, isFieldDef, isValueDef } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoJSONNode extends DataFlowNode {\n    constructor(parent, fields, geojson, signal) {\n        super(parent);\n        this.fields = fields;\n        this.geojson = geojson;\n        this.signal = signal;\n    }\n    clone() {\n        return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    }\n    static parseAll(parent, model) {\n        if (model.component.projection && !model.component.projection.isFit) {\n            return parent;\n        }\n        let geoJsonCounter = 0;\n        for (const coordinates of [\n            [LONGITUDE, LATITUDE],\n            [LONGITUDE2, LATITUDE2]\n        ]) {\n            const pair = coordinates.map(channel => {\n                const def = getFieldOrDatumDef(model.encoding[channel]);\n                return isFieldDef(def)\n                    ? def.field\n                    : isDatumDef(def)\n                        ? { expr: `${def.datum}` }\n                        : isValueDef(def)\n                            ? { expr: `${def['value']}` }\n                            : undefined;\n            });\n            if (pair[0] || pair[1]) {\n                parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n            }\n        }\n        if (model.channelHasField(SHAPE)) {\n            const fieldDef = model.typedFieldDef(SHAPE);\n            if (fieldDef.type === GEOJSON) {\n                parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n            }\n        }\n        return parent;\n    }\n    dependentFields() {\n        var _a;\n        const fields = ((_a = this.fields) !== null && _a !== void 0 ? _a : []).filter(isString);\n        return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);\n    }\n    producedFields() {\n        return new Set();\n    }\n    hash() {\n        return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;\n    }\n    assemble() {\n        return [\n            ...(this.geojson\n                ? [\n                    {\n                        type: 'filter',\n                        expr: `isValid(datum[\"${this.geojson}\"])`\n                    }\n                ]\n                : []),\n            Object.assign(Object.assign(Object.assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {})), (this.geojson ? { geojson: this.geojson } : {})), { signal: this.signal })\n        ];\n    }\n}\n//# sourceMappingURL=geojson.js.map"]},"metadata":{},"sourceType":"module"}