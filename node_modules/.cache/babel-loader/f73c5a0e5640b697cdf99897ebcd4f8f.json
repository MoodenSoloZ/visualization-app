{"ast":null,"code":"import { $errors, $events, $terminate } from \"../symbols\";\nfunction fail(message) {\n  throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexport var Thread = {\n  /** Return an observable that can be used to subscribe to all errors happening in the thread. */errors: function errors(thread) {\n    return thread[$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n  /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */events: function events(thread) {\n    return thread[$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n  /** Terminate a thread. Remember to terminate every thread when you are done using it. */terminate: function terminate(thread) {\n    return thread[$terminate]();\n  }\n};","map":{"version":3,"names":["$errors","$events","$terminate","fail","message","Error","Thread","errors","thread","events","terminate"],"sources":["/Users/weihangzhang/Documents/webpage/visualization-app-git/node_modules/gosling.js/node_modules/threads/dist-esm/master/thread.js"],"sourcesContent":["import { $errors, $events, $terminate } from \"../symbols\";\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexport const Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[$terminate]();\n    }\n};\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,UAAU,QAAQ,YAAY;AACzD,SAASC,IAAI,CAACC,OAAO,EAAE;EACnB,MAAMC,KAAK,CAACD,OAAO,CAAC;AACxB;AACA;AACA,OAAO,IAAME,MAAM,GAAG;EAClB,gGACAC,MAAM,kBAACC,MAAM,EAAE;IACX,OAAOA,MAAM,CAACR,OAAO,CAAC,IAAIG,IAAI,CAAC,qGAAqG,CAAC;EACzI,CAAC;EACD,2HACAM,MAAM,kBAACD,MAAM,EAAE;IACX,OAAOA,MAAM,CAACP,OAAO,CAAC,IAAIE,IAAI,CAAC,sGAAsG,CAAC;EAC1I,CAAC;EACD,yFACAO,SAAS,qBAACF,MAAM,EAAE;IACd,OAAOA,MAAM,CAACN,UAAU,CAAC,EAAE;EAC/B;AACJ,CAAC"},"metadata":{},"sourceType":"module"}