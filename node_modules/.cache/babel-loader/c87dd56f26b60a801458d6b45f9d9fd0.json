{"ast":null,"code":"import _classCallCheck from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport var FilterNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(FilterNode, _DataFlowNode);\n  var _super = _createSuper(FilterNode);\n  function FilterNode(parent, model, filter) {\n    var _this;\n    _classCallCheck(this, FilterNode);\n    _this = _super.call(this, parent);\n    _this.model = model;\n    _this.filter = filter;\n    // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n    _this.expr = expression(_this.model, _this.filter, _assertThisInitialized(_this));\n    _this._dependentFields = getDependentFields(_this.expr);\n    return _this;\n  }\n  _createClass(FilterNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return this._dependentFields;\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(); // filter does not produce any new fields\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return {\n        type: 'filter',\n        expr: this.expr\n      };\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"Filter \".concat(this.expr);\n    }\n  }]);\n  return FilterNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/filter.ts"],"names":[],"mappings":";;;;;AAGA,SAAQ,SAAS,QAAO,YAAY;AAEpC,SAAQ,UAAU,QAAO,cAAc;AACvC,SAAQ,YAAY,QAAO,YAAY;AACvC,SAAQ,kBAAkB,QAAO,eAAe;AAEhD,WAAa,UAAW;EAAA;EAAA;EAOtB,oBACE,MAAoB,EACH,KAAY,EACZ,MAAqC,EAAA;IAAA;IAAA;IAEtD,0BAAM,MAAM;IAHK,MAAA,KAAK,GAAL,KAAK;IACL,MAAA,MAAM,GAAN,MAAM;IAIvB;IACA;IACA,MAAK,IAAI,GAAG,UAAU,CAAC,MAAK,KAAK,EAAE,MAAK,MAAM,gCAAO;IAErD,MAAK,gBAAgB,GAAG,kBAAkB,CAAC,MAAK,IAAI,CAAC;IAAC;EACxD;EAAC;IAAA;IAAA,OAhBM,iBAAK;MACV,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjE;EAAC;IAAA;IAAA,OAgBM,2BAAe;MACpB,OAAO,IAAI,CAAC,gBAAgB;IAC9B;EAAC;IAAA;IAAA,OAEM,0BAAc;MACnB,OAAO,IAAI,GAAG,EAAU,CAAC,CAAC;IAC5B;EAAC;IAAA;IAAA,OAEM,oBAAQ;MACb,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,IAAI,CAAC;OACZ;IACH;EAAC;IAAA;IAAA,OAEM,gBAAI;MACT,wBAAiB,IAAI,CAAC,IAAI;IAC5B;EAAC;EAAA;AAAA,EAtC6B,YAAY","sourceRoot":"","sourcesContent":["import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n    constructor(parent, model, filter) {\n        super(parent);\n        this.model = model;\n        this.filter = filter;\n        // TODO: refactor this to not take a node and\n        // then add a static function makeFromOperand and make the constructor take only an expression\n        this.expr = expression(this.model, this.filter, this);\n        this._dependentFields = getDependentFields(this.expr);\n    }\n    clone() {\n        return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n    dependentFields() {\n        return this._dependentFields;\n    }\n    producedFields() {\n        return new Set(); // filter does not produce any new fields\n    }\n    assemble() {\n        return {\n            type: 'filter',\n            expr: this.expr\n        };\n    }\n    hash() {\n        return `Filter ${this.expr}`;\n    }\n}\n//# sourceMappingURL=filter.js.map"]},"metadata":{},"sourceType":"module"}