{"ast":null,"code":"import _classCallCheck from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport var FoldTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(FoldTransformNode, _DataFlowNode);\n  var _super = _createSuper(FoldTransformNode);\n  function FoldTransformNode(parent, transform) {\n    var _this;\n    _classCallCheck(this, FoldTransformNode);\n    var _a, _b, _c;\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    _this.transform = duplicate(transform); // duplicate to prevent side effects\n    var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n    _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n    return _this;\n  }\n  _createClass(FoldTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FoldTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set(this.transform.fold);\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"FoldTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform = this.transform,\n        fold = _this$transform.fold,\n        as = _this$transform.as;\n      var result = {\n        type: 'fold',\n        fields: fold,\n        as: as\n      };\n      return result;\n    }\n  }]);\n  return FoldTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/fold.ts"],"names":[],"mappings":";;;;AAEA,SAAQ,SAAS,EAAE,IAAI,IAAJ,KAAI,QAAO,YAAY;AAC1C,SAAQ,YAAY,QAAO,YAAY;AAEvC;;AAEG;AACH,WAAa,iBAAkB;EAAA;EAAA;EAK7B,2BAAY,MAAoB,EAAU,SAAwB,EAAA;IAAA;IAAA;;IAChE,0BAAM,MAAM;IAD4B,MAAA,SAAS,GAAT,SAAS;IAEjD,MAAK,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACvC,IAAM,WAAW,GAAG,CAAA,EAAA,GAAA,MAAK,SAAS,CAAC,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,SAAS,EAAE,SAAS,CAAC;IAC/D,MAAK,SAAS,CAAC,EAAE,GAAG,CAAC,CAAA,EAAA,GAAA,WAAW,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK,EAAE,CAAA,EAAA,GAAA,WAAW,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,CAAC;IAAC;EAC3E;EAAC;IAAA;IAAA,OATM,iBAAK;MACV,OAAO,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/D;EAAC;IAAA;IAAA,OASM,2BAAe;MACpB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IACrC;EAAC;IAAA;IAAA,OAEM,0BAAc;MACnB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACnC;EAAC;IAAA;IAAA,OAEM,gBAAI;MACT,+BAAwB,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IAC9C;EAAC;IAAA;IAAA,OAEM,oBAAQ;MACb,sBAAmB,IAAI,CAAC,SAAS;QAA1B,IAAI,mBAAJ,IAAI;QAAE,EAAE,mBAAF,EAAE;MACf,IAAM,MAAM,GAAoB;QAC9B,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;QACZ,EAAE,EAAF;OACD;MACD,OAAO,MAAM;IACf;EAAC;EAAA;AAAA,EAhCoC,YAAY","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        var _a, _b, _c;\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n        this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n    }\n    clone() {\n        return new FoldTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.fold);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FoldTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { fold, as } = this.transform;\n        const result = {\n            type: 'fold',\n            fields: fold,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=fold.js.map"]},"metadata":{},"sourceType":"module"}