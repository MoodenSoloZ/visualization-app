{"ast":null,"code":"import { parseSelector } from 'vega-event-selector';\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from './interval';\nimport { default as scalesCompiler, domain } from './scales';\nvar ANCHOR = '_zoom_anchor';\nvar DELTA = '_zoom_delta';\nvar zoom = {\n  defined: function defined(selCmpt) {\n    return selCmpt.type === 'interval' && selCmpt.zoom;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.defined(selCmpt);\n    var delta = name + DELTA;\n    var _selCmpt$project$hasC = selCmpt.project.hasChannel,\n      x = _selCmpt$project$hasC.x,\n      y = _selCmpt$project$hasC.y;\n    var sx = stringValue(model.scaleName(X));\n    var sy = stringValue(model.scaleName(Y));\n    var events = parseSelector(selCmpt.zoom, 'scope');\n    if (!hasScales) {\n      events = events.map(function (e) {\n        return e.markname = name + INTERVAL_BRUSH, e;\n      });\n    }\n    _signals.push({\n      name: name + ANCHOR,\n      on: [{\n        events: events,\n        update: !hasScales ? \"{x: x(unit), y: y(unit)}\" : '{' + [sx ? \"x: invert(\".concat(sx, \", x(unit))\") : '', sy ? \"y: invert(\".concat(sy, \", y(unit))\") : ''].filter(function (expr) {\n          return !!expr;\n        }).join(', ') + '}'\n      }]\n    }, {\n      name: delta,\n      on: [{\n        events: events,\n        force: true,\n        update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n      }]\n    });\n    if (x !== undefined) {\n      onDelta(model, selCmpt, x, 'width', _signals);\n    }\n    if (y !== undefined) {\n      onDelta(model, selCmpt, y, 'height', _signals);\n    }\n    return _signals;\n  }\n};\nexport default zoom;\nfunction onDelta(model, selCmpt, proj, size, signals) {\n  var _a, _b;\n  var name = selCmpt.name;\n  var channel = proj.channel;\n  var hasScales = scalesCompiler.defined(selCmpt);\n  var signal = signals.filter(function (s) {\n    return s.name === proj.signals[hasScales ? 'data' : 'visual'];\n  })[0];\n  var sizeSg = model.getSizeSignalRef(size).signal;\n  var scaleCmpt = model.getScaleComponent(channel);\n  var scaleType = scaleCmpt.get('type');\n  var base = hasScales ? domain(model, channel) : signal.name;\n  var delta = name + DELTA;\n  var anchor = \"\".concat(name).concat(ANCHOR, \".\").concat(channel);\n  var zoomFn = !hasScales ? 'zoomLinear' : scaleType === 'log' ? 'zoomLog' : scaleType === 'symlog' ? 'zoomSymlog' : scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';\n  var arg = !hasScales ? '' : scaleType === 'pow' ? \", \".concat((_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1) : scaleType === 'symlog' ? \", \".concat((_b = scaleCmpt.get('constant')) !== null && _b !== void 0 ? _b : 1) : '';\n  var update = \"\".concat(zoomFn, \"(\").concat(base, \", \").concat(anchor, \", \").concat(delta).concat(arg, \")\");\n  signal.on.push({\n    events: {\n      signal: delta\n    },\n    update: hasScales ? update : \"clampRange(\".concat(update, \", 0, \").concat(sizeSg, \")\")\n  });\n}","map":{"version":3,"sources":["../../../../src/compile/selection/zoom.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { parseSelector } from 'vega-event-selector';\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from './interval';\nimport { default as scalesCompiler, domain } from './scales';\nconst ANCHOR = '_zoom_anchor';\nconst DELTA = '_zoom_delta';\nconst zoom = {\n    defined: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.zoom;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const hasScales = scalesCompiler.defined(selCmpt);\n        const delta = name + DELTA;\n        const { x, y } = selCmpt.project.hasChannel;\n        const sx = stringValue(model.scaleName(X));\n        const sy = stringValue(model.scaleName(Y));\n        let events = parseSelector(selCmpt.zoom, 'scope');\n        if (!hasScales) {\n            events = events.map(e => ((e.markname = name + INTERVAL_BRUSH), e));\n        }\n        signals.push({\n            name: name + ANCHOR,\n            on: [\n                {\n                    events,\n                    update: !hasScales\n                        ? `{x: x(unit), y: y(unit)}`\n                        : '{' +\n                            [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']\n                                .filter(expr => !!expr)\n                                .join(', ') +\n                            '}'\n                }\n            ]\n        }, {\n            name: delta,\n            on: [\n                {\n                    events,\n                    force: true,\n                    update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n                }\n            ]\n        });\n        if (x !== undefined) {\n            onDelta(model, selCmpt, x, 'width', signals);\n        }\n        if (y !== undefined) {\n            onDelta(model, selCmpt, y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default zoom;\nfunction onDelta(model, selCmpt, proj, size, signals) {\n    var _a, _b;\n    const name = selCmpt.name;\n    const channel = proj.channel;\n    const hasScales = scalesCompiler.defined(selCmpt);\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const base = hasScales ? domain(model, channel) : signal.name;\n    const delta = name + DELTA;\n    const anchor = `${name}${ANCHOR}.${channel}`;\n    const zoomFn = !hasScales\n        ? 'zoomLinear'\n        : scaleType === 'log'\n            ? 'zoomLog'\n            : scaleType === 'symlog'\n                ? 'zoomSymlog'\n                : scaleType === 'pow'\n                    ? 'zoomPow'\n                    : 'zoomLinear';\n    const arg = !hasScales\n        ? ''\n        : scaleType === 'pow'\n            ? `, ${(_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1}`\n            : scaleType === 'symlog'\n                ? `, ${(_b = scaleCmpt.get('constant')) !== null && _b !== void 0 ? _b : 1}`\n                : '';\n    const update = `${zoomFn}(${base}, ${anchor}, ${delta}${arg})`;\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n    });\n}\n//# sourceMappingURL=zoom.js.map"]},"metadata":{},"sourceType":"module"}