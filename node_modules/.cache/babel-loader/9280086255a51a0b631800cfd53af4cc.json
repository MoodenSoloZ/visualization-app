{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport function isLogicalOr(op) {\n  return !!op.or;\n}\nexport function isLogicalAnd(op) {\n  return !!op.and;\n}\nexport function isLogicalNot(op) {\n  return !!op.not;\n}\nexport function forEachLeaf(op, fn) {\n  if (isLogicalNot(op)) {\n    forEachLeaf(op.not, fn);\n  } else if (isLogicalAnd(op)) {\n    var _iterator = _createForOfIteratorHelper(op.and),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var subop = _step.value;\n        forEachLeaf(subop, fn);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (isLogicalOr(op)) {\n    var _iterator2 = _createForOfIteratorHelper(op.or),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _subop = _step2.value;\n        forEachLeaf(_subop, fn);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  } else {\n    fn(op);\n  }\n}\nexport function normalizeLogicalComposition(op, normalizer) {\n  if (isLogicalNot(op)) {\n    return {\n      not: normalizeLogicalComposition(op.not, normalizer)\n    };\n  } else if (isLogicalAnd(op)) {\n    return {\n      and: op.and.map(function (o) {\n        return normalizeLogicalComposition(o, normalizer);\n      })\n    };\n  } else if (isLogicalOr(op)) {\n    return {\n      or: op.or.map(function (o) {\n        return normalizeLogicalComposition(o, normalizer);\n      })\n    };\n  } else {\n    return normalizer(op);\n  }\n}","map":{"version":3,"sources":["../../src/logical.ts"],"names":[],"mappings":";AAcA,OAAM,SAAU,WAAW,CAAC,EAA2B,EAAA;EACrD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE;AAChB;AAEA,OAAM,SAAU,YAAY,CAAC,EAA2B,EAAA;EACtD,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG;AACjB;AAEA,OAAM,SAAU,YAAY,CAAC,EAA2B,EAAA;EACtD,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG;AACjB;AAEA,OAAM,SAAU,WAAW,CAAI,EAAyB,EAAE,EAAmB,EAAA;EAC3E,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;IACpB,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;GACxB,MAAM,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;IAAA,2CACP,EAAE,CAAC,GAAG;MAAA;IAAA;MAA1B,oDAA4B;QAAA,IAAjB,KAAK;QACd,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC;;IACvB;MAAA;IAAA;MAAA;IAAA;GACF,MAAM,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;IAAA,4CACN,EAAE,CAAC,EAAE;MAAA;IAAA;MAAzB,uDAA2B;QAAA,IAAhB,MAAK;QACd,WAAW,CAAC,MAAK,EAAE,EAAE,CAAC;;IACvB;MAAA;IAAA;MAAA;IAAA;GACF,MAAM;IACL,EAAE,CAAC,EAAE,CAAC;EACP;AACH;AAEA,OAAM,SAAU,2BAA2B,CACzC,EAAyB,EACzB,UAAuB,EAAA;EAEvB,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;IACpB,OAAO;MAAC,GAAG,EAAE,2BAA2B,CAAC,EAAE,CAAC,GAAG,EAAE,UAAU;IAAC,CAAC;GAC9D,MAAM,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;IAC3B,OAAO;MAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,UAAA,CAAC;QAAA,OAAI,2BAA2B,CAAC,CAAC,EAAE,UAAU,CAAC;MAAA;IAAC,CAAC;GAC1E,MAAM,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;IAC1B,OAAO;MAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC;QAAA,OAAI,2BAA2B,CAAC,CAAC,EAAE,UAAU,CAAC;MAAA;IAAC,CAAC;GACxE,MAAM;IACL,OAAO,UAAU,CAAC,EAAE,CAAC;EACtB;AACH","sourceRoot":"","sourcesContent":["export function isLogicalOr(op) {\n    return !!op.or;\n}\nexport function isLogicalAnd(op) {\n    return !!op.and;\n}\nexport function isLogicalNot(op) {\n    return !!op.not;\n}\nexport function forEachLeaf(op, fn) {\n    if (isLogicalNot(op)) {\n        forEachLeaf(op.not, fn);\n    }\n    else if (isLogicalAnd(op)) {\n        for (const subop of op.and) {\n            forEachLeaf(subop, fn);\n        }\n    }\n    else if (isLogicalOr(op)) {\n        for (const subop of op.or) {\n            forEachLeaf(subop, fn);\n        }\n    }\n    else {\n        fn(op);\n    }\n}\nexport function normalizeLogicalComposition(op, normalizer) {\n    if (isLogicalNot(op)) {\n        return { not: normalizeLogicalComposition(op.not, normalizer) };\n    }\n    else if (isLogicalAnd(op)) {\n        return { and: op.and.map(o => normalizeLogicalComposition(o, normalizer)) };\n    }\n    else if (isLogicalOr(op)) {\n        return { or: op.or.map(o => normalizeLogicalComposition(o, normalizer)) };\n    }\n    else {\n        return normalizer(op);\n    }\n}\n//# sourceMappingURL=logical.js.map"]},"metadata":{},"sourceType":"module"}