{"ast":null,"code":"import _classCallCheck from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport var FlattenTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(FlattenTransformNode, _DataFlowNode);\n  var _super = _createSuper(FlattenTransformNode);\n  function FlattenTransformNode(parent, transform) {\n    var _this;\n    _classCallCheck(this, FlattenTransformNode);\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    _this.transform = duplicate(transform); // duplicate to prevent side effects\n    var _this$transform = _this.transform,\n      flatten = _this$transform.flatten,\n      _this$transform$as = _this$transform.as,\n      as = _this$transform$as === void 0 ? [] : _this$transform$as;\n    _this.transform.as = flatten.map(function (f, i) {\n      var _a;\n      return (_a = as[i]) !== null && _a !== void 0 ? _a : f;\n    });\n    return _this;\n  }\n  _createClass(FlattenTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set(this.transform.flatten);\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"FlattenTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform2 = this.transform,\n        fields = _this$transform2.flatten,\n        as = _this$transform2.as;\n      var result = {\n        type: 'flatten',\n        fields: fields,\n        as: as\n      };\n      return result;\n    }\n  }]);\n  return FlattenTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/flatten.ts"],"names":[],"mappings":";;;;AAEA,SAAQ,SAAS,EAAE,IAAI,IAAJ,KAAI,QAAO,YAAY;AAC1C,SAAQ,YAAY,QAAO,YAAY;AAEvC;;AAEG;AACH,WAAa,oBAAqB;EAAA;EAAA;EAKhC,8BAAY,MAAoB,EAAU,SAA2B,EAAA;IAAA;IAAA;IACnE,0BAAM,MAAM;IAD4B,MAAA,SAAS,GAAT,SAAS;IAEjD,MAAK,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACvC,sBAA2B,MAAK,SAAS;MAAlC,OAAO,mBAAP,OAAO;MAAA,qCAAE,EAAE;MAAF,EAAE,mCAAG,EAAE;IACvB,MAAK,SAAS,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAI;MAAA,IAAA,EAAA;MAAC,OAAA,CAAA,EAAA,GAAA,EAAE,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC;IAAA,CAAA,CAAC;IAAC;EACxD;EAAC;IAAA;IAAA,OATM,iBAAK;MACV,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzE;EAAC;IAAA;IAAA,OASM,2BAAe;MACpB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;IACxC;EAAC;IAAA;IAAA,OAEM,0BAAc;MACnB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACnC;EAAC;IAAA;IAAA,OAEM,gBAAI;MACT,kCAA2B,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IACjD;EAAC;IAAA;IAAA,OAEM,oBAAQ;MACb,uBAA8B,IAAI,CAAC,SAAS;QAA5B,MAAM,oBAAf,OAAO;QAAU,EAAE,oBAAF,EAAE;MAE1B,IAAM,MAAM,GAAuB;QACjC,IAAI,EAAE,SAAS;QACf,MAAM,EAAN,MAAM;QACN,EAAE,EAAF;OACD;MACD,OAAO,MAAM;IACf;EAAC;EAAA;AAAA,EAjCuC,YAAY","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const { flatten, as = [] } = this.transform;\n        this.transform.as = flatten.map((f, i) => { var _a; return (_a = as[i]) !== null && _a !== void 0 ? _a : f; });\n    }\n    clone() {\n        return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.flatten);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FlattenTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { flatten: fields, as } = this.transform;\n        const result = {\n            type: 'flatten',\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=flatten.js.map"]},"metadata":{},"sourceType":"module"}