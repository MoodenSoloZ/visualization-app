{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isObject } from 'vega';\nimport { parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport * as log from '../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../selection';\nimport { duplicate, vals, varName } from '../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nvar legendBindings = {\n  defined: function defined(selCmpt) {\n    var spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    var projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n    return spec && projLen;\n  },\n  parse: function parse(model, selCmpt, selDef) {\n    var _a;\n    // Allow legend items to be toggleable by default even though direct manipulation is disabled.\n    var selDef_ = duplicate(selDef);\n    selDef_.select = isString(selDef_.select) ? {\n      type: selDef_.select,\n      toggle: selCmpt.toggle\n    } : Object.assign(Object.assign({}, selDef_.select), {\n      toggle: selCmpt.toggle\n    });\n    disableDirectManipulation(selCmpt, selDef_);\n    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {\n      var legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n      var _iterator = _createForOfIteratorHelper(selCmpt.events),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _evt = _step.value;\n          _evt.filter = array((_a = _evt.filter) !== null && _a !== void 0 ? _a : []);\n          if (!_evt.filter.includes(legendFilter)) {\n            _evt.filter.push(legendFilter);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    var evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    var stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {\n      legend: {\n        merge: stream\n      }\n    };\n  },\n  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {\n    var selName = selCmpt.name;\n    var stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    var markName = function markName(name) {\n      return function (s) {\n        var ds = duplicate(s);\n        ds.markname = name;\n        return ds;\n      };\n    };\n    var _iterator2 = _createForOfIteratorHelper(selCmpt.project.items),\n      _step2;\n    try {\n      var _loop = function _loop() {\n        var proj = _step2.value;\n        if (!proj.hasLegend) return \"continue\";\n        var prefix = \"\".concat(varName(proj.field), \"_legend\");\n        var sgName = \"\".concat(selName, \"_\").concat(prefix);\n        var hasSignal = signals.filter(function (s) {\n          return s.name === sgName;\n        });\n        if (hasSignal.length === 0) {\n          var events = stream.merge.map(markName(\"\".concat(prefix, \"_symbols\"))).concat(stream.merge.map(markName(\"\".concat(prefix, \"_labels\")))).concat(stream.merge.map(markName(\"\".concat(prefix, \"_entries\"))));\n          signals.unshift(Object.assign(Object.assign({\n            name: sgName\n          }, !selCmpt.init ? {\n            value: null\n          } : {}), {\n            on: [\n            // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n            {\n              events: events,\n              update: 'datum.value || item().items[0].items[0].datum.value',\n              force: true\n            }, {\n              events: stream.merge,\n              update: \"!event.item || !datum ? null : \".concat(sgName),\n              force: true\n            }]\n          }));\n        }\n      };\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return signals;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    var name = selCmpt.name;\n    var proj = selCmpt.project;\n    var tuple = _signals.find(function (s) {\n      return s.name === name + TUPLE;\n    });\n    var fields = name + TUPLE_FIELDS;\n    var values = proj.items.filter(function (p) {\n      return p.hasLegend;\n    }).map(function (p) {\n      return varName(\"\".concat(name, \"_\").concat(varName(p.field), \"_legend\"));\n    });\n    var valid = values.map(function (v) {\n      return \"\".concat(v, \" !== null\");\n    }).join(' && ');\n    var update = \"\".concat(valid, \" ? {fields: \").concat(fields, \", values: [\").concat(values.join(', '), \"]} : null\");\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(function (signal) {\n          return {\n            signal: signal\n          };\n        }),\n        update: update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n    var toggle = _signals.find(function (s) {\n      return s.name === name + TOGGLE;\n    });\n    var events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), {\n        events: events\n      }));\n    }\n    return _signals;\n  }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n  var _a, _b, _c, _d;\n  var field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n  var _iterator3 = _createForOfIteratorHelper(vals((_b = model.component.selection) !== null && _b !== void 0 ? _b : {})),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var selCmpt = _step3.value;\n      var proj = (_c = selCmpt.project.hasField[field]) !== null && _c !== void 0 ? _c : selCmpt.project.hasChannel[channel];\n      if (proj && legendBindings.defined(selCmpt)) {\n        var legendSelections = (_d = legendCmpt.get('selections')) !== null && _d !== void 0 ? _d : [];\n        legendSelections.push(selCmpt.name);\n        legendCmpt.set('selections', legendSelections, false);\n        proj.hasLegend = true;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}","map":{"version":3,"sources":["../../../../src/compile/selection/legends.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isObject } from 'vega';\nimport { parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport * as log from '../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../selection';\nimport { duplicate, vals, varName } from '../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nconst legendBindings = {\n    defined: selCmpt => {\n        const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n        const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n        if (spec && !projLen) {\n            log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n        }\n        return spec && projLen;\n    },\n    parse: (model, selCmpt, selDef) => {\n        var _a;\n        // Allow legend items to be toggleable by default even though direct manipulation is disabled.\n        const selDef_ = duplicate(selDef);\n        selDef_.select = isString(selDef_.select)\n            ? { type: selDef_.select, toggle: selCmpt.toggle }\n            : Object.assign(Object.assign({}, selDef_.select), { toggle: selCmpt.toggle });\n        disableDirectManipulation(selCmpt, selDef_);\n        if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {\n            const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n            for (const evt of selCmpt.events) {\n                evt.filter = array((_a = evt.filter) !== null && _a !== void 0 ? _a : []);\n                if (!evt.filter.includes(legendFilter)) {\n                    evt.filter.push(legendFilter);\n                }\n            }\n        }\n        const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n        const stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n        selCmpt.bind = { legend: { merge: stream } };\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const selName = selCmpt.name;\n        const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n        const markName = (name) => (s) => {\n            const ds = duplicate(s);\n            ds.markname = name;\n            return ds;\n        };\n        for (const proj of selCmpt.project.items) {\n            if (!proj.hasLegend)\n                continue;\n            const prefix = `${varName(proj.field)}_legend`;\n            const sgName = `${selName}_${prefix}`;\n            const hasSignal = signals.filter(s => s.name === sgName);\n            if (hasSignal.length === 0) {\n                const events = stream.merge\n                    .map(markName(`${prefix}_symbols`))\n                    .concat(stream.merge.map(markName(`${prefix}_labels`)))\n                    .concat(stream.merge.map(markName(`${prefix}_entries`)));\n                signals.unshift(Object.assign(Object.assign({ name: sgName }, (!selCmpt.init ? { value: null } : {})), { on: [\n                        // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n                        { events, update: 'datum.value || item().items[0].items[0].datum.value', force: true },\n                        { events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true }\n                    ] }));\n            }\n        }\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const tuple = signals.find(s => s.name === name + TUPLE);\n        const fields = name + TUPLE_FIELDS;\n        const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n        const valid = values.map(v => `${v} !== null`).join(' && ');\n        const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n        if (selCmpt.events && values.length > 0) {\n            tuple.on.push({\n                events: values.map(signal => ({ signal })),\n                update\n            });\n        }\n        else if (values.length > 0) {\n            tuple.update = update;\n            delete tuple.value;\n            delete tuple.on;\n        }\n        const toggle = signals.find(s => s.name === name + TOGGLE);\n        const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n        if (toggle) {\n            if (!selCmpt.events)\n                toggle.on[0].events = events;\n            else\n                toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), { events }));\n        }\n        return signals;\n    }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n    var _a, _b, _c, _d;\n    const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n    for (const selCmpt of vals((_b = model.component.selection) !== null && _b !== void 0 ? _b : {})) {\n        const proj = (_c = selCmpt.project.hasField[field]) !== null && _c !== void 0 ? _c : selCmpt.project.hasChannel[channel];\n        if (proj && legendBindings.defined(selCmpt)) {\n            const legendSelections = (_d = legendCmpt.get('selections')) !== null && _d !== void 0 ? _d : [];\n            legendSelections.push(selCmpt.name);\n            legendCmpt.set('selections', legendSelections, false);\n            proj.hasLegend = true;\n        }\n    }\n}\n//# sourceMappingURL=legends.js.map"]},"metadata":{},"sourceType":"module"}