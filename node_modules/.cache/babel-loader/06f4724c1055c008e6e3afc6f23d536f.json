{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { isObject, isString } from 'vega-util';\nimport { dateTimeExprToExpr } from './datetime';\nimport { accessPathWithDatum, keys, stringify, varName } from './util';\n/** Time Unit that only corresponds to only one part of Date objects. */\nexport var LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  week: 1,\n  day: 1,\n  dayofyear: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport var TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nexport var UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcweek: 1,\n  utcday: 1,\n  utcdayofyear: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\nexport var LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n  yearweek: 1,\n  yearweekday: 1,\n  yearweekdayhours: 1,\n  yearweekdayhoursminutes: 1,\n  yearweekdayhoursminutesseconds: 1,\n  yeardayofyear: 1,\n  quartermonth: 1,\n  monthdate: 1,\n  monthdatehours: 1,\n  monthdatehoursminutes: 1,\n  monthdatehoursminutesseconds: 1,\n  weekday: 1,\n  weeksdayhours: 1,\n  weekdayhoursminutes: 1,\n  weekdayhoursminutesseconds: 1,\n  dayhours: 1,\n  dayhoursminutes: 1,\n  dayhoursminutesseconds: 1,\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n  minutesseconds: 1,\n  secondsmilliseconds: 1\n};\nexport var UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n  utcyearweek: 1,\n  utcyearweekday: 1,\n  utcyearweekdayhours: 1,\n  utcyearweekdayhoursminutes: 1,\n  utcyearweekdayhoursminutesseconds: 1,\n  utcyeardayofyear: 1,\n  utcquartermonth: 1,\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utcmonthdatehoursminutes: 1,\n  utcmonthdatehoursminutesseconds: 1,\n  utcweekday: 1,\n  utcweeksdayhours: 1,\n  utcweekdayhoursminutes: 1,\n  utcweekdayhoursminutesseconds: 1,\n  utcdayhours: 1,\n  utcdayhoursminutes: 1,\n  utcdayhoursminutesseconds: 1,\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n  utcminutesseconds: 1,\n  utcsecondsmilliseconds: 1\n};\nexport function isUTCTimeUnit(t) {\n  return t.startsWith('utc');\n}\nexport function getLocalTimeUnit(t) {\n  return t.substr(3);\n}\n// In order of increasing specificity\nexport var VEGALITE_TIMEFORMAT = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\nexport function getTimeUnitParts(timeUnit) {\n  return TIMEUNIT_PARTS.filter(function (part) {\n    return containsTimeUnit(timeUnit, part);\n  });\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n  var index = fullTimeUnit.indexOf(timeUnit);\n  if (index < 0) {\n    return false;\n  }\n  // exclude milliseconds\n  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n    return false;\n  }\n  // exclude dayofyear\n  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n    return false;\n  }\n  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n    return false;\n  }\n  return true;\n}\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      end: false\n    },\n    end = _ref.end;\n  var fieldRef = accessPathWithDatum(field);\n  var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n  function func(timeUnit) {\n    if (timeUnit === 'quarter') {\n      // quarter starting at 0 (0,3,6,9).\n      return \"(\".concat(utc, \"quarter(\").concat(fieldRef, \")-1)\");\n    } else {\n      return \"\".concat(utc).concat(timeUnit, \"(\").concat(fieldRef, \")\");\n    }\n  }\n  var lastTimeUnit;\n  var dateExpr = {};\n  var _iterator = _createForOfIteratorHelper(TIMEUNIT_PARTS),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n      if (containsTimeUnit(fullTimeUnit, part)) {\n        dateExpr[part] = func(part);\n        lastTimeUnit = part;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (end) {\n    dateExpr[lastTimeUnit] += '+1';\n  }\n  return dateTimeExprToExpr(dateExpr);\n}\nexport function timeUnitSpecifierExpression(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n  var timeUnitParts = getTimeUnitParts(timeUnit);\n  return \"timeUnitSpecifier(\".concat(stringify(timeUnitParts), \", \").concat(stringify(VEGALITE_TIMEFORMAT), \")\");\n}\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\nexport function formatExpression(timeUnit, field, isUTCScale) {\n  if (!timeUnit) {\n    return undefined;\n  }\n  var expr = timeUnitSpecifierExpression(timeUnit);\n  // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n  var utc = isUTCScale || isUTCTimeUnit(timeUnit);\n  return \"\".concat(utc ? 'utc' : 'time', \"Format(\").concat(field, \", \").concat(expr, \")\");\n}\nexport function normalizeTimeUnit(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n  var params;\n  if (isString(timeUnit)) {\n    params = {\n      unit: timeUnit\n    };\n  } else if (isObject(timeUnit)) {\n    params = Object.assign(Object.assign({}, timeUnit), timeUnit.unit ? {\n      unit: timeUnit.unit\n    } : {});\n  }\n  if (isUTCTimeUnit(params.unit)) {\n    params.utc = true;\n    params.unit = getLocalTimeUnit(params.unit);\n  }\n  return params;\n}\nexport function timeUnitToString(tu) {\n  var _a = normalizeTimeUnit(tu),\n    utc = _a.utc,\n    rest = __rest(_a, [\"utc\"]);\n  if (rest.unit) {\n    return (utc ? 'utc' : '') + keys(rest).map(function (p) {\n      return varName(\"\".concat(p === 'unit' ? '' : \"_\".concat(p, \"_\")).concat(rest[p]));\n    }).join('');\n  } else {\n    // when maxbins is specified instead of units\n    return (utc ? 'utc' : '') + 'timeunit' + keys(rest).map(function (p) {\n      return varName(\"_\".concat(p, \"_\").concat(rest[p]));\n    }).join('');\n  }\n}","map":{"version":3,"sources":["../../src/timeunit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { isObject, isString } from 'vega-util';\nimport { dateTimeExprToExpr } from './datetime';\nimport { accessPathWithDatum, keys, stringify, varName } from './util';\n/** Time Unit that only corresponds to only one part of Date objects. */\nexport const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    week: 1,\n    day: 1,\n    dayofyear: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nexport const UTC_SINGLE_TIMEUNIT_INDEX = {\n    utcyear: 1,\n    utcquarter: 1,\n    utcmonth: 1,\n    utcweek: 1,\n    utcday: 1,\n    utcdayofyear: 1,\n    utcdate: 1,\n    utchours: 1,\n    utcminutes: 1,\n    utcseconds: 1,\n    utcmilliseconds: 1\n};\nexport const LOCAL_MULTI_TIMEUNIT_INDEX = {\n    yearquarter: 1,\n    yearquartermonth: 1,\n    yearmonth: 1,\n    yearmonthdate: 1,\n    yearmonthdatehours: 1,\n    yearmonthdatehoursminutes: 1,\n    yearmonthdatehoursminutesseconds: 1,\n    yearweek: 1,\n    yearweekday: 1,\n    yearweekdayhours: 1,\n    yearweekdayhoursminutes: 1,\n    yearweekdayhoursminutesseconds: 1,\n    yeardayofyear: 1,\n    quartermonth: 1,\n    monthdate: 1,\n    monthdatehours: 1,\n    monthdatehoursminutes: 1,\n    monthdatehoursminutesseconds: 1,\n    weekday: 1,\n    weeksdayhours: 1,\n    weekdayhoursminutes: 1,\n    weekdayhoursminutesseconds: 1,\n    dayhours: 1,\n    dayhoursminutes: 1,\n    dayhoursminutesseconds: 1,\n    hoursminutes: 1,\n    hoursminutesseconds: 1,\n    minutesseconds: 1,\n    secondsmilliseconds: 1\n};\nexport const UTC_MULTI_TIMEUNIT_INDEX = {\n    utcyearquarter: 1,\n    utcyearquartermonth: 1,\n    utcyearmonth: 1,\n    utcyearmonthdate: 1,\n    utcyearmonthdatehours: 1,\n    utcyearmonthdatehoursminutes: 1,\n    utcyearmonthdatehoursminutesseconds: 1,\n    utcyearweek: 1,\n    utcyearweekday: 1,\n    utcyearweekdayhours: 1,\n    utcyearweekdayhoursminutes: 1,\n    utcyearweekdayhoursminutesseconds: 1,\n    utcyeardayofyear: 1,\n    utcquartermonth: 1,\n    utcmonthdate: 1,\n    utcmonthdatehours: 1,\n    utcmonthdatehoursminutes: 1,\n    utcmonthdatehoursminutesseconds: 1,\n    utcweekday: 1,\n    utcweeksdayhours: 1,\n    utcweekdayhoursminutes: 1,\n    utcweekdayhoursminutesseconds: 1,\n    utcdayhours: 1,\n    utcdayhoursminutes: 1,\n    utcdayhoursminutesseconds: 1,\n    utchoursminutes: 1,\n    utchoursminutesseconds: 1,\n    utcminutesseconds: 1,\n    utcsecondsmilliseconds: 1\n};\nexport function isUTCTimeUnit(t) {\n    return t.startsWith('utc');\n}\nexport function getLocalTimeUnit(t) {\n    return t.substr(3);\n}\n// In order of increasing specificity\nexport const VEGALITE_TIMEFORMAT = {\n    'year-month': '%b %Y ',\n    'year-month-date': '%b %d, %Y '\n};\nexport function getTimeUnitParts(timeUnit) {\n    return TIMEUNIT_PARTS.filter(part => containsTimeUnit(timeUnit, part));\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n    const index = fullTimeUnit.indexOf(timeUnit);\n    if (index < 0) {\n        return false;\n    }\n    // exclude milliseconds\n    if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n        return false;\n    }\n    // exclude dayofyear\n    if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n        return false;\n    }\n    if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n        return false;\n    }\n    return true;\n}\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field, { end } = { end: false }) {\n    const fieldRef = accessPathWithDatum(field);\n    const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n    function func(timeUnit) {\n        if (timeUnit === 'quarter') {\n            // quarter starting at 0 (0,3,6,9).\n            return `(${utc}quarter(${fieldRef})-1)`;\n        }\n        else {\n            return `${utc}${timeUnit}(${fieldRef})`;\n        }\n    }\n    let lastTimeUnit;\n    const dateExpr = {};\n    for (const part of TIMEUNIT_PARTS) {\n        if (containsTimeUnit(fullTimeUnit, part)) {\n            dateExpr[part] = func(part);\n            lastTimeUnit = part;\n        }\n    }\n    if (end) {\n        dateExpr[lastTimeUnit] += '+1';\n    }\n    return dateTimeExprToExpr(dateExpr);\n}\nexport function timeUnitSpecifierExpression(timeUnit) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const timeUnitParts = getTimeUnitParts(timeUnit);\n    return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\nexport function formatExpression(timeUnit, field, isUTCScale) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const expr = timeUnitSpecifierExpression(timeUnit);\n    // We only use utcFormat for utc scale\n    // For utc time units, the data is already converted as a part of timeUnit transform.\n    // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n    const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n    return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;\n}\nexport function normalizeTimeUnit(timeUnit) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    let params;\n    if (isString(timeUnit)) {\n        params = {\n            unit: timeUnit\n        };\n    }\n    else if (isObject(timeUnit)) {\n        params = Object.assign(Object.assign({}, timeUnit), (timeUnit.unit ? { unit: timeUnit.unit } : {}));\n    }\n    if (isUTCTimeUnit(params.unit)) {\n        params.utc = true;\n        params.unit = getLocalTimeUnit(params.unit);\n    }\n    return params;\n}\nexport function timeUnitToString(tu) {\n    const _a = normalizeTimeUnit(tu), { utc } = _a, rest = __rest(_a, [\"utc\"]);\n    if (rest.unit) {\n        return ((utc ? 'utc' : '') +\n            keys(rest)\n                .map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`))\n                .join(''));\n    }\n    else {\n        // when maxbins is specified instead of units\n        return ((utc ? 'utc' : '') +\n            'timeunit' +\n            keys(rest)\n                .map(p => varName(`_${p}_${rest[p]}`))\n                .join(''));\n    }\n}\n//# sourceMappingURL=timeunit.js.map"]},"metadata":{},"sourceType":"module"}