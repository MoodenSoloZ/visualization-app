{"ast":null,"code":"import _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\n * This source file contains the code for proxying calls in the master thread to calls in the workers\n * by `.postMessage()`-ing.\n *\n * Keep in mind that this code can make or break the program's performance! Need to optimize more…\n */\nimport DebugLogger from \"debug\";\nimport { multicast, Observable } from \"observable-fns\";\nimport { deserialize, serialize } from \"../common\";\nimport { ObservablePromise } from \"../observable-promise\";\nimport { isTransferDescriptor } from \"../transferable\";\nimport { MasterMessageType, WorkerMessageType } from \"../types/messages\";\nvar debugMessages = DebugLogger(\"threads:master:messages\");\nvar nextJobUID = 1;\nvar dedupe = function dedupe(array) {\n  return Array.from(new Set(array));\n};\nvar isJobErrorMessage = function isJobErrorMessage(data) {\n  return data && data.type === WorkerMessageType.error;\n};\nvar isJobResultMessage = function isJobResultMessage(data) {\n  return data && data.type === WorkerMessageType.result;\n};\nvar isJobStartMessage = function isJobStartMessage(data) {\n  return data && data.type === WorkerMessageType.running;\n};\nfunction createObservableForJob(worker, jobUID) {\n  return new Observable(function (observer) {\n    var asyncType;\n    var messageHandler = function messageHandler(event) {\n      debugMessages(\"Message from worker:\", event.data);\n      if (!event.data || event.data.uid !== jobUID) return;\n      if (isJobStartMessage(event.data)) {\n        asyncType = event.data.resultType;\n      } else if (isJobResultMessage(event.data)) {\n        if (asyncType === \"promise\") {\n          if (typeof event.data.payload !== \"undefined\") {\n            observer.next(deserialize(event.data.payload));\n          }\n          observer.complete();\n          worker.removeEventListener(\"message\", messageHandler);\n        } else {\n          if (event.data.payload) {\n            observer.next(deserialize(event.data.payload));\n          }\n          if (event.data.complete) {\n            observer.complete();\n            worker.removeEventListener(\"message\", messageHandler);\n          }\n        }\n      } else if (isJobErrorMessage(event.data)) {\n        var error = deserialize(event.data.error);\n        if (asyncType === \"promise\" || !asyncType) {\n          observer.error(error);\n        } else {\n          observer.error(error);\n        }\n        worker.removeEventListener(\"message\", messageHandler);\n      }\n    };\n    worker.addEventListener(\"message\", messageHandler);\n    return function () {\n      if (asyncType === \"observable\" || !asyncType) {\n        var cancelMessage = {\n          type: MasterMessageType.cancel,\n          uid: jobUID\n        };\n        worker.postMessage(cancelMessage);\n      }\n      worker.removeEventListener(\"message\", messageHandler);\n    };\n  });\n}\nfunction prepareArguments(rawArgs) {\n  if (rawArgs.length === 0) {\n    // Exit early if possible\n    return {\n      args: [],\n      transferables: []\n    };\n  }\n  var args = [];\n  var transferables = [];\n  var _iterator = _createForOfIteratorHelper(rawArgs),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var arg = _step.value;\n      if (isTransferDescriptor(arg)) {\n        args.push(serialize(arg.send));\n        transferables.push.apply(transferables, _toConsumableArray(arg.transferables));\n      } else {\n        args.push(serialize(arg));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    args: args,\n    transferables: transferables.length === 0 ? transferables : dedupe(transferables)\n  };\n}\nexport function createProxyFunction(worker, method) {\n  return function () {\n    var uid = nextJobUID++;\n    for (var _len = arguments.length, rawArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      rawArgs[_key] = arguments[_key];\n    }\n    var _prepareArguments = prepareArguments(rawArgs),\n      args = _prepareArguments.args,\n      transferables = _prepareArguments.transferables;\n    var runMessage = {\n      type: MasterMessageType.run,\n      uid: uid,\n      method: method,\n      args: args\n    };\n    debugMessages(\"Sending command to run function to worker:\", runMessage);\n    try {\n      worker.postMessage(runMessage, transferables);\n    } catch (error) {\n      return ObservablePromise.from(Promise.reject(error));\n    }\n    return ObservablePromise.from(multicast(createObservableForJob(worker, uid)));\n  };\n}\nexport function createProxyModule(worker, methodNames) {\n  var proxy = {};\n  var _iterator2 = _createForOfIteratorHelper(methodNames),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var methodName = _step2.value;\n      proxy[methodName] = createProxyFunction(worker, methodName);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return proxy;\n}","map":{"version":3,"names":["DebugLogger","multicast","Observable","deserialize","serialize","ObservablePromise","isTransferDescriptor","MasterMessageType","WorkerMessageType","debugMessages","nextJobUID","dedupe","array","Array","from","Set","isJobErrorMessage","data","type","error","isJobResultMessage","result","isJobStartMessage","running","createObservableForJob","worker","jobUID","observer","asyncType","messageHandler","event","uid","resultType","payload","next","complete","removeEventListener","addEventListener","cancelMessage","cancel","postMessage","prepareArguments","rawArgs","length","args","transferables","arg","push","send","createProxyFunction","method","runMessage","run","Promise","reject","createProxyModule","methodNames","proxy","methodName"],"sources":["/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/gosling.js/node_modules/threads/dist-esm/master/invocation-proxy.js"],"sourcesContent":["/*\n * This source file contains the code for proxying calls in the master thread to calls in the workers\n * by `.postMessage()`-ing.\n *\n * Keep in mind that this code can make or break the program's performance! Need to optimize more…\n */\nimport DebugLogger from \"debug\";\nimport { multicast, Observable } from \"observable-fns\";\nimport { deserialize, serialize } from \"../common\";\nimport { ObservablePromise } from \"../observable-promise\";\nimport { isTransferDescriptor } from \"../transferable\";\nimport { MasterMessageType, WorkerMessageType } from \"../types/messages\";\nconst debugMessages = DebugLogger(\"threads:master:messages\");\nlet nextJobUID = 1;\nconst dedupe = (array) => Array.from(new Set(array));\nconst isJobErrorMessage = (data) => data && data.type === WorkerMessageType.error;\nconst isJobResultMessage = (data) => data && data.type === WorkerMessageType.result;\nconst isJobStartMessage = (data) => data && data.type === WorkerMessageType.running;\nfunction createObservableForJob(worker, jobUID) {\n    return new Observable(observer => {\n        let asyncType;\n        const messageHandler = ((event) => {\n            debugMessages(\"Message from worker:\", event.data);\n            if (!event.data || event.data.uid !== jobUID)\n                return;\n            if (isJobStartMessage(event.data)) {\n                asyncType = event.data.resultType;\n            }\n            else if (isJobResultMessage(event.data)) {\n                if (asyncType === \"promise\") {\n                    if (typeof event.data.payload !== \"undefined\") {\n                        observer.next(deserialize(event.data.payload));\n                    }\n                    observer.complete();\n                    worker.removeEventListener(\"message\", messageHandler);\n                }\n                else {\n                    if (event.data.payload) {\n                        observer.next(deserialize(event.data.payload));\n                    }\n                    if (event.data.complete) {\n                        observer.complete();\n                        worker.removeEventListener(\"message\", messageHandler);\n                    }\n                }\n            }\n            else if (isJobErrorMessage(event.data)) {\n                const error = deserialize(event.data.error);\n                if (asyncType === \"promise\" || !asyncType) {\n                    observer.error(error);\n                }\n                else {\n                    observer.error(error);\n                }\n                worker.removeEventListener(\"message\", messageHandler);\n            }\n        });\n        worker.addEventListener(\"message\", messageHandler);\n        return () => {\n            if (asyncType === \"observable\" || !asyncType) {\n                const cancelMessage = {\n                    type: MasterMessageType.cancel,\n                    uid: jobUID\n                };\n                worker.postMessage(cancelMessage);\n            }\n            worker.removeEventListener(\"message\", messageHandler);\n        };\n    });\n}\nfunction prepareArguments(rawArgs) {\n    if (rawArgs.length === 0) {\n        // Exit early if possible\n        return {\n            args: [],\n            transferables: []\n        };\n    }\n    const args = [];\n    const transferables = [];\n    for (const arg of rawArgs) {\n        if (isTransferDescriptor(arg)) {\n            args.push(serialize(arg.send));\n            transferables.push(...arg.transferables);\n        }\n        else {\n            args.push(serialize(arg));\n        }\n    }\n    return {\n        args,\n        transferables: transferables.length === 0 ? transferables : dedupe(transferables)\n    };\n}\nexport function createProxyFunction(worker, method) {\n    return ((...rawArgs) => {\n        const uid = nextJobUID++;\n        const { args, transferables } = prepareArguments(rawArgs);\n        const runMessage = {\n            type: MasterMessageType.run,\n            uid,\n            method,\n            args\n        };\n        debugMessages(\"Sending command to run function to worker:\", runMessage);\n        try {\n            worker.postMessage(runMessage, transferables);\n        }\n        catch (error) {\n            return ObservablePromise.from(Promise.reject(error));\n        }\n        return ObservablePromise.from(multicast(createObservableForJob(worker, uid)));\n    });\n}\nexport function createProxyModule(worker, methodNames) {\n    const proxy = {};\n    for (const methodName of methodNames) {\n        proxy[methodName] = createProxyFunction(worker, methodName);\n    }\n    return proxy;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}