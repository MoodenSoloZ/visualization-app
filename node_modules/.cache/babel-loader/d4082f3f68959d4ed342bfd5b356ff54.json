{"ast":null,"code":"import _regeneratorRuntime from \"/Users/weihangzhang/Documents/webpage/visualization-app-git/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nimport { AsyncSerialScheduler } from \"./_scheduler\";\nimport { isAsyncIterator, isIterator } from \"./_util\";\nimport Observable from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\n/**\n * Maps the values emitted by another observable. In contrast to `map()`\n * the `mapper` function returns an array of values that will be emitted\n * separately.\n * Use `flatMap()` to map input values to zero, one or multiple output\n * values. To be applied to an input observable using `pipe()`.\n */\nfunction flatMap(mapper) {\n  return function (observable) {\n    return new Observable(function (observer) {\n      var scheduler = new AsyncSerialScheduler(observer);\n      var subscription = observable.subscribe({\n        complete: function complete() {\n          scheduler.complete();\n        },\n        error: function error(_error) {\n          scheduler.error(_error);\n        },\n        next: function next(input) {\n          var _this = this;\n          scheduler.schedule(function (next) {\n            return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var e_1, _a, mapped, mapped_1, mapped_1_1, element;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return mapper(input);\n                    case 2:\n                      mapped = _context.sent;\n                      if (!(isIterator(mapped) || isAsyncIterator(mapped))) {\n                        _context.next = 31;\n                        break;\n                      }\n                      _context.prev = 4;\n                      mapped_1 = __asyncValues(mapped);\n                    case 6:\n                      _context.next = 8;\n                      return mapped_1.next();\n                    case 8:\n                      mapped_1_1 = _context.sent;\n                      if (mapped_1_1.done) {\n                        _context.next = 14;\n                        break;\n                      }\n                      element = mapped_1_1.value;\n                      next(element);\n                    case 12:\n                      _context.next = 6;\n                      break;\n                    case 14:\n                      _context.next = 19;\n                      break;\n                    case 16:\n                      _context.prev = 16;\n                      _context.t0 = _context[\"catch\"](4);\n                      e_1 = {\n                        error: _context.t0\n                      };\n                    case 19:\n                      _context.prev = 19;\n                      _context.prev = 20;\n                      if (!(mapped_1_1 && !mapped_1_1.done && (_a = mapped_1.return))) {\n                        _context.next = 24;\n                        break;\n                      }\n                      _context.next = 24;\n                      return _a.call(mapped_1);\n                    case 24:\n                      _context.prev = 24;\n                      if (!e_1) {\n                        _context.next = 27;\n                        break;\n                      }\n                      throw e_1.error;\n                    case 27:\n                      return _context.finish(24);\n                    case 28:\n                      return _context.finish(19);\n                    case 29:\n                      _context.next = 32;\n                      break;\n                    case 31:\n                      mapped.map(function (output) {\n                        return next(output);\n                      });\n                    case 32:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[4, 16, 19, 29], [20,, 24, 28]]);\n            }));\n          });\n        }\n      });\n      return function () {\n        return unsubscribe(subscription);\n      };\n    });\n  };\n}\nexport default flatMap;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__asyncValues","o","Symbol","asyncIterator","TypeError","m","i","call","__values","iterator","verb","n","v","settle","d","AsyncSerialScheduler","isAsyncIterator","isIterator","Observable","unsubscribe","flatMap","mapper","observable","observer","scheduler","subscription","subscribe","complete","error","input","schedule","mapped","mapped_1","mapped_1_1","element","e_1","_a","return","map","output"],"sources":["/Users/weihangzhang/Documents/webpage/visualization-app-git/node_modules/observable-fns/dist.esm/flatMap.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { AsyncSerialScheduler } from \"./_scheduler\";\nimport { isAsyncIterator, isIterator } from \"./_util\";\nimport Observable from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\n/**\n * Maps the values emitted by another observable. In contrast to `map()`\n * the `mapper` function returns an array of values that will be emitted\n * separately.\n * Use `flatMap()` to map input values to zero, one or multiple output\n * values. To be applied to an input observable using `pipe()`.\n */\nfunction flatMap(mapper) {\n    return (observable) => {\n        return new Observable(observer => {\n            const scheduler = new AsyncSerialScheduler(observer);\n            const subscription = observable.subscribe({\n                complete() {\n                    scheduler.complete();\n                },\n                error(error) {\n                    scheduler.error(error);\n                },\n                next(input) {\n                    scheduler.schedule((next) => __awaiter(this, void 0, void 0, function* () {\n                        var e_1, _a;\n                        const mapped = yield mapper(input);\n                        if (isIterator(mapped) || isAsyncIterator(mapped)) {\n                            try {\n                                for (var mapped_1 = __asyncValues(mapped), mapped_1_1; mapped_1_1 = yield mapped_1.next(), !mapped_1_1.done;) {\n                                    const element = mapped_1_1.value;\n                                    next(element);\n                                }\n                            }\n                            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                            finally {\n                                try {\n                                    if (mapped_1_1 && !mapped_1_1.done && (_a = mapped_1.return)) yield _a.call(mapped_1);\n                                }\n                                finally { if (e_1) throw e_1.error; }\n                            }\n                        }\n                        else {\n                            mapped.map(output => next(output));\n                        }\n                    }));\n                }\n            });\n            return () => unsubscribe(subscription);\n        });\n    };\n}\nexport default flatMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}