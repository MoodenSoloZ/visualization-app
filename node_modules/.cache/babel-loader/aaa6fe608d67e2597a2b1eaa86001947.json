{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  open: true,\n  fromUrl: true,\n  LocalFile: true,\n  RemoteFile: true,\n  BlobFile: true\n};\nexports.open = open;\nexports.fromUrl = fromUrl;\nObject.defineProperty(exports, \"LocalFile\", {\n  enumerable: true,\n  get: function get() {\n    return _localFile.default;\n  }\n});\nObject.defineProperty(exports, \"RemoteFile\", {\n  enumerable: true,\n  get: function get() {\n    return _remoteFile.default;\n  }\n});\nObject.defineProperty(exports, \"BlobFile\", {\n  enumerable: true,\n  get: function get() {\n    return _blobFile.default;\n  }\n});\nvar _localFile = _interopRequireDefault(require(\"./localFile\"));\nvar _remoteFile = _interopRequireDefault(require(\"./remoteFile\"));\nvar _blobFile = _interopRequireDefault(require(\"./blobFile\"));\nvar _filehandle = require(\"./filehandle\");\nObject.keys(_filehandle).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _filehandle[key];\n    }\n  });\n});\nfunction fromUrl(source) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new _remoteFile.default(source, opts);\n}\nfunction open(maybeUrl, maybePath, maybeFilehandle) {\n  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (maybeFilehandle !== undefined) {\n    return maybeFilehandle;\n  }\n  if (maybeUrl !== undefined) {\n    return fromUrl(maybeUrl, opts);\n  }\n  if (maybePath !== undefined) {\n    return new _localFile.default(maybePath, opts);\n  }\n  throw new Error('no url, path, or filehandle provided, cannot open');\n}","map":{"version":3,"sources":["../src/index.ts"],"names":["fromUrl","source","opts","RemoteFile","open","maybeUrl","maybePath","maybeFilehandle","undefined","LocalFile","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAAA,MAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;EAAA,IAAA,GAAA,KAAA,SAAA,IAAA,GAAA,KAAA,YAAA,EAAA;EAAA,IAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,YAAA,EAAA,GAAA,CAAA,EAAA;EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;IAAA,UAAA,EAAA,IAAA;IAAA,GAAA,EAAA,SAAA,GAAA,GAAA;MAAA,OAAA,WAAA,CAAA,GAAA,CAAA;IAAA;EAAA,CAAA,CAAA;AAAA,CAAA,CAAA;AAEA,SAASA,OAAT,CAAiBC,MAAjB,EAAkF;EAAA,IAAjDC,IAAiD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAvB,CAAA,CAAuB;EAChF,OAAO,IAAIC,WAAAA,CAAAA,OAAJ,CAAeF,MAAf,EAAuBC,IAAvB,CAAP;AACD;AACD,SAASE,IAAT,CACEC,QADF,EAEEC,SAFF,EAGEC,eAHF,EAKqB;EAAA,IADnBL,IACmB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADO,CAAA,CACP;EACnB,IAAIK,eAAe,KAAKC,SAAxB,EAAmC;IACjC,OAAOD,eAAP;EACD;EACD,IAAIF,QAAQ,KAAKG,SAAjB,EAA4B;IAC1B,OAAOR,OAAO,CAACK,QAAD,EAAWH,IAAX,CAAd;EACD;EACD,IAAII,SAAS,KAAKE,SAAlB,EAA6B;IAC3B,OAAO,IAAIC,UAAAA,CAAAA,OAAJ,CAAcH,SAAd,EAAyBJ,IAAzB,CAAP;EACD;EACD,MAAM,IAAIQ,KAAJ,CAAU,mDAAV,CAAN;AACD","sourcesContent":["import LocalFile from './localFile'\nimport RemoteFile from './remoteFile'\nimport BlobFile from './blobFile'\nimport { GenericFilehandle, FilehandleOptions } from './filehandle'\nexport * from './filehandle'\n\nfunction fromUrl(source: string, opts: FilehandleOptions = {}): GenericFilehandle {\n  return new RemoteFile(source, opts)\n}\nfunction open(\n  maybeUrl?: string,\n  maybePath?: string,\n  maybeFilehandle?: GenericFilehandle,\n  opts: FilehandleOptions = {},\n): GenericFilehandle {\n  if (maybeFilehandle !== undefined) {\n    return maybeFilehandle\n  }\n  if (maybeUrl !== undefined) {\n    return fromUrl(maybeUrl, opts)\n  }\n  if (maybePath !== undefined) {\n    return new LocalFile(maybePath, opts)\n  }\n  throw new Error('no url, path, or filehandle provided, cannot open')\n}\n\nexport { open, fromUrl, RemoteFile, LocalFile, BlobFile }\n"]},"metadata":{},"sourceType":"script"}