{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { getPositionScaleChannel, getSizeChannel, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getViewConfigContinuousSize, getViewConfigDiscreteSize } from '../../config';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isStep } from '../../spec/base';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit } from '../split';\nimport { getSizeTypeFromLayoutSizeType } from './component';\nexport function parseLayerLayoutSize(model) {\n  parseChildrenLayoutSize(model);\n  parseNonUnitLayoutSizeForChannel(model, 'width');\n  parseNonUnitLayoutSizeForChannel(model, 'height');\n}\nexport function parseConcatLayoutSize(model) {\n  parseChildrenLayoutSize(model);\n  // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.\n  var widthType = model.layout.columns === 1 ? 'width' : 'childWidth';\n  // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.\n  var heightType = model.layout.columns === undefined ? 'height' : 'childHeight';\n  parseNonUnitLayoutSizeForChannel(model, widthType);\n  parseNonUnitLayoutSizeForChannel(model, heightType);\n}\nexport function parseChildrenLayoutSize(model) {\n  var _iterator = _createForOfIteratorHelper(model.children),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n      child.parseLayoutSize();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n/**\n * Merge child layout size (width or height).\n */\nfunction parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {\n  var _a;\n  /*\n   * For concat, the parent width or height might not be the same as the children's shared height.\n   * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.\n   *\n   * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)\n   * while the sizeType represents the properties of the child.\n   */\n  var sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\n  var channel = getPositionScaleChannel(sizeType);\n  var resolve = model.component.resolve;\n  var layoutSizeCmpt = model.component.layoutSize;\n  var mergedSize;\n  // Try to merge layout size\n  var _iterator2 = _createForOfIteratorHelper(model.children),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _child = _step2.value;\n      var childSize = _child.component.layoutSize.getWithExplicit(sizeType);\n      var scaleResolve = (_a = resolve.scale[channel]) !== null && _a !== void 0 ? _a : defaultScaleResolve(channel, model);\n      if (scaleResolve === 'independent' && childSize.value === 'step') {\n        // Do not merge independent scales with range-step as their size depends\n        // on the scale domains, which can be different between scales.\n        mergedSize = undefined;\n        break;\n      }\n      if (mergedSize) {\n        if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n          // For independent scale, only merge if all the sizes are the same.\n          // If the values are different, abandon the merge!\n          mergedSize = undefined;\n          break;\n        }\n        mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n      } else {\n        mergedSize = childSize;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    var _iterator3 = _createForOfIteratorHelper(model.children),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var child = _step3.value;\n        model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));\n        child.component.layoutSize.set(sizeType, 'merged', false);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);\n  } else {\n    layoutSizeCmpt.setWithExplicit(layoutSizeType, {\n      explicit: false,\n      value: undefined\n    });\n  }\n}\nexport function parseUnitLayoutSize(model) {\n  var size = model.size,\n    component = model.component;\n  var _iterator4 = _createForOfIteratorHelper(POSITION_SCALE_CHANNELS),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var channel = _step4.value;\n      var sizeType = getSizeChannel(channel);\n      if (size[sizeType]) {\n        var specifiedSize = size[sizeType];\n        component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n      } else {\n        var defaultSize = defaultUnitSize(model, sizeType);\n        component.layoutSize.set(sizeType, defaultSize, false);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\nfunction defaultUnitSize(model, sizeType) {\n  var channel = sizeType === 'width' ? 'x' : 'y';\n  var config = model.config;\n  var scaleComponent = model.getScaleComponent(channel);\n  if (scaleComponent) {\n    var scaleType = scaleComponent.get('type');\n    var range = scaleComponent.get('range');\n    if (hasDiscreteDomain(scaleType)) {\n      var size = getViewConfigDiscreteSize(config.view, sizeType);\n      if (isVgRangeStep(range) || isStep(size)) {\n        // For discrete domain with range.step, use dynamic width/height\n        return 'step';\n      } else {\n        return size;\n      }\n    } else {\n      return getViewConfigContinuousSize(config.view, sizeType);\n    }\n  } else if (model.hasProjection || model.mark === 'arc') {\n    // arc should use continuous size by default otherwise the pie is extremely small\n    return getViewConfigContinuousSize(config.view, sizeType);\n  } else {\n    var _size = getViewConfigDiscreteSize(config.view, sizeType);\n    return isStep(_size) ? _size.step : _size;\n  }\n}","map":{"version":3,"sources":["../../../../src/compile/layoutsize/parse.ts"],"names":[],"mappings":";AAAA,SAAQ,uBAAuB,EAAE,cAAc,EAAE,uBAAuB,QAAO,eAAe;AAC9F,SAAQ,2BAA2B,EAAE,yBAAyB,QAAO,cAAc;AACnF,SAAQ,iBAAiB,QAAO,aAAa;AAC7C,SAAQ,MAAM,QAAO,iBAAiB;AACtC,SAAQ,aAAa,QAAO,mBAAmB;AAG/C,SAAQ,mBAAmB,QAAO,YAAY;AAC9C,SAAkB,uBAAuB,QAAO,UAAU;AAE1D,SAAQ,6BAA6B,QAAoD,aAAa;AAEtG,OAAM,SAAU,oBAAoB,CAAC,KAAY,EAAA;EAC/C,uBAAuB,CAAC,KAAK,CAAC;EAE9B,gCAAgC,CAAC,KAAK,EAAE,OAAO,CAAC;EAChD,gCAAgC,CAAC,KAAK,EAAE,QAAQ,CAAC;AACnD;AAEA,OAAM,SAAU,qBAAqB,CAAC,KAAkB,EAAA;EACtD,uBAAuB,CAAC,KAAK,CAAC;EAE9B;EACA,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,KAAK,CAAC,GAAG,OAAO,GAAG,YAAY;EAErE;EACA,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,GAAG,QAAQ,GAAG,aAAa;EAEhF,gCAAgC,CAAC,KAAK,EAAE,SAAS,CAAC;EAClD,gCAAgC,CAAC,KAAK,EAAE,UAAU,CAAC;AACrD;AAEA,OAAM,SAAU,uBAAuB,CAAC,KAAY,EAAA;EAAA,2CAC9B,KAAK,CAAC,QAAQ;IAAA;EAAA;IAAlC,oDAAoC;MAAA,IAAzB,KAAK;MACd,KAAK,CAAC,eAAe,EAAE;;EACxB;IAAA;EAAA;IAAA;EAAA;AACH;AAEA;;AAEG;AACH,SAAS,gCAAgC,CAAC,KAAY,EAAE,cAA8B,EAAA;;EACpF;;;;;;AAMG;EACH,IAAM,QAAQ,GAAG,6BAA6B,CAAC,cAAc,CAAC;EAC9D,IAAM,OAAO,GAAG,uBAAuB,CAAC,QAAQ,CAAC;EACjD,IAAM,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO;EACvC,IAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU;EAEjD,IAAI,UAAgC;EACpC;EAAA,4CACoB,KAAK,CAAC,QAAQ;IAAA;EAAA;IAAlC,uDAAoC;MAAA,IAAzB,MAAK;MACd,IAAM,SAAS,GAAG,MAAK,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC;MACtE,IAAM,YAAY,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,mBAAmB,CAAC,OAAO,EAAE,KAAK,CAAC;MAClF,IAAI,YAAY,KAAK,aAAa,IAAI,SAAS,CAAC,KAAK,KAAK,MAAM,EAAE;QAChE;QACA;QACA,UAAU,GAAG,SAAS;QACtB;MACD;MAED,IAAI,UAAU,EAAE;QACd,IAAI,YAAY,KAAK,aAAa,IAAI,UAAU,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,EAAE;UAC1E;UACA;UACA,UAAU,GAAG,SAAS;UACtB;QACD;QACD,UAAU,GAAG,uBAAuB,CAA8B,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,CAAC;OACvG,MAAM;QACL,UAAU,GAAG,SAAS;MACvB;;EACF;IAAA;EAAA;IAAA;EAAA;EAED,IAAI,UAAU,EAAE;IACd;IAAA,4CACoB,KAAK,CAAC,QAAQ;MAAA;IAAA;MAAlC,uDAAoC;QAAA,IAAzB,KAAK;QACd,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC1E,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC;;IAC1D;MAAA;IAAA;MAAA;IAAA;IACD,cAAc,CAAC,eAAe,CAAC,cAAc,EAAE,UAAU,CAAC;GAC3D,MAAM;IACL,cAAc,CAAC,eAAe,CAAC,cAAc,EAAE;MAC7C,QAAQ,EAAE,KAAK;MACf,KAAK,EAAE;KACR,CAAC;EACH;AACH;AAEA,OAAM,SAAU,mBAAmB,CAAC,KAAgB,EAAA;EAClD,IAAO,IAAI,GAAe,KAAK,CAAxB,IAAI;IAAE,SAAS,GAAI,KAAK,CAAlB,SAAS;EAAU,4CACV,uBAAuB;IAAA;EAAA;IAA7C,uDAA+C;MAAA,IAApC,OAAO;MAChB,IAAM,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;MAExC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;QAClB,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC;QACpC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,aAAa,CAAC,GAAG,MAAM,GAAG,aAAa,EAAE,IAAI,CAAC;OACzF,MAAM;QACL,IAAM,WAAW,GAAG,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC;QACpD,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,KAAK,CAAC;MACvD;;EACF;IAAA;EAAA;IAAA;EAAA;AACH;AAEA,SAAS,eAAe,CAAC,KAAgB,EAAE,QAA4B,EAAA;EACrE,IAAM,OAAO,GAAG,QAAQ,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;EAChD,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM;EAC3B,IAAM,cAAc,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC;EAEvD,IAAI,cAAc,EAAE;IAClB,IAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC;IAC5C,IAAM,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;IAEzC,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;MAChC,IAAM,IAAI,GAAG,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;MAC7D,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;QACxC;QACA,OAAO,MAAM;OACd,MAAM;QACL,OAAO,IAAI;MACZ;KACF,MAAM;MACL,OAAO,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC1D;GACF,MAAM,IAAI,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE;IACtD;IACA,OAAO,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;GAC1D,MAAM;IACL,IAAM,KAAI,GAAG,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC7D,OAAO,MAAM,CAAC,KAAI,CAAC,GAAG,KAAI,CAAC,IAAI,GAAG,KAAI;EACvC;AACH","sourceRoot":"","sourcesContent":["import { getPositionScaleChannel, getSizeChannel, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getViewConfigContinuousSize, getViewConfigDiscreteSize } from '../../config';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isStep } from '../../spec/base';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit } from '../split';\nimport { getSizeTypeFromLayoutSizeType } from './component';\nexport function parseLayerLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    parseNonUnitLayoutSizeForChannel(model, 'width');\n    parseNonUnitLayoutSizeForChannel(model, 'height');\n}\nexport function parseConcatLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.\n    const widthType = model.layout.columns === 1 ? 'width' : 'childWidth';\n    // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.\n    const heightType = model.layout.columns === undefined ? 'height' : 'childHeight';\n    parseNonUnitLayoutSizeForChannel(model, widthType);\n    parseNonUnitLayoutSizeForChannel(model, heightType);\n}\nexport function parseChildrenLayoutSize(model) {\n    for (const child of model.children) {\n        child.parseLayoutSize();\n    }\n}\n/**\n * Merge child layout size (width or height).\n */\nfunction parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {\n    var _a;\n    /*\n     * For concat, the parent width or height might not be the same as the children's shared height.\n     * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.\n     *\n     * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)\n     * while the sizeType represents the properties of the child.\n     */\n    const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\n    const channel = getPositionScaleChannel(sizeType);\n    const resolve = model.component.resolve;\n    const layoutSizeCmpt = model.component.layoutSize;\n    let mergedSize;\n    // Try to merge layout size\n    for (const child of model.children) {\n        const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n        const scaleResolve = (_a = resolve.scale[channel]) !== null && _a !== void 0 ? _a : defaultScaleResolve(channel, model);\n        if (scaleResolve === 'independent' && childSize.value === 'step') {\n            // Do not merge independent scales with range-step as their size depends\n            // on the scale domains, which can be different between scales.\n            mergedSize = undefined;\n            break;\n        }\n        if (mergedSize) {\n            if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n                // For independent scale, only merge if all the sizes are the same.\n                // If the values are different, abandon the merge!\n                mergedSize = undefined;\n                break;\n            }\n            mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n        }\n        else {\n            mergedSize = childSize;\n        }\n    }\n    if (mergedSize) {\n        // If merged, rename size and set size of all children.\n        for (const child of model.children) {\n            model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));\n            child.component.layoutSize.set(sizeType, 'merged', false);\n        }\n        layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);\n    }\n    else {\n        layoutSizeCmpt.setWithExplicit(layoutSizeType, {\n            explicit: false,\n            value: undefined\n        });\n    }\n}\nexport function parseUnitLayoutSize(model) {\n    const { size, component } = model;\n    for (const channel of POSITION_SCALE_CHANNELS) {\n        const sizeType = getSizeChannel(channel);\n        if (size[sizeType]) {\n            const specifiedSize = size[sizeType];\n            component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n        }\n        else {\n            const defaultSize = defaultUnitSize(model, sizeType);\n            component.layoutSize.set(sizeType, defaultSize, false);\n        }\n    }\n}\nfunction defaultUnitSize(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const config = model.config;\n    const scaleComponent = model.getScaleComponent(channel);\n    if (scaleComponent) {\n        const scaleType = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n        if (hasDiscreteDomain(scaleType)) {\n            const size = getViewConfigDiscreteSize(config.view, sizeType);\n            if (isVgRangeStep(range) || isStep(size)) {\n                // For discrete domain with range.step, use dynamic width/height\n                return 'step';\n            }\n            else {\n                return size;\n            }\n        }\n        else {\n            return getViewConfigContinuousSize(config.view, sizeType);\n        }\n    }\n    else if (model.hasProjection || model.mark === 'arc') {\n        // arc should use continuous size by default otherwise the pie is extremely small\n        return getViewConfigContinuousSize(config.view, sizeType);\n    }\n    else {\n        const size = getViewConfigDiscreteSize(config.view, sizeType);\n        return isStep(size) ? size.step : size;\n    }\n}\n//# sourceMappingURL=parse.js.map"]},"metadata":{},"sourceType":"module"}