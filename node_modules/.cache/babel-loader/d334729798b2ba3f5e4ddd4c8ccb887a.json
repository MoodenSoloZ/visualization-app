{"ast":null,"code":"import { isString } from 'vega-util';\nimport { initConfig } from '../config';\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { deepEqual } from '../util';\nimport { CoreNormalizer } from './core';\nimport { SelectionCompatibilityNormalizer } from './selectioncompat';\nimport { TopLevelSelectionsNormalizer } from './toplevelselection';\nexport function normalize(spec, config) {\n  if (config === undefined) {\n    config = initConfig(spec.config);\n  }\n  var normalizedSpec = normalizeGenericSpec(spec, config);\n  var width = spec.width,\n    height = spec.height;\n  var autosize = normalizeAutoSize(normalizedSpec, {\n    width: width,\n    height: height,\n    autosize: spec.autosize\n  }, config);\n  return Object.assign(Object.assign({}, normalizedSpec), autosize ? {\n    autosize: autosize\n  } : {});\n}\nvar coreNormalizer = new CoreNormalizer();\nvar selectionCompatNormalizer = new SelectionCompatibilityNormalizer();\nvar topLevelSelectionNormalizer = new TopLevelSelectionsNormalizer();\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n * And push top-level selection definitions down to unit specs.\n */\nfunction normalizeGenericSpec(spec) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var normParams = {\n    config: config\n  };\n  return topLevelSelectionNormalizer.map(coreNormalizer.map(selectionCompatNormalizer.map(spec, normParams), normParams), normParams);\n}\nfunction _normalizeAutoSize(autosize) {\n  return isString(autosize) ? {\n    type: autosize\n  } : autosize !== null && autosize !== void 0 ? autosize : {};\n}\n/**\n * Normalize autosize and deal with width or height == \"container\".\n */\nexport function normalizeAutoSize(spec, sizeInfo, config) {\n  var width = sizeInfo.width,\n    height = sizeInfo.height;\n  var isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);\n  var autosizeDefault = {};\n  if (!isFitCompatible) {\n    // If spec is not compatible with autosize == \"fit\", discard width/height == container\n    if (width == 'container') {\n      log.warn(log.message.containerSizeNonSingle('width'));\n      width = undefined;\n    }\n    if (height == 'container') {\n      log.warn(log.message.containerSizeNonSingle('height'));\n      height = undefined;\n    }\n  } else {\n    // Default autosize parameters to fit when width/height is \"container\"\n    if (width == 'container' && height == 'container') {\n      autosizeDefault.type = 'fit';\n      autosizeDefault.contains = 'padding';\n    } else if (width == 'container') {\n      autosizeDefault.type = 'fit-x';\n      autosizeDefault.contains = 'padding';\n    } else if (height == 'container') {\n      autosizeDefault.type = 'fit-y';\n      autosizeDefault.contains = 'padding';\n    }\n  }\n  var autosize = Object.assign(Object.assign(Object.assign({\n    type: 'pad'\n  }, autosizeDefault), config ? _normalizeAutoSize(config.autosize) : {}), _normalizeAutoSize(spec.autosize));\n  if (autosize.type === 'fit' && !isFitCompatible) {\n    log.warn(log.message.FIT_NON_SINGLE);\n    autosize.type = 'pad';\n  }\n  if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {\n    log.warn(log.message.containerSizeNotCompatibleWithAutosize('width'));\n  }\n  if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {\n    log.warn(log.message.containerSizeNotCompatibleWithAutosize('height'));\n  }\n  // Delete autosize property if it's Vega's default\n  if (deepEqual(autosize, {\n    type: 'pad'\n  })) {\n    return undefined;\n  }\n  return autosize;\n}","map":{"version":3,"sources":["../../../src/normalize/index.ts"],"names":[],"mappings":"AACA,SAAQ,QAAQ,QAAO,WAAW;AAElC,SAAgB,UAAU,QAAO,WAAW;AAC5C,OAAO,KAAK,GAAG,MAAM,QAAQ;AAC7B,SAEE,WAAW,EACX,UAAU,QAML,SAAS;AAEhB,SAAQ,SAAS,QAAO,SAAS;AAEjC,SAAQ,cAAc,QAAO,QAAQ;AACrC,SAAQ,gCAAgC,QAAO,mBAAmB;AAClE,SAAQ,4BAA4B,QAAO,qBAAqB;AAEhE,OAAM,SAAU,SAAS,CACvB,IAAqC,EACrC,MAA0B,EAAA;EAE1B,IAAI,MAAM,KAAK,SAAS,EAAE;IACxB,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;EACjC;EAED,IAAM,cAAc,GAAG,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC;EAEzD,IAAO,KAAK,GAAY,IAAI,CAArB,KAAK;IAAE,MAAM,GAAI,IAAI,CAAd,MAAM;EACpB,IAAM,QAAQ,GAAG,iBAAiB,CAAC,cAAc,EAAE;IAAC,KAAK,EAAL,KAAK;IAAE,MAAM,EAAN,MAAM;IAAE,QAAQ,EAAE,IAAI,CAAC;EAAQ,CAAC,EAAE,MAAM,CAAC;EAEpG,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,cAAc,CAAA,EACb,QAAQ,GAAG;IAAC,QAAQ,EAAR;EAAQ,CAAC,GAAG,CAAA,CAAE,CAAC;AAEnC;AAEA,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE;AAC3C,IAAM,yBAAyB,GAAG,IAAI,gCAAgC,EAAE;AACxE,IAAM,2BAA2B,GAAG,IAAI,4BAA4B,EAAE;AAEtE;;;AAGG;AACH,SAAS,oBAAoB,CAC3B,IAAkE,EACpC;EAAA,IAA9B,MAAA,uEAA4B,CAAA,CAAE;EAE9B,IAAM,UAAU,GAAG;IAAC,MAAM,EAAN;EAAM,CAAC;EAC3B,OAAO,2BAA2B,CAAC,GAAG,CACpC,cAAc,CAAC,GAAG,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,UAAU,CAAC,EAC/E,UAAU,CACX;AACH;AAEA,SAAS,kBAAkB,CAAC,QAAuC,EAAA;EACjE,OAAO,QAAQ,CAAC,QAAQ,CAAC,GAAG;IAAC,IAAI,EAAE;EAAQ,CAAC,GAAG,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAR,QAAQ,GAAI,CAAA,CAAE;AAC/D;AAEA;;AAEG;AACH,OAAM,SAAU,iBAAiB,CAC/B,IAA8B,EAC9B,QAAsE,EACtE,MAAe,EAAA;EAEf,IAAK,KAAK,GAAY,QAAQ,CAAzB,KAAK;IAAE,MAAM,GAAI,QAAQ,CAAlB,MAAM;EAElB,IAAM,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC;EAC7D,IAAM,eAAe,GAAmB,CAAA,CAAE;EAE1C,IAAI,CAAC,eAAe,EAAE;IACpB;IACA,IAAI,KAAK,IAAI,WAAW,EAAE;MACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;MACrD,KAAK,GAAG,SAAS;IAClB;IACD,IAAI,MAAM,IAAI,WAAW,EAAE;MACzB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;MACtD,MAAM,GAAG,SAAS;IACnB;GACF,MAAM;IACL;IACA,IAAI,KAAK,IAAI,WAAW,IAAI,MAAM,IAAI,WAAW,EAAE;MACjD,eAAe,CAAC,IAAI,GAAG,KAAK;MAC5B,eAAe,CAAC,QAAQ,GAAG,SAAS;KACrC,MAAM,IAAI,KAAK,IAAI,WAAW,EAAE;MAC/B,eAAe,CAAC,IAAI,GAAG,OAAO;MAC9B,eAAe,CAAC,QAAQ,GAAG,SAAS;KACrC,MAAM,IAAI,MAAM,IAAI,WAAW,EAAE;MAChC,eAAe,CAAC,IAAI,GAAG,OAAO;MAC9B,eAAe,CAAC,QAAQ,GAAG,SAAS;IACrC;EACF;EAED,IAAM,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;IACZ,IAAI,EAAE;EAAK,CAAA,EACR,eAAe,CAAA,EACd,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,EACnD,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CACrC;EAED,IAAI,QAAQ,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC,eAAe,EAAE;IAC/C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC;IACpC,QAAQ,CAAC,IAAI,GAAG,KAAK;EACtB;EAED,IAAI,KAAK,IAAI,WAAW,IAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,KAAK,IAAI,QAAQ,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE;IACjF,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sCAAsC,CAAC,OAAO,CAAC,CAAC;EACtE;EACD,IAAI,MAAM,IAAI,WAAW,IAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,KAAK,IAAI,QAAQ,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE;IAClF,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sCAAsC,CAAC,QAAQ,CAAC,CAAC;EACvE;EAED;EACA,IAAI,SAAS,CAAC,QAAQ,EAAE;IAAC,IAAI,EAAE;EAAK,CAAC,CAAC,EAAE;IACtC,OAAO,SAAS;EACjB;EAED,OAAO,QAAQ;AACjB","sourceRoot":"","sourcesContent":["import { isString } from 'vega-util';\nimport { initConfig } from '../config';\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { deepEqual } from '../util';\nimport { CoreNormalizer } from './core';\nimport { SelectionCompatibilityNormalizer } from './selectioncompat';\nimport { TopLevelSelectionsNormalizer } from './toplevelselection';\nexport function normalize(spec, config) {\n    if (config === undefined) {\n        config = initConfig(spec.config);\n    }\n    const normalizedSpec = normalizeGenericSpec(spec, config);\n    const { width, height } = spec;\n    const autosize = normalizeAutoSize(normalizedSpec, { width, height, autosize: spec.autosize }, config);\n    return Object.assign(Object.assign({}, normalizedSpec), (autosize ? { autosize } : {}));\n}\nconst coreNormalizer = new CoreNormalizer();\nconst selectionCompatNormalizer = new SelectionCompatibilityNormalizer();\nconst topLevelSelectionNormalizer = new TopLevelSelectionsNormalizer();\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n * And push top-level selection definitions down to unit specs.\n */\nfunction normalizeGenericSpec(spec, config = {}) {\n    const normParams = { config };\n    return topLevelSelectionNormalizer.map(coreNormalizer.map(selectionCompatNormalizer.map(spec, normParams), normParams), normParams);\n}\nfunction _normalizeAutoSize(autosize) {\n    return isString(autosize) ? { type: autosize } : autosize !== null && autosize !== void 0 ? autosize : {};\n}\n/**\n * Normalize autosize and deal with width or height == \"container\".\n */\nexport function normalizeAutoSize(spec, sizeInfo, config) {\n    let { width, height } = sizeInfo;\n    const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);\n    const autosizeDefault = {};\n    if (!isFitCompatible) {\n        // If spec is not compatible with autosize == \"fit\", discard width/height == container\n        if (width == 'container') {\n            log.warn(log.message.containerSizeNonSingle('width'));\n            width = undefined;\n        }\n        if (height == 'container') {\n            log.warn(log.message.containerSizeNonSingle('height'));\n            height = undefined;\n        }\n    }\n    else {\n        // Default autosize parameters to fit when width/height is \"container\"\n        if (width == 'container' && height == 'container') {\n            autosizeDefault.type = 'fit';\n            autosizeDefault.contains = 'padding';\n        }\n        else if (width == 'container') {\n            autosizeDefault.type = 'fit-x';\n            autosizeDefault.contains = 'padding';\n        }\n        else if (height == 'container') {\n            autosizeDefault.type = 'fit-y';\n            autosizeDefault.contains = 'padding';\n        }\n    }\n    const autosize = Object.assign(Object.assign(Object.assign({ type: 'pad' }, autosizeDefault), (config ? _normalizeAutoSize(config.autosize) : {})), _normalizeAutoSize(spec.autosize));\n    if (autosize.type === 'fit' && !isFitCompatible) {\n        log.warn(log.message.FIT_NON_SINGLE);\n        autosize.type = 'pad';\n    }\n    if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {\n        log.warn(log.message.containerSizeNotCompatibleWithAutosize('width'));\n    }\n    if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {\n        log.warn(log.message.containerSizeNotCompatibleWithAutosize('height'));\n    }\n    // Delete autosize property if it's Vega's default\n    if (deepEqual(autosize, { type: 'pad' })) {\n        return undefined;\n    }\n    return autosize;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}