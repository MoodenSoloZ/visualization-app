{"ast":null,"code":"import { isFieldDef, vgField } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport * as encode from './encode';\nexport var geoshape = {\n  vgMark: 'shape',\n  encodeEntry: function encodeEntry(model) {\n    return Object.assign({}, encode.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      size: 'ignore',\n      orient: 'ignore',\n      theta: 'ignore'\n    }));\n  },\n  postEncodingTransform: function postEncodingTransform(model) {\n    var encoding = model.encoding;\n    var shapeDef = encoding.shape;\n    var transform = Object.assign({\n      type: 'geoshape',\n      projection: model.projectionName()\n    }, shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {\n      field: vgField(shapeDef, {\n        expr: 'datum'\n      })\n    } : {});\n    return [transform];\n  }\n};","map":{"version":3,"sources":["../../../../src/compile/mark/geoshape.ts"],"names":[],"mappings":"AACA,SAAQ,UAAU,EAAE,OAAO,QAAO,kBAAkB;AACpD,SAAQ,OAAO,QAAO,YAAY;AAIlC,OAAO,KAAK,MAAM,MAAM,UAAU;AAElC,OAAO,IAAM,QAAQ,GAAiB;EACpC,MAAM,EAAE,OAAO;EACf,WAAW,EAAE,qBAAC,KAAgB,EAAI;IAChC,OAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE;MAC/B,KAAK,EAAE,QAAQ;MACf,QAAQ,EAAE,QAAQ;MAClB,KAAK,EAAE,SAAS;MAChB,IAAI,EAAE,QAAQ;MACd,MAAM,EAAE,QAAQ;MAChB,KAAK,EAAE;KACR,CAAC,CAAA;EAEN,CAAC;EACD,qBAAqB,EAAE,+BAAC,KAAgB,EAA+B;IACrE,IAAO,QAAQ,GAAI,KAAK,CAAjB,QAAQ;IACf,IAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK;IAE/B,IAAM,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA;MACb,IAAI,EAAE,UAAU;MAChB,UAAU,EAAE,KAAK,CAAC,cAAc;IAAE,CAAA,EAE9B,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,GAC7D;MAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,EAAE;QAAC,IAAI,EAAE;MAAO,CAAC;IAAC,CAAC,GAC3C,CAAA,CAAE,CACP;IACD,OAAO,CAAC,SAAS,CAAC;EACpB;CACD","sourceRoot":"","sourcesContent":["import { isFieldDef, vgField } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport * as encode from './encode';\nexport const geoshape = {\n    vgMark: 'shape',\n    encodeEntry: (model) => {\n        return Object.assign({}, encode.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            size: 'ignore',\n            orient: 'ignore',\n            theta: 'ignore'\n        }));\n    },\n    postEncodingTransform: (model) => {\n        const { encoding } = model;\n        const shapeDef = encoding.shape;\n        const transform = Object.assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON\n            ? { field: vgField(shapeDef, { expr: 'datum' }) }\n            : {}));\n        return [transform];\n    }\n};\n//# sourceMappingURL=geoshape.js.map"]},"metadata":{},"sourceType":"module"}