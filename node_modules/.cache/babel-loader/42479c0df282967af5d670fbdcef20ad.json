{"ast":null,"code":"import _construct from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// DateTime definition object\nimport { isNumber, isObject } from 'vega-util';\nimport * as log from './log';\nimport { TIMEUNIT_PARTS } from './timeunit';\nimport { duplicate, isNumeric, keys } from './util';\nexport function isDateTime(o) {\n  if (o && isObject(o)) {\n    var _iterator = _createForOfIteratorHelper(TIMEUNIT_PARTS),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n        if (part in o) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return false;\n}\nexport var MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport var SHORT_MONTHS = MONTHS.map(function (m) {\n  return m.substr(0, 3);\n});\nexport var DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport var SHORT_DAYS = DAYS.map(function (d) {\n  return d.substr(0, 3);\n});\nfunction normalizeQuarter(q) {\n  if (isNumeric(q)) {\n    q = +q;\n  }\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    }\n    // We accept 1-based quarter, so need to readjust to 0-based quarter\n    return q - 1;\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\nfunction normalizeMonth(m) {\n  if (isNumeric(m)) {\n    m = +m;\n  }\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return m - 1;\n  } else {\n    var lowerM = m.toLowerCase();\n    var monthIndex = MONTHS.indexOf(lowerM);\n    if (monthIndex !== -1) {\n      return monthIndex; // 0 for january, ...\n    }\n\n    var shortM = lowerM.substr(0, 3);\n    var shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex;\n    }\n    // Invalid month\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\nfunction normalizeDay(d) {\n  if (isNumeric(d)) {\n    d = +d;\n  }\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7;\n  } else {\n    var lowerD = d.toLowerCase();\n    var dayIndex = DAYS.indexOf(lowerD);\n    if (dayIndex !== -1) {\n      return dayIndex; // 0 for january, ...\n    }\n\n    var shortD = lowerD.substr(0, 3);\n    var shortDayIndex = SHORT_DAYS.indexOf(shortD);\n    if (shortDayIndex !== -1) {\n      return shortDayIndex;\n    }\n    // Invalid day\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\nfunction dateTimeParts(d, normalize) {\n  var parts = [];\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n  if (d.year !== undefined) {\n    parts.push(d.year);\n  } else {\n    // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n    // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n    parts.push(2012);\n  }\n  if (d.month !== undefined) {\n    var month = normalize ? normalizeMonth(d.month) : d.month;\n    parts.push(month);\n  } else if (d.quarter !== undefined) {\n    var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    parts.push(isNumber(quarter) ? quarter * 3 : \"\".concat(quarter, \"*3\"));\n  } else {\n    parts.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    parts.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    var day = normalize ? normalizeDay(d.day) : d.day;\n    parts.push(isNumber(day) ? day + 1 : \"\".concat(day, \"+1\"));\n  } else {\n    parts.push(1); // Date starts at 1 in JS\n  }\n  // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n  for (var _i = 0, _arr = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _arr.length; _i++) {\n    var timeUnit = _arr[_i];\n    var unit = d[timeUnit];\n    parts.push(typeof unit === 'undefined' ? 0 : unit);\n  }\n  return parts;\n}\n/**\n * Return Vega expression for a date time.\n *\n * @param d the date time.\n * @returns the Vega expression.\n */\nexport function dateTimeToExpr(d) {\n  var parts = dateTimeParts(d, true);\n  var string = parts.join(', ');\n  if (d.utc) {\n    return \"utc(\".concat(string, \")\");\n  } else {\n    return \"datetime(\".concat(string, \")\");\n  }\n}\n/**\n * Return Vega expression for a date time expression.\n *\n * @param d the internal date time object with expression.\n * @returns the Vega expression.\n */\nexport function dateTimeExprToExpr(d) {\n  var parts = dateTimeParts(d, false);\n  var string = parts.join(', ');\n  if (d.utc) {\n    return \"utc(\".concat(string, \")\");\n  } else {\n    return \"datetime(\".concat(string, \")\");\n  }\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\nexport function dateTimeToTimestamp(d) {\n  var parts = dateTimeParts(d, true);\n  if (d.utc) {\n    return +new Date(Date.UTC.apply(Date, _toConsumableArray(parts)));\n  } else {\n    return +_construct(Date, _toConsumableArray(parts));\n  }\n}","map":{"version":3,"sources":["../../src/datetime.ts"],"names":[],"mappings":";;;AAAA;AAEA,SAAQ,QAAQ,EAAE,QAAQ,QAAO,WAAW;AAC5C,OAAO,KAAK,GAAG,MAAM,OAAO;AAC5B,SAAQ,cAAc,QAAO,YAAY;AACzC,SAAQ,SAAS,EAAE,SAAS,EAAE,IAAI,QAAO,QAAQ;AAuHjD,OAAM,SAAU,UAAU,CAAC,CAAM,EAAA;EAC/B,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;IAAA,2CACD,cAAc;MAAA;IAAA;MAAjC,oDAAmC;QAAA,IAAxB,IAAI;QACb,IAAI,IAAI,IAAI,CAAC,EAAE;UACb,OAAO,IAAI;QACZ;;IACF;MAAA;IAAA;MAAA;IAAA;EACF;EACD,OAAO,KAAK;AACd;AAEA,OAAO,IAAM,MAAM,GAAG,CACpB,SAAS,EACT,UAAU,EACV,OAAO,EACP,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,QAAQ,EACR,WAAW,EACX,SAAS,EACT,UAAU,EACV,UAAU,CACX;AACD,OAAO,IAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC;EAAA,OAAI,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAAA,EAAC;AAE3D,OAAO,IAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;AAClG,OAAO,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,CAAC;EAAA,OAAI,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAAA,EAAC;AAEvD,SAAS,gBAAgB,CAAC,CAAkB,EAAA;EAC1C,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;IAChB,CAAC,GAAG,CAAC,CAAC;EACP;EAED,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;IACf,IAAI,CAAC,GAAG,CAAC,EAAE;MACT,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACpD;IACD;IACA,OAAO,CAAC,GAAG,CAAC;GACb,MAAM;IACL;IACA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;EAC3D;AACH;AAEA,SAAS,cAAc,CAAC,CAAkB,EAAA;EACxC,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;IAChB,CAAC,GAAG,CAAC,CAAC;EACP;EAED,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;IACf;IACA,OAAO,CAAC,GAAG,CAAC;GACb,MAAM;IACL,IAAM,MAAM,GAAG,CAAC,CAAC,WAAW,EAAE;IAC9B,IAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;MACrB,OAAO,UAAU,CAAC,CAAC;IACpB;;IACD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAClC,IAAM,eAAe,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;IACpD,IAAI,eAAe,KAAK,CAAC,CAAC,EAAE;MAC1B,OAAO,eAAe;IACvB;IAED;IACA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;EACzD;AACH;AAEA,SAAS,YAAY,CAAC,CAAkB,EAAA;EACtC,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;IAChB,CAAC,GAAG,CAAC,CAAC;EACP;EAED,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;IACf;IACA;IACA,OAAO,CAAC,GAAG,CAAC;GACb,MAAM;IACL,IAAM,MAAM,GAAG,CAAC,CAAC,WAAW,EAAE;IAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACrC,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;MACnB,OAAO,QAAQ,CAAC,CAAC;IAClB;;IACD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAClC,IAAM,aAAa,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;IAChD,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;MACxB,OAAO,aAAa;IACrB;IACD;IACA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EACvD;AACH;AAEA;;;;AAIG;AACH,SAAS,aAAa,CAAC,CAA0B,EAAE,SAAkB,EAAA;EACnE,IAAM,KAAK,GAAwB,EAAE;EAErC,IAAI,SAAS,IAAI,CAAC,CAAC,GAAG,KAAK,SAAS,EAAE;IACpC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;MACtB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;MAChB,OAAO,CAAC,CAAC,GAAG;IACb;EACF;EAED,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;IACxB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;GACnB,MAAM;IACL;IACA;IACA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;EACjB;EAED,IAAI,CAAC,CAAC,KAAK,KAAK,SAAS,EAAE;IACzB,IAAM,KAAK,GAAG,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK;IAC3D,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;GAClB,MAAM,IAAI,CAAC,CAAC,OAAO,KAAK,SAAS,EAAE;IAClC,IAAM,OAAO,GAAG,SAAS,GAAG,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO;IACnE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,CAAC,aAAM,OAAO,OAAI,CAAC;GAC7D,MAAM;IACL,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB;;EAED,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;IACxB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;GACnB,MAAM,IAAI,CAAC,CAAC,GAAG,KAAK,SAAS,EAAE;IAC9B;IACA;IACA,IAAM,GAAG,GAAG,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG;IACnD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,aAAM,GAAG,OAAI,CAAC;GACjD,MAAM;IACL,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB;EAED;EACA;EACA,wBAAuB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,CAAU,0BAAE;IAA5E,IAAM,QAAQ;IACjB,IAAM,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC;IACxB,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG,IAAI,CAAC;EACnD;EAED,OAAO,KAAK;AACd;AAEA;;;;;AAKG;AACH,OAAM,SAAU,cAAc,CAAC,CAAW,EAAA;EACxC,IAAM,KAAK,GAAwB,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC;EAEzD,IAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;EAE/B,IAAI,CAAC,CAAC,GAAG,EAAE;IACT,qBAAc,MAAM;GACrB,MAAM;IACL,0BAAmB,MAAM;EAC1B;AACH;AAEA;;;;;AAKG;AACH,OAAM,SAAU,kBAAkB,CAAC,CAAe,EAAA;EAChD,IAAM,KAAK,GAAwB,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC;EAE1D,IAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;EAE/B,IAAI,CAAC,CAAC,GAAG,EAAE;IACT,qBAAc,MAAM;GACrB,MAAM;IACL,0BAAmB,MAAM;EAC1B;AACH;AAEA;;;AAGG;AACH,OAAM,SAAU,mBAAmB,CAAC,CAAW,EAAA;EAC7C,IAAM,KAAK,GAAwB,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC;EAEzD,IAAI,CAAC,CAAC,GAAG,EAAE;IACT,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,OAAR,IAAI,qBAAS,KAAoB,EAAC,CAAC;GACrD,MAAM;IACL,OAAO,YAAK,IAAI,qBAAK,KAAe,EAAC;EACtC;AACH","sourceRoot":"","sourcesContent":["// DateTime definition object\nimport { isNumber, isObject } from 'vega-util';\nimport * as log from './log';\nimport { TIMEUNIT_PARTS } from './timeunit';\nimport { duplicate, isNumeric, keys } from './util';\nexport function isDateTime(o) {\n    if (o && isObject(o)) {\n        for (const part of TIMEUNIT_PARTS) {\n            if (part in o) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport const MONTHS = [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\nfunction normalizeQuarter(q) {\n    if (isNumeric(q)) {\n        q = +q;\n    }\n    if (isNumber(q)) {\n        if (q > 4) {\n            log.warn(log.message.invalidTimeUnit('quarter', q));\n        }\n        // We accept 1-based quarter, so need to readjust to 0-based quarter\n        return q - 1;\n    }\n    else {\n        // Invalid quarter\n        throw new Error(log.message.invalidTimeUnit('quarter', q));\n    }\n}\nfunction normalizeMonth(m) {\n    if (isNumeric(m)) {\n        m = +m;\n    }\n    if (isNumber(m)) {\n        // We accept 1-based month, so need to readjust to 0-based month\n        return m - 1;\n    }\n    else {\n        const lowerM = m.toLowerCase();\n        const monthIndex = MONTHS.indexOf(lowerM);\n        if (monthIndex !== -1) {\n            return monthIndex; // 0 for january, ...\n        }\n        const shortM = lowerM.substr(0, 3);\n        const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n        if (shortMonthIndex !== -1) {\n            return shortMonthIndex;\n        }\n        // Invalid month\n        throw new Error(log.message.invalidTimeUnit('month', m));\n    }\n}\nfunction normalizeDay(d) {\n    if (isNumeric(d)) {\n        d = +d;\n    }\n    if (isNumber(d)) {\n        // mod so that this can be both 0-based where 0 = sunday\n        // and 1-based where 7=sunday\n        return d % 7;\n    }\n    else {\n        const lowerD = d.toLowerCase();\n        const dayIndex = DAYS.indexOf(lowerD);\n        if (dayIndex !== -1) {\n            return dayIndex; // 0 for january, ...\n        }\n        const shortD = lowerD.substr(0, 3);\n        const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n        if (shortDayIndex !== -1) {\n            return shortDayIndex;\n        }\n        // Invalid day\n        throw new Error(log.message.invalidTimeUnit('day', d));\n    }\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\nfunction dateTimeParts(d, normalize) {\n    const parts = [];\n    if (normalize && d.day !== undefined) {\n        if (keys(d).length > 1) {\n            log.warn(log.message.droppedDay(d));\n            d = duplicate(d);\n            delete d.day;\n        }\n    }\n    if (d.year !== undefined) {\n        parts.push(d.year);\n    }\n    else {\n        // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n        // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n        parts.push(2012);\n    }\n    if (d.month !== undefined) {\n        const month = normalize ? normalizeMonth(d.month) : d.month;\n        parts.push(month);\n    }\n    else if (d.quarter !== undefined) {\n        const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n        parts.push(isNumber(quarter) ? quarter * 3 : `${quarter}*3`);\n    }\n    else {\n        parts.push(0); // months start at zero in JS\n    }\n    if (d.date !== undefined) {\n        parts.push(d.date);\n    }\n    else if (d.day !== undefined) {\n        // HACK: Day only works as a standalone unit\n        // This is only correct because we always set year to 2006 for day\n        const day = normalize ? normalizeDay(d.day) : d.day;\n        parts.push(isNumber(day) ? day + 1 : `${day}+1`);\n    }\n    else {\n        parts.push(1); // Date starts at 1 in JS\n    }\n    // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n    for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n        const unit = d[timeUnit];\n        parts.push(typeof unit === 'undefined' ? 0 : unit);\n    }\n    return parts;\n}\n/**\n * Return Vega expression for a date time.\n *\n * @param d the date time.\n * @returns the Vega expression.\n */\nexport function dateTimeToExpr(d) {\n    const parts = dateTimeParts(d, true);\n    const string = parts.join(', ');\n    if (d.utc) {\n        return `utc(${string})`;\n    }\n    else {\n        return `datetime(${string})`;\n    }\n}\n/**\n * Return Vega expression for a date time expression.\n *\n * @param d the internal date time object with expression.\n * @returns the Vega expression.\n */\nexport function dateTimeExprToExpr(d) {\n    const parts = dateTimeParts(d, false);\n    const string = parts.join(', ');\n    if (d.utc) {\n        return `utc(${string})`;\n    }\n    else {\n        return `datetime(${string})`;\n    }\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\nexport function dateTimeToTimestamp(d) {\n    const parts = dateTimeParts(d, true);\n    if (d.utc) {\n        return +new Date(Date.UTC(...parts));\n    }\n    else {\n        return +new Date(...parts);\n    }\n}\n//# sourceMappingURL=datetime.js.map"]},"metadata":{},"sourceType":"module"}