{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { vgField } from '../../channeldef';\nimport { duplicate, hash as _hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport var JoinAggregateTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(JoinAggregateTransformNode, _DataFlowNode);\n  var _super = _createSuper(JoinAggregateTransformNode);\n  function JoinAggregateTransformNode(parent, transform) {\n    var _this;\n    _classCallCheck(this, JoinAggregateTransformNode);\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    return _this;\n  }\n  _createClass(JoinAggregateTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"addDimensions\",\n    value: function addDimensions(fields) {\n      this.transform.groupby = unique(this.transform.groupby.concat(fields), function (d) {\n        return d;\n      });\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var out = new Set();\n      if (this.transform.groupby) {\n        this.transform.groupby.forEach(out.add, out);\n      }\n      this.transform.joinaggregate.map(function (w) {\n        return w.field;\n      }).filter(function (f) {\n        return f !== undefined;\n      }).forEach(out.add, out);\n      return out;\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n  }, {\n    key: \"getDefaultName\",\n    value: function getDefaultName(joinAggregateFieldDef) {\n      var _a;\n      return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"JoinAggregateTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var fields = [];\n      var ops = [];\n      var as = [];\n      var _iterator = _createForOfIteratorHelper(this.transform.joinaggregate),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var joinaggregate = _step.value;\n          ops.push(joinaggregate.op);\n          as.push(this.getDefaultName(joinaggregate));\n          fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var groupby = this.transform.groupby;\n      return Object.assign({\n        type: 'joinaggregate',\n        as: as,\n        ops: ops,\n        fields: fields\n      }, groupby !== undefined ? {\n        groupby: groupby\n      } : {});\n    }\n  }]);\n  return JoinAggregateTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/joinaggregate.ts"],"names":[],"mappings":";;;;;AACA,SAAQ,OAAO,QAAO,kBAAkB;AAExC,SAAQ,SAAS,EAAE,IAAI,IAAJ,KAAI,QAAO,YAAY;AAG1C,SAAQ,MAAM,QAAO,YAAY;AACjC,SAAQ,YAAY,QAAO,YAAY;AAEvC;;AAEG;AACH,WAAa,0BAA2B;EAAA;EAAA;EAKtC,oCAAY,MAAoB,EAAmB,SAAiC,EAAA;IAAA;IAAA;IAClF,0BAAM,MAAM;IADqC,MAAA,SAAS,GAAT,SAAS;IAAwB;EAEpF;EAAC;IAAA;IAAA,OANM,iBAAK;MACV,OAAO,IAAI,0BAA0B,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxE;EAAC;IAAA;IAAA,OAMM,uBAAc,MAAgB,EAAA;MACnC,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,UAAA,CAAC;QAAA,OAAI,CAAC;MAAA,EAAC;IAChF;EAAC;IAAA;IAAA,OAEM,2BAAe;MACpB,IAAM,GAAG,GAAG,IAAI,GAAG,EAAU;MAE7B,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;QAC1B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;MAC7C;MACD,IAAI,CAAC,SAAS,CAAC,aAAa,CACzB,GAAG,CAAC,UAAA,CAAC;QAAA,OAAI,CAAC,CAAC,KAAK;MAAA,EAAC,CACjB,MAAM,CAAC,UAAA,CAAC;QAAA,OAAI,CAAC,KAAK,SAAS;MAAA,EAAC,CAC5B,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;MAExB,OAAO,GAAG;IACZ;EAAC;IAAA;IAAA,OAEM,0BAAc;MACnB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvE;EAAC;IAAA;IAAA,OAEO,wBAAe,qBAA4C,EAAA;;MACjE,OAAO,CAAA,EAAA,GAAA,qBAAqB,CAAC,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,CAAC,qBAAqB,CAAC;IACnE;EAAC;IAAA;IAAA,OAEM,gBAAI;MACT,wCAAiC,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IACvD;EAAC;IAAA;IAAA,OAEM,oBAAQ;MACb,IAAM,MAAM,GAAa,EAAE;MAC3B,IAAM,GAAG,GAAkB,EAAE;MAC7B,IAAM,EAAE,GAAa,EAAE;MAAC,2CACI,IAAI,CAAC,SAAS,CAAC,aAAa;QAAA;MAAA;QAAxD,oDAA0D;UAAA,IAA/C,aAAa;UACtB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;UAC1B,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;UAC3C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,SAAS,GAAG,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC;;MAC5E;QAAA;MAAA;QAAA;MAAA;MAED,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO;MAEtC,OAAA,MAAA,CAAA,MAAA,CAAA;QACE,IAAI,EAAE,eAAe;QACrB,EAAE,EAAF,EAAE;QACF,GAAG,EAAH,GAAG;QACH,MAAM,EAAN;MAAM,CAAA,EACF,OAAO,KAAK,SAAS,GAAG;QAAC,OAAO,EAAP;MAAO,CAAC,GAAG,CAAA,CAAE,CAAC;IAE/C;EAAC;EAAA;AAAA,EA1D6C,YAAY","sourceRoot":"","sourcesContent":["import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        if (this.transform.groupby) {\n            this.transform.groupby.forEach(out.add, out);\n        }\n        this.transform.joinaggregate\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(out.add, out);\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n    getDefaultName(joinAggregateFieldDef) {\n        var _a;\n        return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n    }\n    hash() {\n        return `JoinAggregateTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        for (const joinaggregate of this.transform.joinaggregate) {\n            ops.push(joinaggregate.op);\n            as.push(this.getDefaultName(joinaggregate));\n            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n        const groupby = this.transform.groupby;\n        return Object.assign({ type: 'joinaggregate', as,\n            ops,\n            fields }, (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=joinaggregate.js.map"]},"metadata":{},"sourceType":"module"}