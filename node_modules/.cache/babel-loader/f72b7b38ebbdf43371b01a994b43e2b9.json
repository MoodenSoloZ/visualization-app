{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { extend, identity, field, hasOwnProperty, extentIndex, inherits, array, accessorName, error, accessorFields, accessor, toNumber, merge, compare, truthy, extent, span, fastmap, isArray, key, ascending, peek, zero, constant } from 'vega-util';\nimport { tupleid, Transform, replace, ingest, stableCompare, Operator, derive, rederive } from 'vega-dataflow';\nimport { quartiles, bootstrapCI, bin, randomKDE, randomMixture, randomNormal, randomLogNormal, randomUniform, sampleCurve, dotbin, quantiles, random } from 'vega-statistics';\nimport { median, mean, min, max, range, bisector } from 'd3-array';\nimport { utcInterval, timeInterval, timeBin, timeUnits, utcFloor, timeFloor, TIME_UNITS } from 'vega-time';\nfunction multikey(f) {\n  return function (x) {\n    var n = f.length;\n    var i = 1,\n      k = String(f[0](x));\n    for (; i < n; ++i) {\n      k += '|' + f[i](x);\n    }\n    return k;\n  };\n}\nfunction groupkey(fields) {\n  return !fields || !fields.length ? function () {\n    return '';\n  } : fields.length === 1 ? fields[0] : multikey(fields);\n}\nfunction measureName(op, field, as) {\n  return as || op + (!field ? '' : '_' + field);\n}\nvar noop = function noop() {};\nvar base_op = {\n  init: noop,\n  add: noop,\n  rem: noop,\n  idx: 0\n};\nvar AggregateOps = {\n  values: {\n    init: function init(m) {\n      return m.cell.store = true;\n    },\n    value: function value(m) {\n      return m.cell.data.values();\n    },\n    idx: -1\n  },\n  count: {\n    value: function value(m) {\n      return m.cell.num;\n    }\n  },\n  __count__: {\n    value: function value(m) {\n      return m.missing + m.valid;\n    }\n  },\n  missing: {\n    value: function value(m) {\n      return m.missing;\n    }\n  },\n  valid: {\n    value: function value(m) {\n      return m.valid;\n    }\n  },\n  sum: {\n    init: function init(m) {\n      return m.sum = 0;\n    },\n    value: function value(m) {\n      return m.sum;\n    },\n    add: function add(m, v) {\n      return m.sum += +v;\n    },\n    rem: function rem(m, v) {\n      return m.sum -= v;\n    }\n  },\n  product: {\n    init: function init(m) {\n      return m.product = 1;\n    },\n    value: function value(m) {\n      return m.valid ? m.product : undefined;\n    },\n    add: function add(m, v) {\n      return m.product *= v;\n    },\n    rem: function rem(m, v) {\n      return m.product /= v;\n    }\n  },\n  mean: {\n    init: function init(m) {\n      return m.mean = 0;\n    },\n    value: function value(m) {\n      return m.valid ? m.mean : undefined;\n    },\n    add: function add(m, v) {\n      return m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid;\n    },\n    rem: function rem(m, v) {\n      return m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean;\n    }\n  },\n  average: {\n    value: function value(m) {\n      return m.valid ? m.mean : undefined;\n    },\n    req: ['mean'],\n    idx: 1\n  },\n  variance: {\n    init: function init(m) {\n      return m.dev = 0;\n    },\n    value: function value(m) {\n      return m.valid > 1 ? m.dev / (m.valid - 1) : undefined;\n    },\n    add: function add(m, v) {\n      return m.dev += m.mean_d * (v - m.mean);\n    },\n    rem: function rem(m, v) {\n      return m.dev -= m.mean_d * (v - m.mean);\n    },\n    req: ['mean'],\n    idx: 1\n  },\n  variancep: {\n    value: function value(m) {\n      return m.valid > 1 ? m.dev / m.valid : undefined;\n    },\n    req: ['variance'],\n    idx: 2\n  },\n  stdev: {\n    value: function value(m) {\n      return m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined;\n    },\n    req: ['variance'],\n    idx: 2\n  },\n  stdevp: {\n    value: function value(m) {\n      return m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined;\n    },\n    req: ['variance'],\n    idx: 2\n  },\n  stderr: {\n    value: function value(m) {\n      return m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined;\n    },\n    req: ['variance'],\n    idx: 2\n  },\n  distinct: {\n    value: function value(m) {\n      return m.cell.data.distinct(m.get);\n    },\n    req: ['values'],\n    idx: 3\n  },\n  ci0: {\n    value: function value(m) {\n      return m.cell.data.ci0(m.get);\n    },\n    req: ['values'],\n    idx: 3\n  },\n  ci1: {\n    value: function value(m) {\n      return m.cell.data.ci1(m.get);\n    },\n    req: ['values'],\n    idx: 3\n  },\n  median: {\n    value: function value(m) {\n      return m.cell.data.q2(m.get);\n    },\n    req: ['values'],\n    idx: 3\n  },\n  q1: {\n    value: function value(m) {\n      return m.cell.data.q1(m.get);\n    },\n    req: ['values'],\n    idx: 3\n  },\n  q3: {\n    value: function value(m) {\n      return m.cell.data.q3(m.get);\n    },\n    req: ['values'],\n    idx: 3\n  },\n  min: {\n    init: function init(m) {\n      return m.min = undefined;\n    },\n    value: function value(m) {\n      return m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min;\n    },\n    add: function add(m, v) {\n      if (v < m.min || m.min === undefined) m.min = v;\n    },\n    rem: function rem(m, v) {\n      if (v <= m.min) m.min = NaN;\n    },\n    req: ['values'],\n    idx: 4\n  },\n  max: {\n    init: function init(m) {\n      return m.max = undefined;\n    },\n    value: function value(m) {\n      return m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max;\n    },\n    add: function add(m, v) {\n      if (v > m.max || m.max === undefined) m.max = v;\n    },\n    rem: function rem(m, v) {\n      if (v >= m.max) m.max = NaN;\n    },\n    req: ['values'],\n    idx: 4\n  },\n  argmin: {\n    init: function init(m) {\n      return m.argmin = undefined;\n    },\n    value: function value(m) {\n      return m.argmin || m.cell.data.argmin(m.get);\n    },\n    add: function add(m, v, t) {\n      if (v < m.min) m.argmin = t;\n    },\n    rem: function rem(m, v) {\n      if (v <= m.min) m.argmin = undefined;\n    },\n    req: ['min', 'values'],\n    idx: 3\n  },\n  argmax: {\n    init: function init(m) {\n      return m.argmax = undefined;\n    },\n    value: function value(m) {\n      return m.argmax || m.cell.data.argmax(m.get);\n    },\n    add: function add(m, v, t) {\n      if (v > m.max) m.argmax = t;\n    },\n    rem: function rem(m, v) {\n      if (v >= m.max) m.argmax = undefined;\n    },\n    req: ['max', 'values'],\n    idx: 3\n  }\n};\nvar ValidAggregateOps = Object.keys(AggregateOps);\nfunction measure(key, value) {\n  return function (out) {\n    return extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  };\n}\nValidAggregateOps.forEach(function (key) {\n  AggregateOps[key] = measure(key, AggregateOps[key]);\n});\nfunction createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\nfunction resolve(agg) {\n  var map = {};\n  agg.forEach(function (a) {\n    return map[a.name] = a;\n  });\n  var getreqs = function getreqs(a) {\n    if (!a.req) return;\n    a.req.forEach(function (key) {\n      if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n    });\n  };\n  agg.forEach(getreqs);\n  return Object.values(map).sort(compareIndex);\n}\nfunction init() {\n  var _this = this;\n  this.valid = 0;\n  this.missing = 0;\n  this._ops.forEach(function (op) {\n    return op.init(_this);\n  });\n}\nfunction add(v, t) {\n  var _this2 = this;\n  if (v == null || v === '') {\n    ++this.missing;\n    return;\n  }\n  if (v !== v) return;\n  ++this.valid;\n  this._ops.forEach(function (op) {\n    return op.add(_this2, v, t);\n  });\n}\nfunction rem(v, t) {\n  var _this3 = this;\n  if (v == null || v === '') {\n    --this.missing;\n    return;\n  }\n  if (v !== v) return;\n  --this.valid;\n  this._ops.forEach(function (op) {\n    return op.rem(_this3, v, t);\n  });\n}\nfunction set(t) {\n  var _this4 = this;\n  this._out.forEach(function (op) {\n    return t[op.out] = op.value(_this4);\n  });\n  return t;\n}\nfunction compileMeasures(agg, field) {\n  var get = field || identity,\n    ops = resolve(agg),\n    out = agg.slice().sort(compareIndex);\n  function ctr(cell) {\n    this._ops = ops;\n    this._out = out;\n    this.cell = cell;\n    this.init();\n  }\n  ctr.prototype.init = init;\n  ctr.prototype.add = add;\n  ctr.prototype.rem = rem;\n  ctr.prototype.set = set;\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(function (op) {\n    return op.out;\n  });\n  return ctr;\n}\nfunction TupleStore(key) {\n  this._key = key ? field(key) : tupleid;\n  this.reset();\n}\nvar prototype$1 = TupleStore.prototype;\nprototype$1.reset = function () {\n  this._add = [];\n  this._rem = [];\n  this._ext = null;\n  this._get = null;\n  this._q = null;\n};\nprototype$1.add = function (v) {\n  this._add.push(v);\n};\nprototype$1.rem = function (v) {\n  this._rem.push(v);\n};\nprototype$1.values = function () {\n  this._get = null;\n  if (this._rem.length === 0) return this._add;\n  var a = this._add,\n    r = this._rem,\n    k = this._key,\n    n = a.length,\n    m = r.length,\n    x = Array(n - m),\n    map = {};\n  var i, j, v; // use unique key field to clear removed values\n\n  for (i = 0; i < m; ++i) {\n    map[k(r[i])] = 1;\n  }\n  for (i = 0, j = 0; i < n; ++i) {\n    if (map[k(v = a[i])]) {\n      map[k(v)] = 0;\n    } else {\n      x[j++] = v;\n    }\n  }\n  this._rem = [];\n  return this._add = x;\n}; // memoizing statistics methods\n\nprototype$1.distinct = function (get) {\n  var v = this.values(),\n    map = {};\n  var n = v.length,\n    count = 0,\n    s;\n  while (--n >= 0) {\n    s = get(v[n]) + '';\n    if (!hasOwnProperty(map, s)) {\n      map[s] = 1;\n      ++count;\n    }\n  }\n  return count;\n};\nprototype$1.extent = function (get) {\n  if (this._get !== get || !this._ext) {\n    var v = this.values(),\n      i = extentIndex(v, get);\n    this._ext = [v[i[0]], v[i[1]]];\n    this._get = get;\n  }\n  return this._ext;\n};\nprototype$1.argmin = function (get) {\n  return this.extent(get)[0] || {};\n};\nprototype$1.argmax = function (get) {\n  return this.extent(get)[1] || {};\n};\nprototype$1.min = function (get) {\n  var m = this.extent(get)[0];\n  return m != null ? get(m) : undefined;\n};\nprototype$1.max = function (get) {\n  var m = this.extent(get)[1];\n  return m != null ? get(m) : undefined;\n};\nprototype$1.quartile = function (get) {\n  if (this._get !== get || !this._q) {\n    this._q = quartiles(this.values(), get);\n    this._get = get;\n  }\n  return this._q;\n};\nprototype$1.q1 = function (get) {\n  return this.quartile(get)[0];\n};\nprototype$1.q2 = function (get) {\n  return this.quartile(get)[1];\n};\nprototype$1.q3 = function (get) {\n  return this.quartile(get)[2];\n};\nprototype$1.ci = function (get) {\n  if (this._get !== get || !this._ci) {\n    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n    this._get = get;\n  }\n  return this._ci;\n};\nprototype$1.ci0 = function (get) {\n  return this.ci(get)[0];\n};\nprototype$1.ci1 = function (get) {\n  return this.ci(get)[1];\n};\n\n/**\n * Group-by aggregation operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n * @param {boolean} [params.cross=false] - A flag indicating that the full\n *   cross-product of groupby values should be generated, including empty cells.\n *   If true, the drop parameter is ignored and empty cells are retained.\n * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n */\n\nfunction Aggregate(params) {\n  Transform.call(this, null, params);\n  this._adds = []; // array of added output tuples\n\n  this._mods = []; // array of modified output tuples\n\n  this._alen = 0; // number of active added tuples\n\n  this._mlen = 0; // number of active modified tuples\n\n  this._drop = true; // should empty aggregation cells be removed\n\n  this._cross = false; // produce full cross-product of group-by values\n\n  this._dims = []; // group-by dimension accessors\n\n  this._dnames = []; // group-by dimension names\n\n  this._measures = []; // collection of aggregation monoids\n\n  this._countOnly = false; // flag indicating only count aggregation\n\n  this._counts = null; // collection of count fields\n\n  this._prev = null; // previous aggregation cells\n\n  this._inputs = null; // array of dependent input tuple field names\n\n  this._outputs = null; // array of output tuple field names\n}\n\nAggregate.Definition = {\n  'type': 'Aggregate',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'ops',\n    'type': 'enum',\n    'array': true,\n    'values': ValidAggregateOps\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'drop',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'cross',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'key',\n    'type': 'field'\n  }]\n};\ninherits(Aggregate, Transform, {\n  transform: function transform(_, pulse) {\n    var _this5 = this;\n    var aggr = this,\n      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      mod = _.modified();\n    aggr.stamp = out.stamp;\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, function (t) {\n        return aggr.add(t);\n      });\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, function (t) {\n        return aggr.rem(t);\n      });\n      pulse.visit(pulse.ADD, function (t) {\n        return aggr.add(t);\n      });\n    } // Indicate output fields and return aggregate tuples.\n\n    out.modifies(aggr._outputs); // Should empty cells be dropped?\n\n    aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n    if (pulse.clean() && aggr._drop) {\n      out.clean(true).runAfter(function () {\n        return _this5.clean();\n      });\n    }\n    return aggr.changes(out);\n  },\n  cross: function cross() {\n    var aggr = this,\n      curr = aggr.value,\n      dims = aggr._dnames,\n      vals = dims.map(function () {\n        return {};\n      }),\n      n = dims.length; // collect all group-by domain values\n\n    function collect(cells) {\n      var key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i = 0; i < n; ++i) {\n          vals[i][v = t[dims[i]]] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr); // iterate over key cross-product, create cells as needed\n\n    function generate(base, tuple, index) {\n      var name = dims[index],\n        v = vals[index++];\n      for (var k in v) {\n        var _key = base ? base + '|' + k : k;\n        tuple[name] = v[k];\n        if (index < n) generate(_key, tuple, index);else if (!curr[_key]) aggr.cell(_key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  },\n  init: function init(_) {\n    // initialize input and output fields\n    var inputs = this._inputs = [],\n      outputs = this._outputs = [],\n      inputMap = {};\n    function inputVisit(get) {\n      var fields = array(accessorFields(get)),\n        n = fields.length;\n      var i = 0,\n        f;\n      for (; i < n; ++i) {\n        if (!inputMap[f = fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    } // initialize group-by dimensions\n\n    this._dims = array(_.groupby);\n    this._dnames = this._dims.map(function (d) {\n      var dname = accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures\n\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n    var fields = _.fields || [null],\n      ops = _.ops || ['count'],\n      as = _.as || [],\n      n = fields.length,\n      map = {};\n    var field, op, m, mname, outname, i;\n    if (n !== ops.length) {\n      error('Unmatched number of fields and aggregate ops.');\n    }\n    for (i = 0; i < n; ++i) {\n      field = fields[i];\n      op = ops[i];\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      mname = accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = map[mname] = [];\n        m.field = field;\n        this._measures.push(m);\n      }\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n    this._measures = this._measures.map(function (m) {\n      return compileMeasures(m, m.field);\n    });\n    return {}; // aggregation cells (this.value)\n  },\n\n  // -- Cell Management -----\n  cellkey: groupkey(),\n  cell: function cell(key, t) {\n    var cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  },\n  newcell: function newcell(key, t) {\n    var cell = {\n      key: key,\n      num: 0,\n      agg: null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n    if (!this._countOnly) {\n      var measures = this._measures,\n        n = measures.length;\n      cell.agg = Array(n);\n      for (var i = 0; i < n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n    return cell;\n  },\n  newtuple: function newtuple(t, p) {\n    var names = this._dnames,\n      dims = this._dims,\n      n = dims.length,\n      x = {};\n    for (var i = 0; i < n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n    return p ? replace(p.tuple, x) : ingest(x);\n  },\n  clean: function clean() {\n    var cells = this.value;\n    for (var _key2 in cells) {\n      if (cells[_key2].num === 0) {\n        delete cells[_key2];\n      }\n    }\n  },\n  // -- Process Tuples -----\n  add: function add(t) {\n    var key = this.cellkey(t),\n      cell = this.cell(key, t);\n    cell.num += 1;\n    if (this._countOnly) return;\n    if (cell.store) cell.data.add(t);\n    var agg = cell.agg;\n    for (var i = 0, n = agg.length; i < n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  },\n  rem: function rem(t) {\n    var key = this.cellkey(t),\n      cell = this.cell(key, t);\n    cell.num -= 1;\n    if (this._countOnly) return;\n    if (cell.store) cell.data.rem(t);\n    var agg = cell.agg;\n    for (var i = 0, n = agg.length; i < n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  },\n  celltuple: function celltuple(cell) {\n    var tuple = cell.tuple,\n      counts = this._counts; // consolidate stored values\n\n    if (cell.store) {\n      cell.data.values();\n    } // update tuple properties\n\n    for (var i = 0, n = counts.length; i < n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      var agg = cell.agg;\n      for (var _i = 0, _n = agg.length; _i < _n; ++_i) {\n        agg[_i].set(tuple);\n      }\n    }\n    return tuple;\n  },\n  changes: function changes(out) {\n    var adds = this._adds,\n      mods = this._mods,\n      prev = this._prev,\n      drop = this._drop,\n      add = out.add,\n      rem = out.rem,\n      mod = out.mod;\n    var cell, key, i, n;\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n    for (i = 0, n = this._alen; i < n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i = 0, n = this._mlen; i < n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n\n    this._prev = null;\n    return out;\n  }\n});\nvar EPSILON$1 = 1e-14;\n/**\n * Generates a binning function for discretizing data.\n * @constructor\n * @param {object} params - The parameters for this operator. The\n *   provided values should be valid options for the {@link bin} function.\n * @param {function(object): *} params.field - The data field to bin.\n */\n\nfunction Bin(params) {\n  Transform.call(this, null, params);\n}\nBin.Definition = {\n  'type': 'Bin',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'interval',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'anchor',\n    'type': 'number'\n  }, {\n    'name': 'maxbins',\n    'type': 'number',\n    'default': 20\n  }, {\n    'name': 'base',\n    'type': 'number',\n    'default': 10\n  }, {\n    'name': 'divide',\n    'type': 'number',\n    'array': true,\n    'default': [5, 2]\n  }, {\n    'name': 'extent',\n    'type': 'number',\n    'array': true,\n    'length': 2,\n    'required': true\n  }, {\n    'name': 'span',\n    'type': 'number'\n  }, {\n    'name': 'step',\n    'type': 'number'\n  }, {\n    'name': 'steps',\n    'type': 'number',\n    'array': true\n  }, {\n    'name': 'minstep',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'nice',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'name',\n    'type': 'string'\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['bin0', 'bin1']\n  }]\n};\ninherits(Bin, Transform, {\n  transform: function transform(_, pulse) {\n    var band = _.interval !== false,\n      bins = this._bins(_),\n      start = bins.start,\n      step = bins.step,\n      as = _.as || ['bin0', 'bin1'],\n      b0 = as[0],\n      b1 = as[1];\n    var flag;\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n    pulse.visit(flag, band ? function (t) {\n      var v = bins(t); // minimum bin value (inclusive)\n\n      t[b0] = v; // maximum bin value (exclusive)\n      // use convoluted math for better floating point agreement\n      // see https://github.com/vega/vega/issues/830\n      // infinite values propagate through this formula! #2227\n\n      t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n    } : function (t) {\n      return t[b0] = bins(t);\n    });\n    return pulse.modifies(band ? as : b0);\n  },\n  _bins: function _bins(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n    var field = _.field,\n      bins = bin(_),\n      step = bins.step;\n    var start = bins.start,\n      stop = start + Math.ceil((bins.stop - start) / step) * step,\n      a,\n      d;\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n    var f = function f(t) {\n      var v = toNumber(field(t));\n      return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n    };\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n    return this.value = accessor(f, accessorFields(field), _.name || 'bin_' + accessorName(field));\n  }\n});\nfunction SortedList(idFunc, source, input) {\n  var $ = idFunc;\n  var _data = source || [],\n    _add = input || [],\n    rem = {},\n    cnt = 0;\n  return {\n    add: function add(t) {\n      return _add.push(t);\n    },\n    remove: function remove(t) {\n      return rem[$(t)] = ++cnt;\n    },\n    size: function size() {\n      return _data.length;\n    },\n    data: function data(compare, resort) {\n      if (cnt) {\n        _data = _data.filter(function (t) {\n          return !rem[$(t)];\n        });\n        rem = {};\n        cnt = 0;\n      }\n      if (resort && compare) {\n        _data.sort(compare);\n      }\n      if (_add.length) {\n        _data = compare ? merge(compare, _data, _add.sort(compare)) : _data.concat(_add);\n        _add = [];\n      }\n      return _data;\n    }\n  };\n}\n\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\n\nfunction Collect(params) {\n  Transform.call(this, [], params);\n}\nCollect.Definition = {\n  'type': 'Collect',\n  'metadata': {\n    'source': true\n  },\n  'params': [{\n    'name': 'sort',\n    'type': 'compare'\n  }]\n};\ninherits(Collect, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n      list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n      sort = _.sort,\n      mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n    out.visit(out.REM, list.remove);\n    this.modified(mod);\n    this.value = out.source = list.data(stableCompare(sort), mod); // propagate tree root if defined\n\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n    return out;\n  }\n});\n\n/**\n * Generates a comparator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string|function>} params.fields - The fields to compare.\n * @param {Array<string>} [params.orders] - The sort orders.\n *   Each entry should be one of \"ascending\" (default) or \"descending\".\n */\n\nfunction Compare(params) {\n  Operator.call(this, null, update$5, params);\n}\ninherits(Compare, Operator);\nfunction update$5(_) {\n  return this.value && !_.modified() ? this.value : compare(_.fields, _.orders);\n}\n\n/**\n * Count regexp-defined pattern occurrences in a text field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the text field.\n * @param {string} [params.pattern] - RegExp string defining the text pattern.\n * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n * @param {string} [params.stopwords] - RegExp string of words to ignore.\n */\n\nfunction CountPattern(params) {\n  Transform.call(this, null, params);\n}\nCountPattern.Definition = {\n  'type': 'CountPattern',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'case',\n    'type': 'enum',\n    'values': ['upper', 'lower', 'mixed'],\n    'default': 'mixed'\n  }, {\n    'name': 'pattern',\n    'type': 'string',\n    'default': '[\\\\w\"]+'\n  }, {\n    'name': 'stopwords',\n    'type': 'string',\n    'default': ''\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['text', 'count']\n  }]\n};\nfunction tokenize(text, tcase, match) {\n  switch (tcase) {\n    case 'upper':\n      text = text.toUpperCase();\n      break;\n    case 'lower':\n      text = text.toLowerCase();\n      break;\n  }\n  return text.match(match);\n}\ninherits(CountPattern, Transform, {\n  transform: function transform(_, pulse) {\n    var process = function process(update) {\n      return function (tuple) {\n        var tokens = tokenize(get(tuple), _.case, match) || [],\n          t;\n        for (var i = 0, n = tokens.length; i < n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n    };\n    var init = this._parameterCheck(_, pulse),\n      counts = this._counts,\n      match = this._match,\n      stop = this._stop,\n      get = _.field,\n      as = _.as || ['text', 'count'],\n      add = process(function (t) {\n        return counts[t] = 1 + (counts[t] || 0);\n      }),\n      rem = process(function (t) {\n        return counts[t] -= 1;\n      });\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n    return this._finish(pulse, as); // generate output tuples\n  },\n  _parameterCheck: function _parameterCheck(_, pulse) {\n    var init = false;\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n      init = true;\n    }\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n    if (init) this._counts = {};\n    return init;\n  },\n  _finish: function _finish(pulse, as) {\n    var counts = this._counts,\n      tuples = this._tuples || (this._tuples = {}),\n      text = as[0],\n      count = as[1],\n      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    var w, t, c;\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = t = ingest({});\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n    return out.modifies(as);\n  }\n});\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\n\nfunction Cross(params) {\n  Transform.call(this, null, params);\n}\nCross.Definition = {\n  'type': 'Cross',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'filter',\n    'type': 'expr'\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['a', 'b']\n  }]\n};\ninherits(Cross, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n      as = _.as || ['a', 'b'],\n      a = as[0],\n      b = as[1],\n      reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n    var data = this.value;\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || truthy);\n    } else {\n      out.mod = data;\n    }\n    out.source = this.value;\n    return out.modifies(as);\n  }\n});\nfunction cross(input, a, b, filter) {\n  var data = [],\n    t = {},\n    n = input.length,\n    i = 0,\n    j,\n    left;\n  for (; i < n; ++i) {\n    t[a] = left = input[i];\n    for (j = 0; j < n; ++j) {\n      t[b] = input[j];\n      if (filter(t)) {\n        data.push(ingest(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n  return data;\n}\nvar Distributions = {\n  kde: randomKDE,\n  mixture: randomMixture,\n  normal: randomNormal,\n  lognormal: randomLogNormal,\n  uniform: randomUniform\n};\nvar DISTRIBUTIONS = 'distributions',\n  FUNCTION = 'function',\n  FIELD = 'field';\n/**\n * Parse a parameter object for a probability distribution.\n * @param {object} def - The distribution parameter object.\n * @param {function():Array<object>} - A method for requesting\n *   source data. Used for distributions (such as KDE) that\n *   require sample data points. This method will only be\n *   invoked if the 'from' parameter for a target data source\n *   is not provided. Typically this method returns backing\n *   source data for a Pulse object.\n * @return {object} - The output distribution object.\n */\n\nfunction parse(def, data) {\n  var func = def[FUNCTION];\n  if (!hasOwnProperty(Distributions, func)) {\n    error('Unknown distribution function: ' + func);\n  }\n  var d = Distributions[func]();\n  for (var name in def) {\n    // if data field, extract values\n    if (name === FIELD) {\n      d.data((def.from || data()).map(def[name]));\n    } // if distribution mixture, recurse to parse each definition\n    else if (name === DISTRIBUTIONS) {\n      d[name](def[name].map(function (_) {\n        return parse(_, data);\n      }));\n    } // otherwise, simply set the parameter\n    else if (typeof d[name] === FUNCTION) {\n      d[name](def[name]);\n    }\n  }\n  return d;\n}\n\n/**\n * Grid sample points for a probability density. Given a distribution and\n * a sampling extent, will generate points suitable for plotting either\n * PDF (probability density function) or CDF (cumulative distribution\n * function) curves.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.distribution - The probability distribution. This\n *   is an object parameter dependent on the distribution type.\n * @param {string} [params.method='pdf'] - The distribution method to sample.\n *   One of 'pdf' or 'cdf'.\n * @param {Array<number>} [params.extent] - The [min, max] extent over which\n *   to sample the distribution. This argument is required in most cases, but\n *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n *   that returns numerical sample points from which the extent can be deduced.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\n\nfunction Density(params) {\n  Transform.call(this, null, params);\n}\nvar distributions = [{\n  'key': {\n    'function': 'normal'\n  },\n  'params': [{\n    'name': 'mean',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'stdev',\n    'type': 'number',\n    'default': 1\n  }]\n}, {\n  'key': {\n    'function': 'lognormal'\n  },\n  'params': [{\n    'name': 'mean',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'stdev',\n    'type': 'number',\n    'default': 1\n  }]\n}, {\n  'key': {\n    'function': 'uniform'\n  },\n  'params': [{\n    'name': 'min',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'max',\n    'type': 'number',\n    'default': 1\n  }]\n}, {\n  'key': {\n    'function': 'kde'\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'from',\n    'type': 'data'\n  }, {\n    'name': 'bandwidth',\n    'type': 'number',\n    'default': 0\n  }]\n}];\nvar mixture = {\n  'key': {\n    'function': 'mixture'\n  },\n  'params': [{\n    'name': 'distributions',\n    'type': 'param',\n    'array': true,\n    'params': distributions\n  }, {\n    'name': 'weights',\n    'type': 'number',\n    'array': true\n  }]\n};\nDensity.Definition = {\n  'type': 'Density',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'extent',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'steps',\n    'type': 'number'\n  }, {\n    'name': 'minsteps',\n    'type': 'number',\n    'default': 25\n  }, {\n    'name': 'maxsteps',\n    'type': 'number',\n    'default': 200\n  }, {\n    'name': 'method',\n    'type': 'string',\n    'default': 'pdf',\n    'values': ['pdf', 'cdf']\n  }, {\n    'name': 'distribution',\n    'type': 'param',\n    'params': distributions.concat(mixture)\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'default': ['value', 'density']\n  }]\n};\ninherits(Density, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    if (!this.value || pulse.changed() || _.modified()) {\n      var dist = parse(_.distribution, source(pulse)),\n        minsteps = _.steps || _.minsteps || 25,\n        maxsteps = _.steps || _.maxsteps || 200;\n      var method = _.method || 'pdf';\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        error('Missing density extent parameter.');\n      }\n      method = dist[method];\n      var as = _.as || ['value', 'density'],\n        domain = _.extent || extent(dist.data()),\n        values = sampleCurve(method, domain, minsteps, maxsteps).map(function (v) {\n          var tuple = {};\n          tuple[as[0]] = v[0];\n          tuple[as[1]] = v[1];\n          return ingest(tuple);\n        });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n    return out;\n  }\n});\nfunction source(pulse) {\n  return function () {\n    return pulse.materialize(pulse.SOURCE).source;\n  };\n}\nfunction fieldNames(fields, as) {\n  if (!fields) return null;\n  return fields.map(function (f, i) {\n    return as[i] || accessorName(f);\n  });\n}\nfunction partition$1(data, groupby, field) {\n  var groups = [],\n    get = function get(f) {\n      return f(t);\n    };\n  var map, i, n, t, k, g; // partition data points into groups\n\n  if (groupby == null) {\n    groups.push(data.map(field));\n  } else {\n    for (map = {}, i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = g = [];\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(field(t));\n    }\n  }\n  return groups;\n}\nvar Output = 'bin';\n/**\n * Dot density binning for dot plot construction.\n * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to bin.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.step] - The step size (bin width) within which dots should be\n *   stacked. Defaults to 1/30 of the extent of the data *field*.\n * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n *   stacks should be smoothed to reduce variance.\n */\n\nfunction DotBin(params) {\n  Transform.call(this, null, params);\n}\nDotBin.Definition = {\n  'type': 'DotBin',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'step',\n    'type': 'number'\n  }, {\n    'name': 'smooth',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'default': Output\n  }]\n};\nvar autostep = function autostep(data, field) {\n  return span(extent(data, field)) / 30;\n};\ninherits(DotBin, Transform, {\n  transform: function transform(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    var source = pulse.materialize(pulse.SOURCE).source,\n      groups = partition$1(pulse.source, _.groupby, identity),\n      smooth = _.smooth || false,\n      field = _.field,\n      step = _.step || autostep(source, field),\n      sort = stableCompare(function (a, b) {\n        return field(a) - field(b);\n      }),\n      as = _.as || Output,\n      n = groups.length; // compute dotplot bins per group\n\n    var min = Infinity,\n      max = -Infinity,\n      i = 0,\n      j;\n    for (; i < n; ++i) {\n      var g = groups[i].sort(sort);\n      j = -1;\n      var _iterator = _createForOfIteratorHelper(dotbin(g, step, smooth, field)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var v = _step.value;\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  }\n});\n\n/**\n * Wraps an expression function with access to external parameters.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function} params.expr - The expression function. The\n *  function should accept both a datum and a parameter object.\n *  This operator's value will be a new function that wraps the\n *  expression function with access to this operator's parameters.\n */\n\nfunction Expression(params) {\n  Operator.call(this, null, update$4, params);\n  this.modified(true);\n}\ninherits(Expression, Operator);\nfunction update$4(_) {\n  var expr = _.expr;\n  return this.value && !_.modified('expr') ? this.value : accessor(function (datum) {\n    return expr(datum, _);\n  }, accessorFields(expr), accessorName(expr));\n}\n\n/**\n * Computes extents (min/max) for a data field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field over which to compute extends.\n */\n\nfunction Extent(params) {\n  Transform.call(this, [undefined, undefined], params);\n}\nExtent.Definition = {\n  'type': 'Extent',\n  'metadata': {},\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }]\n};\ninherits(Extent, Transform, {\n  transform: function transform(_, pulse) {\n    var extent = this.value,\n      field = _.field,\n      mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n    var min = extent[0],\n      max = extent[1];\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function (t) {\n      var v = toNumber(field(t));\n      if (v != null) {\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      var name = accessorName(field);\n      if (name) name = \" for field \\\"\".concat(name, \"\\\"\");\n      pulse.dataflow.warn(\"Infinite extent\".concat(name, \": [\").concat(min, \", \").concat(max, \"]\"));\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  }\n});\n\n/**\n * Provides a bridge between a parent transform and a target subflow that\n * consumes only a subset of the tuples that pass through the parent.\n * @constructor\n * @param {Pulse} pulse - A pulse to use as the value of this operator.\n * @param {Transform} parent - The parent transform (typically a Facet instance).\n */\n\nfunction Subflow(pulse, parent) {\n  Operator.call(this, pulse);\n  this.parent = parent;\n  this.count = 0;\n}\ninherits(Subflow, Operator, {\n  /**\n   * Routes pulses from this subflow to a target transform.\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  connect: function connect(target) {\n    this.detachSubflow = target.detachSubflow;\n    this.targets().add(target);\n    return target.source = this;\n  },\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  add: function add(t) {\n    this.count += 1;\n    this.value.add.push(t);\n  },\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  rem: function rem(t) {\n    this.count -= 1;\n    this.value.rem.push(t);\n  },\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  mod: function mod(t) {\n    this.value.mod.push(t);\n  },\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  init: function init(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  },\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  evaluate: function evaluate() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  }\n});\n\n/**\n * Facets a dataflow into a set of subflows based on a key.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): *} params.key - The key field to facet by.\n */\n\nfunction Facet(params) {\n  Transform.call(this, {}, params);\n  this._keys = fastmap(); // cache previously calculated key values\n  // keep track of active subflows, use as targets array for listeners\n  // this allows us to limit propagation to only updated subflows\n\n  var a = this._targets = [];\n  a.active = 0;\n  a.forEach = function (f) {\n    for (var i = 0, n = a.active; i < n; ++i) {\n      f(a[i], i, a);\n    }\n  };\n}\ninherits(Facet, Transform, {\n  activate: function activate(flow) {\n    this._targets[this._targets.active++] = flow;\n  },\n  // parent argument provided by PreFacet subclass\n  subflow: function subflow(key, flow, pulse, parent) {\n    var flows = this.value;\n    var sf = hasOwnProperty(flows, key) && flows[key],\n      df,\n      p;\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n      df.add(sf).connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n    return sf;\n  },\n  clean: function clean() {\n    var flows = this.value;\n    var detached = 0;\n    for (var _key3 in flows) {\n      if (flows[_key3].count === 0) {\n        var detach = flows[_key3].detachSubflow;\n        if (detach) detach();\n        delete flows[_key3];\n        ++detached;\n      }\n    } // remove inactive targets from the active targets array\n\n    if (detached) {\n      var active = this._targets.filter(function (sf) {\n        return sf && sf.count > 0;\n      });\n      this.initTargets(active);\n    }\n  },\n  initTargets: function initTargets(act) {\n    var a = this._targets,\n      n = a.length,\n      m = act ? act.length : 0;\n    var i = 0;\n    for (; i < m; ++i) {\n      a[i] = act[i];\n    }\n    for (; i < n && a[i] != null; ++i) {\n      a[i] = null; // ensure old flows can be garbage collected\n    }\n\n    a.active = m;\n  },\n  transform: function transform(_, pulse) {\n    var _this6 = this;\n    var df = pulse.dataflow,\n      key = _.key,\n      flow = _.subflow,\n      cache = this._keys,\n      rekey = _.modified('key'),\n      subflow = function subflow(key) {\n        return _this6.subflow(key, flow, pulse);\n      };\n    this._group = _.group || {};\n    this.initTargets(); // reset list of active subflows\n\n    pulse.visit(pulse.REM, function (t) {\n      var id = tupleid(t),\n        k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n    pulse.visit(pulse.ADD, function (t) {\n      var k = key(t);\n      cache.set(tupleid(t), k);\n      subflow(k).add(t);\n    });\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, function (t) {\n        var id = tupleid(t),\n          k0 = cache.get(id),\n          k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, function (t) {\n        subflow(cache.get(tupleid(t))).mod(t);\n      });\n    }\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, function (t) {\n        var id = tupleid(t),\n          k0 = cache.get(id),\n          k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n    if (pulse.clean()) {\n      df.runAfter(function () {\n        _this6.clean();\n        cache.clean();\n      });\n    } else if (cache.empty > df.cleanThreshold) {\n      df.runAfter(cache.clean);\n    }\n    return pulse;\n  }\n});\n\n/**\n * Generates one or more field accessor functions.\n * If the 'name' parameter is an array, an array of field accessors\n * will be created and the 'as' parameter will be ignored.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.name - The field name(s) to access.\n * @param {string} params.as - The accessor function name.\n */\n\nfunction Field(params) {\n  Operator.call(this, null, update$3, params);\n}\ninherits(Field, Operator);\nfunction update$3(_) {\n  return this.value && !_.modified() ? this.value : isArray(_.name) ? array(_.name).map(function (f) {\n    return field(f);\n  }) : field(_.name, _.as);\n}\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\n\nfunction Filter(params) {\n  Transform.call(this, fastmap(), params);\n}\nFilter.Definition = {\n  'type': 'Filter',\n  'metadata': {\n    'changes': true\n  },\n  'params': [{\n    'name': 'expr',\n    'type': 'expr',\n    'required': true\n  }]\n};\ninherits(Filter, Transform, {\n  transform: function transform(_, pulse) {\n    var df = pulse.dataflow,\n      cache = this.value,\n      // cache ids of filtered tuples\n      output = pulse.fork(),\n      add = output.add,\n      rem = output.rem,\n      mod = output.mod,\n      test = _.expr;\n    var isMod = true;\n    pulse.visit(pulse.REM, function (t) {\n      var id = tupleid(t);\n      if (!cache.has(id)) rem.push(t);else cache.delete(id);\n    });\n    pulse.visit(pulse.ADD, function (t) {\n      if (test(t, _)) add.push(t);else cache.set(tupleid(t), 1);\n    });\n    function revisit(t) {\n      var id = tupleid(t),\n        b = test(t, _),\n        s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n    pulse.visit(pulse.MOD, revisit);\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  }\n});\n\n/**\n * Flattens array-typed field values into new data objects.\n * If multiple fields are specified, they are treated as parallel arrays,\n * with output values included for each matching index (or null if missing).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of field\n *   accessors for the tuple fields that should be flattened.\n * @param {string} [params.index] - Optional output field name for index\n *   value. If unspecified, no index field is included in the output.\n * @param {Array<string>} [params.as] - Output field names for flattened\n *   array fields. Any unspecified fields will use the field name provided\n *   by the fields accessors.\n */\n\nfunction Flatten(params) {\n  Transform.call(this, [], params);\n}\nFlatten.Definition = {\n  'type': 'Flatten',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'fields',\n    'type': 'field',\n    'array': true,\n    'required': true\n  }, {\n    'name': 'index',\n    'type': 'string'\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true\n  }]\n};\ninherits(Flatten, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n      fields = _.fields,\n      as = fieldNames(fields, _.as || []),\n      index = _.index || null,\n      m = as.length; // remove any previous results\n\n    out.rem = this.value; // generate flattened tuples\n\n    pulse.visit(pulse.SOURCE, function (t) {\n      var arrays = fields.map(function (f) {\n          return f(t);\n        }),\n        maxlen = arrays.reduce(function (l, a) {\n          return Math.max(l, a.length);\n        }, 0);\n      var i = 0,\n        j,\n        d,\n        v;\n      for (; i < maxlen; ++i) {\n        d = derive(t);\n        for (j = 0; j < m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        if (index) {\n          d[index] = i;\n        }\n        out.add.push(d);\n      }\n    });\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  }\n});\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\n\nfunction Fold(params) {\n  Transform.call(this, [], params);\n}\nFold.Definition = {\n  'type': 'Fold',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'fields',\n    'type': 'field',\n    'array': true,\n    'required': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['key', 'value']\n  }]\n};\ninherits(Fold, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n      fields = _.fields,\n      fnames = fields.map(accessorName),\n      as = _.as || ['key', 'value'],\n      k = as[0],\n      v = as[1],\n      n = fields.length;\n    out.rem = this.value;\n    pulse.visit(pulse.SOURCE, function (t) {\n      for (var i = 0, d; i < n; ++i) {\n        d = derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  }\n});\n\n/**\n * Invokes a function for each data tuple and saves the results as a new field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n * @param {string} params.as - The field name under which to save the result.\n * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n *   added tuples only, and does not update in response to modifications.\n */\n\nfunction Formula(params) {\n  Transform.call(this, null, params);\n}\nFormula.Definition = {\n  'type': 'Formula',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'expr',\n    'type': 'expr',\n    'required': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'required': true\n  }, {\n    'name': 'initonly',\n    'type': 'boolean'\n  }]\n};\ninherits(Formula, Transform, {\n  transform: function transform(_, pulse) {\n    var func = _.expr,\n      as = _.as,\n      mod = _.modified(),\n      flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n    return pulse.visit(flag, function (t) {\n      return t[as] = func(t, _);\n    });\n  }\n});\n\n/**\n * Generates data tuples using a provided generator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Parameters): object} params.generator - A tuple generator\n *   function. This function is given the operator parameters as input.\n *   Changes to any additional parameters will not trigger re-calculation\n *   of previously generated tuples. Only future tuples are affected.\n * @param {number} params.size - The number of tuples to produce.\n */\n\nfunction Generate(params) {\n  Transform.call(this, [], params);\n}\ninherits(Generate, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n      gen = _.generator;\n    var data = this.value,\n      num = _.size - data.length,\n      add,\n      rem,\n      t;\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add = []; --num >= 0;) {\n        add.push(t = ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n      data = data.slice(-num);\n    }\n    out.source = this.value = data;\n    return out;\n  }\n});\nvar Methods = {\n  value: 'value',\n  median: median,\n  mean: mean,\n  min: min,\n  max: max\n};\nvar Empty = [];\n/**\n * Impute missing values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to impute.\n * @param {Array<function(object): *>} [params.groupby] - An array of\n *   accessors to determine series within which to perform imputation.\n * @param {function(object): *} params.key - An accessor for a key value.\n *   Each key value should be unique within a group. New tuples will be\n *   imputed for any key values that are not found within a group.\n * @param {Array<*>} [params.keyvals] - Optional array of required key\n *   values. New tuples will be imputed for any key values that are not\n *   found within a group. In addition, these values will be automatically\n *   augmented with the key values observed in the input data.\n * @param {string} [method='value'] - The imputation method to use. One of\n *   'value', 'mean', 'median', 'max', 'min'.\n * @param {*} [value=0] - The constant value to use for imputation\n *   when using method 'value'.\n */\n\nfunction Impute(params) {\n  Transform.call(this, [], params);\n}\nImpute.Definition = {\n  'type': 'Impute',\n  'metadata': {\n    'changes': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'key',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'keyvals',\n    'array': true\n  }, {\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'method',\n    'type': 'enum',\n    'default': 'value',\n    'values': ['value', 'mean', 'median', 'max', 'min']\n  }, {\n    'name': 'value',\n    'default': 0\n  }]\n};\nfunction getValue(_) {\n  var m = _.method || Methods.value,\n    v;\n  if (Methods[m] == null) {\n    error('Unrecognized imputation method: ' + m);\n  } else if (m === Methods.value) {\n    v = _.value !== undefined ? _.value : 0;\n    return function () {\n      return v;\n    };\n  } else {\n    return Methods[m];\n  }\n}\nfunction getField(_) {\n  var f = _.field;\n  return function (t) {\n    return t ? f(t) : NaN;\n  };\n}\ninherits(Impute, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n      impute = getValue(_),\n      field = getField(_),\n      fName = accessorName(_.field),\n      kName = accessorName(_.key),\n      gNames = (_.groupby || []).map(accessorName),\n      groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n      curr = [],\n      prev = this.value,\n      m = groups.domain.length,\n      group,\n      value,\n      gVals,\n      kVal,\n      g,\n      i,\n      j,\n      l,\n      n,\n      t;\n    for (g = 0, l = groups.length; g < l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN; // add tuples for missing values\n\n      for (j = 0; j < m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n        t = {\n          _impute: true\n        };\n        for (i = 0, n = gVals.length; i < n; ++i) {\n          t[gNames[i]] = gVals[i];\n        }\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n        curr.push(ingest(t));\n      }\n    } // update pulse with imputed tuples\n\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n    return out;\n  }\n});\nfunction partition(data, groupby, key, keyvals) {\n  var get = function get(f) {\n      return f(t);\n    },\n    groups = [],\n    domain = keyvals ? keyvals.slice() : [],\n    kMap = {},\n    gMap = {},\n    gVals,\n    gKey,\n    group,\n    i,\n    j,\n    k,\n    n,\n    t;\n  domain.forEach(function (k, i) {\n    return kMap[k] = i + 1;\n  });\n  for (i = 0, n = data.length; i < n; ++i) {\n    t = data[i];\n    k = key(t);\n    j = kMap[k] || (kMap[k] = domain.push(k));\n    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n    if (!(group = gMap[gKey])) {\n      group = gMap[gKey] = [];\n      groups.push(group);\n      group.values = gVals;\n    }\n    group[j - 1] = t;\n  }\n  groups.domain = domain;\n  return groups;\n}\n\n/**\n * Extend input tuples with aggregate values.\n * Calcuates aggregate values and joins them with the input stream.\n * @constructor\n */\n\nfunction JoinAggregate(params) {\n  Aggregate.call(this, params);\n}\nJoinAggregate.Definition = {\n  'type': 'JoinAggregate',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'ops',\n    'type': 'enum',\n    'array': true,\n    'values': ValidAggregateOps\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'key',\n    'type': 'field'\n  }]\n};\ninherits(JoinAggregate, Aggregate, {\n  transform: function transform(_, pulse) {\n    var aggr = this,\n      mod = _.modified();\n    var cells; // process all input tuples to calculate aggregates\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, function (t) {\n        return aggr.add(t);\n      });\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, function (t) {\n        return aggr.rem(t);\n      });\n      pulse.visit(pulse.ADD, function (t) {\n        return aggr.add(t);\n      });\n    } // update aggregation cells\n\n    aggr.changes(); // write aggregate values to input tuples\n\n    pulse.visit(pulse.SOURCE, function (t) {\n      extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n    return pulse.reflow(mod).modifies(this._outputs);\n  },\n  changes: function changes() {\n    var adds = this._adds,\n      mods = this._mods;\n    var i, n;\n    for (i = 0, n = this._alen; i < n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i = 0, n = this._mlen; i < n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  }\n});\n\n/**\n * Compute kernel density estimates (KDE) for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {function(object): *} params.field - An accessor for the data field\n *   to estimate.\n * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n *   If zero or unspecified, the bandwidth is automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n *   density (false) or cumulative distribution (true) should be generated.\n * @param {Array<number>} [params.extent] - The domain extent over which to\n *   plot the density. If unspecified, the [min, max] data extent is used.\n * @param {string} [params.resolve='independent'] - Indicates how parameters for\n *   multiple densities should be resolved. If \"independent\" (the default), each\n *   density may have its own domain extent and dynamic number of curve sample\n *   steps. If \"shared\", the KDE transform will ensure that all densities are\n *   defined over a shared domain and curve steps, enabling stacking.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\n\nfunction KDE(params) {\n  Transform.call(this, null, params);\n}\nKDE.Definition = {\n  'type': 'KDE',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'cumulative',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'counts',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'bandwidth',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'extent',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'resolve',\n    'type': 'enum',\n    'values': ['shared', 'independent'],\n    'default': 'independent'\n  }, {\n    'name': 'steps',\n    'type': 'number'\n  }, {\n    'name': 'minsteps',\n    'type': 'number',\n    'default': 25\n  }, {\n    'name': 'maxsteps',\n    'type': 'number',\n    'default': 200\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'default': ['value', 'density']\n  }]\n};\ninherits(KDE, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    if (!this.value || pulse.changed() || _.modified()) {\n      var _source = pulse.materialize(pulse.SOURCE).source,\n        groups = partition$1(_source, _.groupby, _.field),\n        names = (_.groupby || []).map(accessorName),\n        bandwidth = _.bandwidth,\n        method = _.cumulative ? 'cdf' : 'pdf',\n        as = _.as || ['value', 'density'],\n        values = [];\n      var domain = _.extent,\n        minsteps = _.steps || _.minsteps || 25,\n        maxsteps = _.steps || _.maxsteps || 200;\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n      if (_.resolve === 'shared') {\n        if (!domain) domain = extent(_source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n      groups.forEach(function (g) {\n        var density = randomKDE(g, bandwidth)[method],\n          scale = _.counts ? g.length : 1,\n          local = domain || extent(g);\n        sampleCurve(density, local, minsteps, maxsteps).forEach(function (v) {\n          var t = {};\n          for (var i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = v[0];\n          t[as[1]] = v[1] * scale;\n          values.push(ingest(t));\n        });\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n    return out;\n  }\n});\n\n/**\n * Generates a key function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The field name(s) for the key function.\n * @param {boolean} params.flat - A boolean flag indicating if the field names\n *  should be treated as flat property names, side-stepping nested field\n *  lookups normally indicated by dot or bracket notation.\n */\n\nfunction Key(params) {\n  Operator.call(this, null, update$2, params);\n}\ninherits(Key, Operator);\nfunction update$2(_) {\n  return this.value && !_.modified() ? this.value : key(_.fields, _.flat);\n}\n\n/**\n * Load and parse data from an external source. Marshalls parameter\n * values and then invokes the Dataflow request method.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.url - The URL to load from.\n * @param {object} params.format - The data format options.\n */\n\nfunction Load(params) {\n  Transform.call(this, [], params);\n  this._pending = null;\n}\ninherits(Load, Transform, {\n  transform: function transform(_, pulse) {\n    var _this7 = this;\n    var df = pulse.dataflow;\n    if (this._pending) {\n      // update state and return pulse\n      return output(this, pulse, this._pending);\n    }\n    if (stop(_)) return pulse.StopPropagation;\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      var p = df.request(_.url, _.format).then(function (res) {\n        _this7._pending = array(res.data);\n        return function (df) {\n          return df.touch(_this7);\n        };\n      });\n      return {\n        async: p\n      };\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format).then(function (res) {\n        return output(_this7, pulse, array(res.data));\n      });\n    }\n  }\n});\nfunction stop(_) {\n  return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n}\nfunction output(op, pulse, data) {\n  data.forEach(ingest);\n  var out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = op.value;\n  op.value = out.source = out.add = data;\n  op._pending = null;\n  if (out.rem.length) out.clean(true);\n  return out;\n}\n\n/**\n * Extend tuples by joining them with values from a lookup table.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Map} params.index - The lookup table map.\n * @param {Array<function(object): *} params.fields - The fields to lookup.\n * @param {Array<string>} params.as - Output field names for each lookup value.\n * @param {*} [params.default] - A default value to use if lookup fails.\n */\n\nfunction Lookup(params) {\n  Transform.call(this, {}, params);\n}\nLookup.Definition = {\n  'type': 'Lookup',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'index',\n    'type': 'index',\n    'params': [{\n      'name': 'from',\n      'type': 'data',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }]\n  }, {\n    'name': 'values',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'array': true,\n    'required': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true\n  }, {\n    'name': 'default',\n    'default': null\n  }]\n};\ninherits(Lookup, Transform, {\n  transform: function transform(_, pulse) {\n    var keys = _.fields,\n      index = _.index,\n      values = _.values,\n      defaultValue = _.default == null ? null : _.default,\n      reset = _.modified(),\n      n = keys.length;\n    var flag = reset ? pulse.SOURCE : pulse.ADD,\n      out = pulse,\n      as = _.as,\n      set,\n      m,\n      mods;\n    if (values) {\n      m = values.length;\n      if (n > 1 && !as) {\n        error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(accessorName);\n      set = function set(t) {\n        for (var i = 0, k = 0, j, v; i < n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j = 0; j < m; ++j, ++k) {\n            t[as[k]] = defaultValue;\n          } else for (j = 0; j < m; ++j, ++k) {\n            t[as[k]] = values[j](v);\n          }\n        }\n      };\n    } else {\n      if (!as) {\n        error('Missing output field names.');\n      }\n      set = function set(t) {\n        for (var i = 0, v; i < n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v == null ? defaultValue : v;\n        }\n      };\n    }\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(function (k) {\n        return pulse.modified(k.fields);\n      });\n      flag |= mods ? pulse.MOD : 0;\n    }\n    pulse.visit(flag, set);\n    return out.modifies(as);\n  }\n});\n\n/**\n * Computes global min/max extents over a collection of extents.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<number>>} params.extents - The input extents.\n */\n\nfunction MultiExtent(params) {\n  Operator.call(this, null, update$1, params);\n}\ninherits(MultiExtent, Operator);\nfunction update$1(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n  var ext = _.extents,\n    n = ext.length;\n  var min = +Infinity,\n    max = -Infinity,\n    i,\n    e;\n  for (i = 0; i < n; ++i) {\n    e = ext[i];\n    if (e[0] < min) min = e[0];\n    if (e[1] > max) max = e[1];\n  }\n  return [min, max];\n}\n\n/**\n * Merge a collection of value arrays.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<*>>} params.values - The input value arrrays.\n */\n\nfunction MultiValues(params) {\n  Operator.call(this, null, update, params);\n}\ninherits(MultiValues, Operator);\nfunction update(_) {\n  return this.value && !_.modified() ? this.value : _.values.reduce(function (data, _) {\n    return data.concat(_);\n  }, []);\n}\n\n/**\n * Operator whose value is simply its parameter hash. This operator is\n * useful for enabling reactive updates to values of nested objects.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\nfunction Params(params) {\n  Transform.call(this, null, params);\n}\ninherits(Params, Transform, {\n  transform: function transform(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  }\n});\n\n/**\n * Aggregate and pivot selected field values to become new fields.\n * This operator is useful to construction cross-tabulations.\n * @constructor\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n * @param {function(object): *} params.field - The field to pivot on. The unique\n *  values of this field become new field names in the output stream.\n * @param {function(object): *} params.value - The field to populate pivoted fields.\n *  The aggregate values of this field become the values of the new pivoted fields.\n * @param {string} [params.op] - The aggregation operation for the value field,\n *  applied per cell in the output stream. The default is \"sum\".\n * @param {number} [params.limit] - An optional parameter indicating the maximum\n *  number of pivoted fields to generate. The pivoted field names are sorted in\n *  ascending order prior to enforcing the limit.\n */\n\nfunction Pivot(params) {\n  Aggregate.call(this, params);\n}\nPivot.Definition = {\n  'type': 'Pivot',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'value',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'op',\n    'type': 'enum',\n    'values': ValidAggregateOps,\n    'default': 'sum'\n  }, {\n    'name': 'limit',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'key',\n    'type': 'field'\n  }]\n};\ninherits(Pivot, Aggregate, {\n  _transform: Aggregate.prototype.transform,\n  transform: function transform(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  }\n}); // Shoehorn a pivot transform into an aggregate transform!\n// First collect all unique pivot field values.\n// Then generate aggregate fields for each output pivot field.\n\nfunction aggregateParams(_, pulse) {\n  var key = _.field,\n    value = _.value,\n    op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n    fields = accessorFields(key).concat(accessorFields(value)),\n    keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change\n  // flag parameter modification to ensure re-initialization\n\n  if (pulse.changed()) _.set('__pivot__', null, null, true);\n  return {\n    key: _.key,\n    groupby: _.groupby,\n    ops: keys.map(function () {\n      return op;\n    }),\n    fields: keys.map(function (k) {\n      return get(k, key, value, fields);\n    }),\n    as: keys.map(function (k) {\n      return k + '';\n    }),\n    modified: _.modified.bind(_)\n  };\n} // Generate aggregate field accessor.\n// Output NaN for non-existent values; aggregator will ignore!\n\nfunction get(k, key, value, fields) {\n  return accessor(function (d) {\n    return key(d) === k ? value(d) : NaN;\n  }, fields, k + '');\n} // Collect (and optionally limit) all unique pivot values.\n\nfunction pivotKeys(key, limit, pulse) {\n  var map = {},\n    list = [];\n  pulse.visit(pulse.SOURCE, function (t) {\n    var k = key(t);\n    if (!map[k]) {\n      map[k] = 1;\n      list.push(k);\n    }\n  });\n  list.sort(ascending);\n  return limit ? list.slice(0, limit) : list;\n}\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\n\nfunction PreFacet(params) {\n  Facet.call(this, params);\n}\ninherits(PreFacet, Facet, {\n  transform: function transform(_, pulse) {\n    var _this8 = this;\n    var flow = _.subflow,\n      field = _.field,\n      subflow = function subflow(t) {\n        return _this8.subflow(tupleid(t), flow, pulse, t);\n      };\n    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n      error('PreFacet does not support field modification.');\n    }\n    this.initTargets(); // reset list of active subflows\n\n    if (field) {\n      pulse.visit(pulse.MOD, function (t) {\n        var sf = subflow(t);\n        field(t).forEach(function (_) {\n          return sf.mod(_);\n        });\n      });\n      pulse.visit(pulse.ADD, function (t) {\n        var sf = subflow(t);\n        field(t).forEach(function (_) {\n          return sf.add(ingest(_));\n        });\n      });\n      pulse.visit(pulse.REM, function (t) {\n        var sf = subflow(t);\n        field(t).forEach(function (_) {\n          return sf.rem(_);\n        });\n      });\n    } else {\n      pulse.visit(pulse.MOD, function (t) {\n        return subflow(t).mod(t);\n      });\n      pulse.visit(pulse.ADD, function (t) {\n        return subflow(t).add(t);\n      });\n      pulse.visit(pulse.REM, function (t) {\n        return subflow(t).rem(t);\n      });\n    }\n    if (pulse.clean()) {\n      pulse.runAfter(function () {\n        return _this8.clean();\n      });\n    }\n    return pulse;\n  }\n});\n\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\n\nfunction Project(params) {\n  Transform.call(this, null, params);\n}\nProject.Definition = {\n  'type': 'Project',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'fields',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }]\n};\ninherits(Project, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n      fields = _.fields,\n      as = fieldNames(_.fields, _.as || []),\n      derive = fields ? function (s, t) {\n        return project(s, t, fields, as);\n      } : rederive;\n    var lut;\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n    pulse.visit(pulse.REM, function (t) {\n      var id = tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n    pulse.visit(pulse.ADD, function (t) {\n      var dt = derive(t, ingest({}));\n      lut[tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n    pulse.visit(pulse.MOD, function (t) {\n      out.mod.push(derive(t, lut[tupleid(t)]));\n    });\n    return out;\n  }\n});\nfunction project(s, t, fields, as) {\n  for (var i = 0, n = fields.length; i < n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n  return t;\n}\n\n/**\n * Proxy the value of another operator as a pure signal value.\n * Ensures no tuples are propagated.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {*} params.value - The value to proxy, becomes the value of this operator.\n */\n\nfunction Proxy(params) {\n  Transform.call(this, null, params);\n}\ninherits(Proxy, Transform, {\n  transform: function transform(_, pulse) {\n    this.value = _.value;\n    return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n  }\n});\n\n/**\n * Generates sample quantile values from an input data stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the data field\n *   over which to calculate quantile values.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {Array<number>} [params.probs] - An array of probabilities in\n *   the range (0, 1) for which to compute quantile values. If not specified,\n *   the *step* parameter will be used.\n * @param {Array<number>} [params.step=0.01] - A probability step size for\n *   sampling quantile values. All values from one-half the step size up to\n *   1 (exclusive) will be sampled. This parameter is only used if the\n *   *quantiles* parameter is not provided.\n */\n\nfunction Quantile(params) {\n  Transform.call(this, null, params);\n}\nQuantile.Definition = {\n  'type': 'Quantile',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'probs',\n    'type': 'number',\n    'array': true\n  }, {\n    'name': 'step',\n    'type': 'number',\n    'default': 0.01\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'default': ['prob', 'value']\n  }]\n};\nvar EPSILON = 1e-14;\ninherits(Quantile, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      as = _.as || ['prob', 'value'];\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n    var source = pulse.materialize(pulse.SOURCE).source,\n      groups = partition$1(source, _.groupby, _.field),\n      names = (_.groupby || []).map(accessorName),\n      values = [],\n      step = _.step || 0.01,\n      p = _.probs || range(step / 2, 1 - EPSILON, step),\n      n = p.length;\n    groups.forEach(function (g) {\n      var q = quantiles(g, p);\n      for (var i = 0; i < n; ++i) {\n        var t = {};\n        for (var _i2 = 0; _i2 < names.length; ++_i2) {\n          t[names[_i2]] = g.dims[_i2];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(ingest(t));\n      }\n    });\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n    return out;\n  }\n});\n\n/**\n * Relays a data stream between data processing pipelines.\n * If the derive parameter is set, this transform will create derived\n * copies of observed tuples. This provides derived data streams in which\n * modifications to the tuples do not pollute an upstream data source.\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.derive=false] - Boolean flag indicating if\n *   the transform should make derived copies of incoming tuples.\n * @constructor\n */\n\nfunction Relay(params) {\n  Transform.call(this, null, params);\n}\ninherits(Relay, Transform, {\n  transform: function transform(_, pulse) {\n    var out, lut;\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n      pulse.visit(pulse.REM, function (t) {\n        var id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, function (t) {\n        var dt = derive(t);\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, function (t) {\n        var dt = lut[tupleid(t)];\n        for (var k in t) {\n          dt[k] = t[k]; // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n    return out;\n  }\n});\n\n/**\n * Samples tuples passing through this operator.\n * Uses reservoir sampling to maintain a representative sample.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.size=1000] - The maximum number of samples.\n */\n\nfunction Sample(params) {\n  Transform.call(this, [], params);\n  this.count = 0;\n}\nSample.Definition = {\n  'type': 'Sample',\n  'metadata': {},\n  'params': [{\n    'name': 'size',\n    'type': 'number',\n    'default': 1000\n  }]\n};\ninherits(Sample, Transform, {\n  transform: function transform(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n      mod = _.modified('size'),\n      num = _.size,\n      map = this.value.reduce(function (m, t) {\n        return m[tupleid(t)] = 1, m;\n      }, {});\n    var res = this.value,\n      cnt = this.count,\n      cap = 0; // sample reservoir update function\n\n    function update(t) {\n      var p, idx;\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[tupleid(p)]) out.rem.push(p); // eviction\n\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, function (t) {\n        var id = tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      }); // filter removed tuples out of the sample reservoir\n\n      res = res.filter(function (t) {\n        return map[tupleid(t)] !== -1;\n      });\n    }\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, function (t) {\n        // update, but skip previously sampled tuples\n        if (!map[tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n    if (mod && res.length > num) {\n      var n = res.length - num;\n      for (var i = 0; i < n; ++i) {\n        map[tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, function (t) {\n        if (map[tupleid(t)]) out.mod.push(t);\n      });\n    }\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(function (t) {\n        return !map[tupleid(t)];\n      });\n    }\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  }\n});\n\n/**\n * Generates data tuples for a specified sequence range of numbers.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} params.start - The first number in the sequence.\n * @param {number} params.stop - The last number (exclusive) in the sequence.\n * @param {number} [params.step=1] - The step size between numbers in the sequence.\n */\n\nfunction Sequence(params) {\n  Transform.call(this, null, params);\n}\nSequence.Definition = {\n  'type': 'Sequence',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'start',\n    'type': 'number',\n    'required': true\n  }, {\n    'name': 'stop',\n    'type': 'number',\n    'required': true\n  }, {\n    'name': 'step',\n    'type': 'number',\n    'default': 1\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'default': 'data'\n  }]\n};\ninherits(Sequence, Transform, {\n  transform: function transform(_, pulse) {\n    if (this.value && !_.modified()) return;\n    var out = pulse.materialize().fork(pulse.MOD),\n      as = _.as || 'data';\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n    this.value = range(_.start, _.stop, _.step || 1).map(function (v) {\n      var t = {};\n      t[as] = v;\n      return ingest(t);\n    });\n    out.add = pulse.add.concat(this.value);\n    return out;\n  }\n});\n\n/**\n * Propagates a new pulse without any tuples so long as the input\n * pulse contains some added, removed or modified tuples.\n * @param {object} params - The parameters for this operator.\n * @constructor\n */\n\nfunction Sieve(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\ninherits(Sieve, Transform, {\n  transform: function transform(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n  }\n});\n\n/**\n * Discretize dates to specific time units.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The data field containing date/time values.\n */\n\nfunction TimeUnit(params) {\n  Transform.call(this, null, params);\n}\nvar OUTPUT = ['unit0', 'unit1'];\nTimeUnit.Definition = {\n  'type': 'TimeUnit',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'interval',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'units',\n    'type': 'enum',\n    'values': TIME_UNITS,\n    'array': true\n  }, {\n    'name': 'step',\n    'type': 'number',\n    'default': 1\n  }, {\n    'name': 'maxbins',\n    'type': 'number',\n    'default': 40\n  }, {\n    'name': 'extent',\n    'type': 'date',\n    'array': true\n  }, {\n    'name': 'timezone',\n    'type': 'enum',\n    'default': 'local',\n    'values': ['local', 'utc']\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': OUTPUT\n  }]\n};\ninherits(TimeUnit, Transform, {\n  transform: function transform(_, pulse) {\n    var field = _.field,\n      band = _.interval !== false,\n      utc = _.timezone === 'utc',\n      floor = this._floor(_, pulse),\n      offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n      as = _.as || OUTPUT,\n      u0 = as[0],\n      u1 = as[1],\n      step = floor.step;\n    var min = floor.start || Infinity,\n      max = floor.stop || -Infinity,\n      flag = pulse.ADD;\n    if (_.modified() || pulse.changed(pulse.REM) || pulse.modified(accessorFields(field))) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n    pulse.visit(flag, function (t) {\n      var v = field(t);\n      var a, b;\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n    floor.start = min;\n    floor.stop = max;\n    return pulse.modifies(band ? as : u0);\n  },\n  _floor: function _floor(_, pulse) {\n    var utc = _.timezone === 'utc'; // get parameters\n\n    var _ref = _.units ? {\n        units: _.units,\n        step: _.step || 1\n      } : timeBin({\n        extent: _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      }),\n      units = _ref.units,\n      step = _ref.step; // check / standardize time units\n\n    var tunits = timeUnits(units),\n      prev = this.value || {},\n      floor = (utc ? utcFloor : timeFloor)(tunits, step);\n    floor.unit = peek(tunits);\n    floor.units = tunits;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  }\n});\n\n/**\n * An index that maps from unique, string-coerced, field values to tuples.\n * Assumes that the field serves as a unique key with no duplicate values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field accessor to index.\n */\n\nfunction TupleIndex(params) {\n  Transform.call(this, fastmap(), params);\n}\ninherits(TupleIndex, Transform, {\n  transform: function transform(_, pulse) {\n    var df = pulse.dataflow,\n      field = _.field,\n      index = this.value,\n      set = function set(t) {\n        return index.set(field(t), t);\n      };\n    var mod = true;\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, function (t) {\n        return index.delete(field(t));\n      });\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  }\n});\n\n/**\n * Extracts an array of values. Assumes the source data has already been\n * reduced as needed (e.g., by an upstream Aggregate transform).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The domain field to extract.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting the values. The comparator will be\n *   applied to backing tuples prior to value extraction.\n */\n\nfunction Values(params) {\n  Transform.call(this, null, params);\n}\ninherits(Values, Transform, {\n  transform: function transform(_, pulse) {\n    var run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n    if (run) {\n      this.value = (_.sort ? pulse.source.slice().sort(stableCompare(_.sort)) : pulse.source).map(_.field);\n    }\n  }\n});\nfunction WindowOp(op, field, param, as) {\n  var fn = WindowOps[op](field, param);\n  return {\n    init: fn.init || zero,\n    update: function update(w, t) {\n      t[as] = fn.next(w);\n    }\n  };\n}\nvar WindowOps = {\n  row_number: function row_number() {\n    return {\n      next: function next(w) {\n        return w.index + 1;\n      }\n    };\n  },\n  rank: function rank() {\n    var rank;\n    return {\n      init: function init() {\n        return rank = 1;\n      },\n      next: function next(w) {\n        var i = w.index,\n          data = w.data;\n        return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n      }\n    };\n  },\n  dense_rank: function dense_rank() {\n    var drank;\n    return {\n      init: function init() {\n        return drank = 1;\n      },\n      next: function next(w) {\n        var i = w.index,\n          d = w.data;\n        return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n      }\n    };\n  },\n  percent_rank: function percent_rank() {\n    var rank = WindowOps.rank(),\n      _next = rank.next;\n    return {\n      init: rank.init,\n      next: function next(w) {\n        return (_next(w) - 1) / (w.data.length - 1);\n      }\n    };\n  },\n  cume_dist: function cume_dist() {\n    var cume;\n    return {\n      init: function init() {\n        return cume = 0;\n      },\n      next: function next(w) {\n        var d = w.data,\n          c = w.compare;\n        var i = w.index;\n        if (cume < i) {\n          while (i + 1 < d.length && !c(d[i], d[i + 1])) {\n            ++i;\n          }\n          cume = i;\n        }\n        return (1 + cume) / d.length;\n      }\n    };\n  },\n  ntile: function ntile(field, num) {\n    num = +num;\n    if (!(num > 0)) error('ntile num must be greater than zero.');\n    var cume = WindowOps.cume_dist(),\n      _next2 = cume.next;\n    return {\n      init: cume.init,\n      next: function next(w) {\n        return Math.ceil(num * _next2(w));\n      }\n    };\n  },\n  lag: function lag(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: function next(w) {\n        var i = w.index - offset;\n        return i >= 0 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  lead: function lead(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: function next(w) {\n        var i = w.index + offset,\n          d = w.data;\n        return i < d.length ? field(d[i]) : null;\n      }\n    };\n  },\n  first_value: function first_value(field) {\n    return {\n      next: function next(w) {\n        return field(w.data[w.i0]);\n      }\n    };\n  },\n  last_value: function last_value(field) {\n    return {\n      next: function next(w) {\n        return field(w.data[w.i1 - 1]);\n      }\n    };\n  },\n  nth_value: function nth_value(field, nth) {\n    nth = +nth;\n    if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n    return {\n      next: function next(w) {\n        var i = w.i0 + (nth - 1);\n        return i < w.i1 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  prev_value: function prev_value(field) {\n    var prev;\n    return {\n      init: function init() {\n        return prev = null;\n      },\n      next: function next(w) {\n        var v = field(w.data[w.index]);\n        return v != null ? prev = v : prev;\n      }\n    };\n  },\n  next_value: function next_value(field) {\n    var v, i;\n    return {\n      init: function init() {\n        return v = null, i = -1;\n      },\n      next: function next(w) {\n        var d = w.data;\n        return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n      }\n    };\n  }\n};\nfunction find(field, data, index) {\n  for (var n = data.length; index < n; ++index) {\n    var v = field(data[index]);\n    if (v != null) return index;\n  }\n  return -1;\n}\nvar ValidWindowOps = Object.keys(WindowOps);\nfunction WindowState(_) {\n  var ops = array(_.ops),\n    fields = array(_.fields),\n    params = array(_.params),\n    as = array(_.as),\n    outputs = this.outputs = [],\n    windows = this.windows = [],\n    inputs = {},\n    map = {},\n    counts = [],\n    measures = [];\n  var countOnly = true;\n  function visitInputs(f) {\n    array(accessorFields(f)).forEach(function (_) {\n      return inputs[_] = 1;\n    });\n  }\n  visitInputs(_.sort);\n  ops.forEach(function (op, i) {\n    var field = fields[i],\n      mname = accessorName(field),\n      name = measureName(op, mname, as[i]);\n    visitInputs(field);\n    outputs.push(name); // Window operation\n\n    if (hasOwnProperty(WindowOps, op)) {\n      windows.push(WindowOp(op, fields[i], params[i], name));\n    } // Aggregate operation\n    else {\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      if (op === 'count') {\n        counts.push(name);\n        return;\n      }\n      countOnly = false;\n      var m = map[mname];\n      if (!m) {\n        m = map[mname] = [];\n        m.field = field;\n        measures.push(m);\n      }\n      m.push(createMeasure(op, name));\n    }\n  });\n  if (counts.length || measures.length) {\n    this.cell = cell(measures, counts, countOnly);\n  }\n  this.inputs = Object.keys(inputs);\n}\nvar prototype = WindowState.prototype;\nprototype.init = function () {\n  this.windows.forEach(function (_) {\n    return _.init();\n  });\n  if (this.cell) this.cell.init();\n};\nprototype.update = function (w, t) {\n  var cell = this.cell,\n    wind = this.windows,\n    data = w.data,\n    m = wind && wind.length;\n  var j;\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) {\n      cell.rem(data[j]);\n    }\n    for (j = w.p1; j < w.i1; ++j) {\n      cell.add(data[j]);\n    }\n    cell.set(t);\n  }\n  for (j = 0; j < m; ++j) {\n    wind[j].update(w, t);\n  }\n};\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(function (m) {\n    return compileMeasures(m, m.field);\n  });\n  var cell = {\n    num: 0,\n    agg: null,\n    store: false,\n    count: counts\n  };\n  if (!countOnly) {\n    var n = measures.length,\n      a = cell.agg = Array(n),\n      i = 0;\n    for (; i < n; ++i) {\n      a[i] = new measures[i](cell);\n    }\n  }\n  if (cell.store) {\n    var store = cell.data = new TupleStore();\n  }\n  cell.add = function (t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n    for (var _i3 = 0; _i3 < n; ++_i3) {\n      a[_i3].add(a[_i3].get(t), t);\n    }\n  };\n  cell.rem = function (t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n    for (var _i4 = 0; _i4 < n; ++_i4) {\n      a[_i4].rem(a[_i4].get(t), t);\n    }\n  };\n  cell.set = function (t) {\n    var i, n; // consolidate stored values\n\n    if (store) store.values(); // update tuple properties\n\n    for (i = 0, n = counts.length; i < n; ++i) {\n      t[counts[i]] = cell.num;\n    }\n    if (!countOnly) for (i = 0, n = a.length; i < n; ++i) {\n      a[i].set(t);\n    }\n  };\n  cell.init = function () {\n    cell.num = 0;\n    if (store) store.reset();\n    for (var _i5 = 0; _i5 < n; ++_i5) {\n      a[_i5].init();\n    }\n  };\n  return cell;\n}\n\n/**\n * Perform window calculations and write results to the input stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors\n *   for data fields to use as inputs to window operations.\n * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n * @param {Array<string>} [params.as] - An array of output field names for window operations.\n * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n *   number alone, ignoring peers with identical sort values. If false (default),\n *   the window boundaries will be adjusted to include peer values.\n */\n\nfunction Window(params) {\n  Transform.call(this, {}, params);\n  this._mlen = 0;\n  this._mods = [];\n}\nWindow.Definition = {\n  'type': 'Window',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'sort',\n    'type': 'compare'\n  }, {\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'ops',\n    'type': 'enum',\n    'array': true,\n    'values': ValidWindowOps.concat(ValidAggregateOps)\n  }, {\n    'name': 'params',\n    'type': 'number',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'frame',\n    'type': 'number',\n    'null': true,\n    'array': true,\n    'length': 2,\n    'default': [null, 0]\n  }, {\n    'name': 'ignorePeers',\n    'type': 'boolean',\n    'default': false\n  }]\n};\ninherits(Window, Transform, {\n  transform: function transform(_, pulse) {\n    var _this9 = this;\n    this.stamp = pulse.stamp;\n    var mod = _.modified(),\n      cmp = stableCompare(_.sort),\n      key = groupkey(_.groupby),\n      group = function group(t) {\n        return _this9.group(key(t));\n      }; // initialize window state\n\n    var state = this.state;\n    if (!state || mod) {\n      state = this.state = new WindowState(_);\n    } // partition input tuples\n\n    if (mod || pulse.modified(state.inputs)) {\n      this.value = {};\n      pulse.visit(pulse.SOURCE, function (t) {\n        return group(t).add(t);\n      });\n    } else {\n      pulse.visit(pulse.REM, function (t) {\n        return group(t).remove(t);\n      });\n      pulse.visit(pulse.ADD, function (t) {\n        return group(t).add(t);\n      });\n    } // perform window calculations for each modified partition\n\n    for (var i = 0, n = this._mlen; i < n; ++i) {\n      processPartition(this._mods[i], state, cmp, _);\n    }\n    this._mlen = 0;\n    this._mods = []; // TODO don't reflow everything?\n\n    return pulse.reflow(mod).modifies(state.outputs);\n  },\n  group: function group(key) {\n    var group = this.value[key];\n    if (!group) {\n      group = this.value[key] = SortedList(tupleid);\n      group.stamp = -1;\n    }\n    if (group.stamp < this.stamp) {\n      group.stamp = this.stamp;\n      this._mods[this._mlen++] = group;\n    }\n    return group;\n  }\n});\nfunction processPartition(list, state, cmp, _) {\n  var sort = _.sort,\n    range = sort && !_.ignorePeers,\n    frame = _.frame || [null, 0],\n    data = list.data(cmp),\n    // use cmp for stable sort\n    n = data.length,\n    b = range ? bisector(sort) : null,\n    w = {\n      i0: 0,\n      i1: 0,\n      p0: 0,\n      p1: 0,\n      index: 0,\n      data: data,\n      compare: sort || constant(-1)\n    };\n  state.init();\n  for (var i = 0; i < n; ++i) {\n    setWindow(w, frame, i, n);\n    if (range) adjustRange(w, b);\n    state.update(w, data[i]);\n  }\n}\nfunction setWindow(w, f, i, n) {\n  w.p0 = w.i0;\n  w.p1 = w.i1;\n  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n  w.index = i;\n} // if frame type is 'range', adjust window for peer values\n\nfunction adjustRange(w, bisect) {\n  var r0 = w.i0,\n    r1 = w.i1 - 1,\n    c = w.compare,\n    d = w.data,\n    n = d.length - 1;\n  if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n  if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n}\nexport { Aggregate as aggregate, Bin as bin, Collect as collect, Compare as compare, CountPattern as countpattern, Cross as cross, Density as density, DotBin as dotbin, Expression as expression, Extent as extent, Facet as facet, Field as field, Filter as filter, Flatten as flatten, Fold as fold, Formula as formula, Generate as generate, Impute as impute, JoinAggregate as joinaggregate, KDE as kde, Key as key, Load as load, Lookup as lookup, MultiExtent as multiextent, MultiValues as multivalues, Params as params, Pivot as pivot, PreFacet as prefacet, Project as project, Proxy as proxy, Quantile as quantile, Relay as relay, Sample as sample, Sequence as sequence, Sieve as sieve, Subflow as subflow, TimeUnit as timeunit, TupleIndex as tupleindex, Values as values, Window as window };","map":{"version":3,"names":["extend","identity","field","hasOwnProperty","extentIndex","inherits","array","accessorName","error","accessorFields","accessor","toNumber","merge","compare","truthy","extent","span","fastmap","isArray","key","ascending","peek","zero","constant","tupleid","Transform","replace","ingest","stableCompare","Operator","derive","rederive","quartiles","bootstrapCI","bin","randomKDE","randomMixture","randomNormal","randomLogNormal","randomUniform","sampleCurve","dotbin","quantiles","random","median","mean","min","max","range","bisector","utcInterval","timeInterval","timeBin","timeUnits","utcFloor","timeFloor","TIME_UNITS","multikey","f","x","n","length","i","k","String","groupkey","fields","measureName","op","as","noop","base_op","init","add","rem","idx","AggregateOps","values","m","cell","store","value","data","count","num","__count__","missing","valid","sum","v","product","undefined","mean_d","average","req","variance","dev","variancep","stdev","Math","sqrt","stdevp","stderr","distinct","get","ci0","ci1","q2","q1","q3","Number","isNaN","NaN","argmin","t","argmax","ValidAggregateOps","Object","keys","measure","out","name","forEach","createMeasure","compareIndex","a","b","resolve","agg","map","getreqs","sort","_ops","set","_out","compileMeasures","ops","slice","ctr","prototype","TupleStore","_key","reset","prototype$1","_add","_rem","_ext","_get","_q","push","r","Array","j","s","quartile","ci","_ci","Aggregate","params","call","_adds","_mods","_alen","_mlen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_counts","_prev","_inputs","_outputs","Definition","transform","_","pulse","aggr","fork","NO_SOURCE","NO_FIELDS","mod","modified","stamp","visit","SOURCE","REM","ADD","modifies","drop","cross","clean","runAfter","changes","curr","dims","vals","collect","cells","tuple","generate","base","index","inputs","outputs","inputMap","inputVisit","groupby","d","dname","cellkey","mname","outname","newcell","newtuple","measures","p","names","celltuple","counts","adds","mods","prev","EPSILON$1","Bin","band","interval","bins","_bins","start","step","b0","b1","flag","reflow","ADD_MOD","stop","ceil","anchor","floor","Infinity","SortedList","idFunc","source","input","$","cnt","remove","size","resort","filter","concat","Collect","ALL","list","materialize","changed","root","Compare","update$5","orders","CountPattern","tokenize","text","tcase","match","toUpperCase","toLowerCase","process","update","tokens","case","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","w","c","Cross","ADD_REM","left","Distributions","kde","mixture","normal","lognormal","uniform","DISTRIBUTIONS","FUNCTION","FIELD","parse","def","func","from","Density","distributions","dist","distribution","minsteps","steps","maxsteps","method","domain","fieldNames","partition$1","groups","g","Output","DotBin","autostep","smooth","Expression","update$4","expr","datum","Extent","isFinite","dataflow","warn","Subflow","parent","connect","target","detachSubflow","targets","evaluate","Facet","_keys","_targets","active","activate","flow","subflow","flows","sf","df","_group","detached","detach","initTargets","act","cache","rekey","group","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","Field","update$3","Filter","output","isMod","has","revisit","Flatten","arrays","maxlen","reduce","l","Fold","fnames","Formula","initonly","Generate","gen","generator","Methods","Empty","Impute","getValue","getField","impute","fName","kName","gNames","partition","keyvals","gVals","kVal","_impute","kMap","gMap","gKey","JoinAggregate","KDE","bandwidth","cumulative","density","scale","local","Key","update$2","flat","Load","_pending","StopPropagation","format","async","request","url","then","res","touch","Lookup","defaultValue","default","some","MultiExtent","update$1","ext","extents","e","MultiValues","Params","Pivot","_transform","aggregateParams","pivotKeys","limit","bind","PreFacet","Project","project","lut","addAll","dt","Proxy","Quantile","EPSILON","probs","q","Relay","Sample","cap","Sequence","Sieve","TimeUnit","OUTPUT","utc","timezone","_floor","offset","unit","u0","u1","units","maxbins","tunits","TupleIndex","clear","Values","run","WindowOp","param","fn","WindowOps","next","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","i0","last_value","i1","nth_value","nth","prev_value","next_value","find","ValidWindowOps","WindowState","windows","countOnly","visitInputs","wind","p0","p1","Window","cmp","state","processPartition","ignorePeers","frame","setWindow","adjustRange","abs","bisect","r0","r1","right","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window"],"sources":["/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/vega-transforms/build/vega-transforms.module.js"],"sourcesContent":["import { extend, identity, field, hasOwnProperty, extentIndex, inherits, array, accessorName, error, accessorFields, accessor, toNumber, merge, compare, truthy, extent, span, fastmap, isArray, key, ascending, peek, zero, constant } from 'vega-util';\nimport { tupleid, Transform, replace, ingest, stableCompare, Operator, derive, rederive } from 'vega-dataflow';\nimport { quartiles, bootstrapCI, bin, randomKDE, randomMixture, randomNormal, randomLogNormal, randomUniform, sampleCurve, dotbin, quantiles, random } from 'vega-statistics';\nimport { median, mean, min, max, range, bisector } from 'd3-array';\nimport { utcInterval, timeInterval, timeBin, timeUnits, utcFloor, timeFloor, TIME_UNITS } from 'vega-time';\n\nfunction multikey(f) {\n  return x => {\n    const n = f.length;\n    let i = 1,\n        k = String(f[0](x));\n\n    for (; i < n; ++i) {\n      k += '|' + f[i](x);\n    }\n\n    return k;\n  };\n}\nfunction groupkey(fields) {\n  return !fields || !fields.length ? function () {\n    return '';\n  } : fields.length === 1 ? fields[0] : multikey(fields);\n}\n\nfunction measureName(op, field, as) {\n  return as || op + (!field ? '' : '_' + field);\n}\n\nconst noop = () => {};\n\nconst base_op = {\n  init: noop,\n  add: noop,\n  rem: noop,\n  idx: 0\n};\nconst AggregateOps = {\n  values: {\n    init: m => m.cell.store = true,\n    value: m => m.cell.data.values(),\n    idx: -1\n  },\n  count: {\n    value: m => m.cell.num\n  },\n  __count__: {\n    value: m => m.missing + m.valid\n  },\n  missing: {\n    value: m => m.missing\n  },\n  valid: {\n    value: m => m.valid\n  },\n  sum: {\n    init: m => m.sum = 0,\n    value: m => m.sum,\n    add: (m, v) => m.sum += +v,\n    rem: (m, v) => m.sum -= v\n  },\n  product: {\n    init: m => m.product = 1,\n    value: m => m.valid ? m.product : undefined,\n    add: (m, v) => m.product *= v,\n    rem: (m, v) => m.product /= v\n  },\n  mean: {\n    init: m => m.mean = 0,\n    value: m => m.valid ? m.mean : undefined,\n    add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n    rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n  },\n  average: {\n    value: m => m.valid ? m.mean : undefined,\n    req: ['mean'],\n    idx: 1\n  },\n  variance: {\n    init: m => m.dev = 0,\n    value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n    add: (m, v) => m.dev += m.mean_d * (v - m.mean),\n    rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),\n    req: ['mean'],\n    idx: 1\n  },\n  variancep: {\n    value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n    req: ['variance'],\n    idx: 2\n  },\n  stdev: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n    req: ['variance'],\n    idx: 2\n  },\n  stdevp: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n    req: ['variance'],\n    idx: 2\n  },\n  stderr: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n    req: ['variance'],\n    idx: 2\n  },\n  distinct: {\n    value: m => m.cell.data.distinct(m.get),\n    req: ['values'],\n    idx: 3\n  },\n  ci0: {\n    value: m => m.cell.data.ci0(m.get),\n    req: ['values'],\n    idx: 3\n  },\n  ci1: {\n    value: m => m.cell.data.ci1(m.get),\n    req: ['values'],\n    idx: 3\n  },\n  median: {\n    value: m => m.cell.data.q2(m.get),\n    req: ['values'],\n    idx: 3\n  },\n  q1: {\n    value: m => m.cell.data.q1(m.get),\n    req: ['values'],\n    idx: 3\n  },\n  q3: {\n    value: m => m.cell.data.q3(m.get),\n    req: ['values'],\n    idx: 3\n  },\n  min: {\n    init: m => m.min = undefined,\n    value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,\n    add: (m, v) => {\n      if (v < m.min || m.min === undefined) m.min = v;\n    },\n    rem: (m, v) => {\n      if (v <= m.min) m.min = NaN;\n    },\n    req: ['values'],\n    idx: 4\n  },\n  max: {\n    init: m => m.max = undefined,\n    value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,\n    add: (m, v) => {\n      if (v > m.max || m.max === undefined) m.max = v;\n    },\n    rem: (m, v) => {\n      if (v >= m.max) m.max = NaN;\n    },\n    req: ['values'],\n    idx: 4\n  },\n  argmin: {\n    init: m => m.argmin = undefined,\n    value: m => m.argmin || m.cell.data.argmin(m.get),\n    add: (m, v, t) => {\n      if (v < m.min) m.argmin = t;\n    },\n    rem: (m, v) => {\n      if (v <= m.min) m.argmin = undefined;\n    },\n    req: ['min', 'values'],\n    idx: 3\n  },\n  argmax: {\n    init: m => m.argmax = undefined,\n    value: m => m.argmax || m.cell.data.argmax(m.get),\n    add: (m, v, t) => {\n      if (v > m.max) m.argmax = t;\n    },\n    rem: (m, v) => {\n      if (v >= m.max) m.argmax = undefined;\n    },\n    req: ['max', 'values'],\n    idx: 3\n  }\n};\nconst ValidAggregateOps = Object.keys(AggregateOps);\n\nfunction measure(key, value) {\n  return out => extend({\n    name: key,\n    out: out || key\n  }, base_op, value);\n}\n\nValidAggregateOps.forEach(key => {\n  AggregateOps[key] = measure(key, AggregateOps[key]);\n});\nfunction createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg) {\n  const map = {};\n  agg.forEach(a => map[a.name] = a);\n\n  const getreqs = a => {\n    if (!a.req) return;\n    a.req.forEach(key => {\n      if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n    });\n  };\n\n  agg.forEach(getreqs);\n  return Object.values(map).sort(compareIndex);\n}\n\nfunction init() {\n  this.valid = 0;\n  this.missing = 0;\n\n  this._ops.forEach(op => op.init(this));\n}\n\nfunction add(v, t) {\n  if (v == null || v === '') {\n    ++this.missing;\n    return;\n  }\n\n  if (v !== v) return;\n  ++this.valid;\n\n  this._ops.forEach(op => op.add(this, v, t));\n}\n\nfunction rem(v, t) {\n  if (v == null || v === '') {\n    --this.missing;\n    return;\n  }\n\n  if (v !== v) return;\n  --this.valid;\n\n  this._ops.forEach(op => op.rem(this, v, t));\n}\n\nfunction set(t) {\n  this._out.forEach(op => t[op.out] = op.value(this));\n\n  return t;\n}\n\nfunction compileMeasures(agg, field) {\n  const get = field || identity,\n        ops = resolve(agg),\n        out = agg.slice().sort(compareIndex);\n\n  function ctr(cell) {\n    this._ops = ops;\n    this._out = out;\n    this.cell = cell;\n    this.init();\n  }\n\n  ctr.prototype.init = init;\n  ctr.prototype.add = add;\n  ctr.prototype.rem = rem;\n  ctr.prototype.set = set;\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(op => op.out);\n  return ctr;\n}\n\nfunction TupleStore(key) {\n  this._key = key ? field(key) : tupleid;\n  this.reset();\n}\nconst prototype$1 = TupleStore.prototype;\n\nprototype$1.reset = function () {\n  this._add = [];\n  this._rem = [];\n  this._ext = null;\n  this._get = null;\n  this._q = null;\n};\n\nprototype$1.add = function (v) {\n  this._add.push(v);\n};\n\nprototype$1.rem = function (v) {\n  this._rem.push(v);\n};\n\nprototype$1.values = function () {\n  this._get = null;\n  if (this._rem.length === 0) return this._add;\n  const a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {};\n  let i, j, v; // use unique key field to clear removed values\n\n  for (i = 0; i < m; ++i) {\n    map[k(r[i])] = 1;\n  }\n\n  for (i = 0, j = 0; i < n; ++i) {\n    if (map[k(v = a[i])]) {\n      map[k(v)] = 0;\n    } else {\n      x[j++] = v;\n    }\n  }\n\n  this._rem = [];\n  return this._add = x;\n}; // memoizing statistics methods\n\n\nprototype$1.distinct = function (get) {\n  const v = this.values(),\n        map = {};\n  let n = v.length,\n      count = 0,\n      s;\n\n  while (--n >= 0) {\n    s = get(v[n]) + '';\n\n    if (!hasOwnProperty(map, s)) {\n      map[s] = 1;\n      ++count;\n    }\n  }\n\n  return count;\n};\n\nprototype$1.extent = function (get) {\n  if (this._get !== get || !this._ext) {\n    const v = this.values(),\n          i = extentIndex(v, get);\n    this._ext = [v[i[0]], v[i[1]]];\n    this._get = get;\n  }\n\n  return this._ext;\n};\n\nprototype$1.argmin = function (get) {\n  return this.extent(get)[0] || {};\n};\n\nprototype$1.argmax = function (get) {\n  return this.extent(get)[1] || {};\n};\n\nprototype$1.min = function (get) {\n  const m = this.extent(get)[0];\n  return m != null ? get(m) : undefined;\n};\n\nprototype$1.max = function (get) {\n  const m = this.extent(get)[1];\n  return m != null ? get(m) : undefined;\n};\n\nprototype$1.quartile = function (get) {\n  if (this._get !== get || !this._q) {\n    this._q = quartiles(this.values(), get);\n    this._get = get;\n  }\n\n  return this._q;\n};\n\nprototype$1.q1 = function (get) {\n  return this.quartile(get)[0];\n};\n\nprototype$1.q2 = function (get) {\n  return this.quartile(get)[1];\n};\n\nprototype$1.q3 = function (get) {\n  return this.quartile(get)[2];\n};\n\nprototype$1.ci = function (get) {\n  if (this._get !== get || !this._ci) {\n    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n    this._get = get;\n  }\n\n  return this._ci;\n};\n\nprototype$1.ci0 = function (get) {\n  return this.ci(get)[0];\n};\n\nprototype$1.ci1 = function (get) {\n  return this.ci(get)[1];\n};\n\n/**\n * Group-by aggregation operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n * @param {boolean} [params.cross=false] - A flag indicating that the full\n *   cross-product of groupby values should be generated, including empty cells.\n *   If true, the drop parameter is ignored and empty cells are retained.\n * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n */\n\nfunction Aggregate(params) {\n  Transform.call(this, null, params);\n  this._adds = []; // array of added output tuples\n\n  this._mods = []; // array of modified output tuples\n\n  this._alen = 0; // number of active added tuples\n\n  this._mlen = 0; // number of active modified tuples\n\n  this._drop = true; // should empty aggregation cells be removed\n\n  this._cross = false; // produce full cross-product of group-by values\n\n  this._dims = []; // group-by dimension accessors\n\n  this._dnames = []; // group-by dimension names\n\n  this._measures = []; // collection of aggregation monoids\n\n  this._countOnly = false; // flag indicating only count aggregation\n\n  this._counts = null; // collection of count fields\n\n  this._prev = null; // previous aggregation cells\n\n  this._inputs = null; // array of dependent input tuple field names\n\n  this._outputs = null; // array of output tuple field names\n}\nAggregate.Definition = {\n  'type': 'Aggregate',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'ops',\n    'type': 'enum',\n    'array': true,\n    'values': ValidAggregateOps\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'drop',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'cross',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'key',\n    'type': 'field'\n  }]\n};\ninherits(Aggregate, Transform, {\n  transform(_, pulse) {\n    const aggr = this,\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    } // Indicate output fields and return aggregate tuples.\n\n\n    out.modifies(aggr._outputs); // Should empty cells be dropped?\n\n    aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    if (pulse.clean() && aggr._drop) {\n      out.clean(true).runAfter(() => this.clean());\n    }\n\n    return aggr.changes(out);\n  },\n\n  cross() {\n    const aggr = this,\n          curr = aggr.value,\n          dims = aggr._dnames,\n          vals = dims.map(() => ({})),\n          n = dims.length; // collect all group-by domain values\n\n    function collect(cells) {\n      let key, i, t, v;\n\n      for (key in cells) {\n        t = cells[key].tuple;\n\n        for (i = 0; i < n; ++i) {\n          vals[i][v = t[dims[i]]] = v;\n        }\n      }\n    }\n\n    collect(aggr._prev);\n    collect(curr); // iterate over key cross-product, create cells as needed\n\n    function generate(base, tuple, index) {\n      const name = dims[index],\n            v = vals[index++];\n\n      for (const k in v) {\n        const key = base ? base + '|' + k : k;\n        tuple[name] = v[k];\n        if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n\n    generate('', {}, 0);\n  },\n\n  init(_) {\n    // initialize input and output fields\n    const inputs = this._inputs = [],\n          outputs = this._outputs = [],\n          inputMap = {};\n\n    function inputVisit(get) {\n      const fields = array(accessorFields(get)),\n            n = fields.length;\n      let i = 0,\n          f;\n\n      for (; i < n; ++i) {\n        if (!inputMap[f = fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    } // initialize group-by dimensions\n\n\n    this._dims = array(_.groupby);\n    this._dnames = this._dims.map(d => {\n      const dname = accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures\n\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n    const fields = _.fields || [null],\n          ops = _.ops || ['count'],\n          as = _.as || [],\n          n = fields.length,\n          map = {};\n    let field, op, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i = 0; i < n; ++i) {\n      field = fields[i];\n      op = ops[i];\n\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n\n      mname = accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n\n        continue;\n      }\n\n      m = map[mname];\n\n      if (!m) {\n        inputVisit(field);\n        m = map[mname] = [];\n        m.field = field;\n\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n\n    this._measures = this._measures.map(m => compileMeasures(m, m.field));\n    return {}; // aggregation cells (this.value)\n  },\n\n  // -- Cell Management -----\n  cellkey: groupkey(),\n\n  cell(key, t) {\n    let cell = this.value[key];\n\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n\n    return cell;\n  },\n\n  newcell(key, t) {\n    const cell = {\n      key: key,\n      num: 0,\n      agg: null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      const measures = this._measures,\n            n = measures.length;\n      cell.agg = Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  },\n\n  newtuple(t, p) {\n    const names = this._dnames,\n          dims = this._dims,\n          n = dims.length,\n          x = {};\n\n    for (let i = 0; i < n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? replace(p.tuple, x) : ingest(x);\n  },\n\n  clean() {\n    const cells = this.value;\n\n    for (const key in cells) {\n      if (cells[key].num === 0) {\n        delete cells[key];\n      }\n    }\n  },\n\n  // -- Process Tuples -----\n  add(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n    cell.num += 1;\n    if (this._countOnly) return;\n    if (cell.store) cell.data.add(t);\n    const agg = cell.agg;\n\n    for (let i = 0, n = agg.length; i < n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  },\n\n  rem(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n    cell.num -= 1;\n    if (this._countOnly) return;\n    if (cell.store) cell.data.rem(t);\n    const agg = cell.agg;\n\n    for (let i = 0, n = agg.length; i < n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  },\n\n  celltuple(cell) {\n    const tuple = cell.tuple,\n          counts = this._counts; // consolidate stored values\n\n    if (cell.store) {\n      cell.data.values();\n    } // update tuple properties\n\n\n    for (let i = 0, n = counts.length; i < n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n\n    if (!this._countOnly) {\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  },\n\n  changes(out) {\n    const adds = this._adds,\n          mods = this._mods,\n          prev = this._prev,\n          drop = this._drop,\n          add = out.add,\n          rem = out.rem,\n          mod = out.mod;\n    let cell, key, i, n;\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i = 0, n = this._alen; i < n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i = 0, n = this._mlen; i < n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n\n    this._prev = null;\n    return out;\n  }\n\n});\n\nconst EPSILON$1 = 1e-14;\n/**\n * Generates a binning function for discretizing data.\n * @constructor\n * @param {object} params - The parameters for this operator. The\n *   provided values should be valid options for the {@link bin} function.\n * @param {function(object): *} params.field - The data field to bin.\n */\n\nfunction Bin(params) {\n  Transform.call(this, null, params);\n}\nBin.Definition = {\n  'type': 'Bin',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'interval',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'anchor',\n    'type': 'number'\n  }, {\n    'name': 'maxbins',\n    'type': 'number',\n    'default': 20\n  }, {\n    'name': 'base',\n    'type': 'number',\n    'default': 10\n  }, {\n    'name': 'divide',\n    'type': 'number',\n    'array': true,\n    'default': [5, 2]\n  }, {\n    'name': 'extent',\n    'type': 'number',\n    'array': true,\n    'length': 2,\n    'required': true\n  }, {\n    'name': 'span',\n    'type': 'number'\n  }, {\n    'name': 'step',\n    'type': 'number'\n  }, {\n    'name': 'steps',\n    'type': 'number',\n    'array': true\n  }, {\n    'name': 'minstep',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'nice',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'name',\n    'type': 'string'\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['bin0', 'bin1']\n  }]\n};\ninherits(Bin, Transform, {\n  transform(_, pulse) {\n    const band = _.interval !== false,\n          bins = this._bins(_),\n          start = bins.start,\n          step = bins.step,\n          as = _.as || ['bin0', 'bin1'],\n          b0 = as[0],\n          b1 = as[1];\n\n    let flag;\n\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, band ? t => {\n      const v = bins(t); // minimum bin value (inclusive)\n\n      t[b0] = v; // maximum bin value (exclusive)\n      // use convoluted math for better floating point agreement\n      // see https://github.com/vega/vega/issues/830\n      // infinite values propagate through this formula! #2227\n\n      t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n    } : t => t[b0] = bins(t));\n    return pulse.modifies(band ? as : b0);\n  },\n\n  _bins(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const field = _.field,\n          bins = bin(_),\n          step = bins.step;\n    let start = bins.start,\n        stop = start + Math.ceil((bins.stop - start) / step) * step,\n        a,\n        d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    const f = function (t) {\n      let v = toNumber(field(t));\n      return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n    };\n\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n    return this.value = accessor(f, accessorFields(field), _.name || 'bin_' + accessorName(field));\n  }\n\n});\n\nfunction SortedList (idFunc, source, input) {\n  const $ = idFunc;\n  let data = source || [],\n      add = input || [],\n      rem = {},\n      cnt = 0;\n  return {\n    add: t => add.push(t),\n    remove: t => rem[$(t)] = ++cnt,\n    size: () => data.length,\n    data: (compare, resort) => {\n      if (cnt) {\n        data = data.filter(t => !rem[$(t)]);\n        rem = {};\n        cnt = 0;\n      }\n\n      if (resort && compare) {\n        data.sort(compare);\n      }\n\n      if (add.length) {\n        data = compare ? merge(compare, data, add.sort(compare)) : data.concat(add);\n        add = [];\n      }\n\n      return data;\n    }\n  };\n}\n\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\n\nfunction Collect(params) {\n  Transform.call(this, [], params);\n}\nCollect.Definition = {\n  'type': 'Collect',\n  'metadata': {\n    'source': true\n  },\n  'params': [{\n    'name': 'sort',\n    'type': 'compare'\n  }]\n};\ninherits(Collect, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n          sort = _.sort,\n          mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n    out.visit(out.REM, list.remove);\n    this.modified(mod);\n    this.value = out.source = list.data(stableCompare(sort), mod); // propagate tree root if defined\n\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  }\n\n});\n\n/**\n * Generates a comparator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string|function>} params.fields - The fields to compare.\n * @param {Array<string>} [params.orders] - The sort orders.\n *   Each entry should be one of \"ascending\" (default) or \"descending\".\n */\n\nfunction Compare(params) {\n  Operator.call(this, null, update$5, params);\n}\ninherits(Compare, Operator);\n\nfunction update$5(_) {\n  return this.value && !_.modified() ? this.value : compare(_.fields, _.orders);\n}\n\n/**\n * Count regexp-defined pattern occurrences in a text field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the text field.\n * @param {string} [params.pattern] - RegExp string defining the text pattern.\n * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n * @param {string} [params.stopwords] - RegExp string of words to ignore.\n */\n\nfunction CountPattern(params) {\n  Transform.call(this, null, params);\n}\nCountPattern.Definition = {\n  'type': 'CountPattern',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'case',\n    'type': 'enum',\n    'values': ['upper', 'lower', 'mixed'],\n    'default': 'mixed'\n  }, {\n    'name': 'pattern',\n    'type': 'string',\n    'default': '[\\\\w\"]+'\n  }, {\n    'name': 'stopwords',\n    'type': 'string',\n    'default': ''\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['text', 'count']\n  }]\n};\n\nfunction tokenize(text, tcase, match) {\n  switch (tcase) {\n    case 'upper':\n      text = text.toUpperCase();\n      break;\n\n    case 'lower':\n      text = text.toLowerCase();\n      break;\n  }\n\n  return text.match(match);\n}\n\ninherits(CountPattern, Transform, {\n  transform(_, pulse) {\n    const process = update => tuple => {\n      var tokens = tokenize(get(tuple), _.case, match) || [],\n          t;\n\n      for (var i = 0, n = tokens.length; i < n; ++i) {\n        if (!stop.test(t = tokens[i])) update(t);\n      }\n    };\n\n    const init = this._parameterCheck(_, pulse),\n          counts = this._counts,\n          match = this._match,\n          stop = this._stop,\n          get = _.field,\n          as = _.as || ['text', 'count'],\n          add = process(t => counts[t] = 1 + (counts[t] || 0)),\n          rem = process(t => counts[t] -= 1);\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  },\n\n  _parameterCheck(_, pulse) {\n    let init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  },\n\n  _finish(pulse, as) {\n    const counts = this._counts,\n          tuples = this._tuples || (this._tuples = {}),\n          text = as[0],\n          count = as[1],\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    let w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n\n      if (!t && c) {\n        tuples[w] = t = ingest({});\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  }\n\n});\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\n\nfunction Cross(params) {\n  Transform.call(this, null, params);\n}\nCross.Definition = {\n  'type': 'Cross',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'filter',\n    'type': 'expr'\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['a', 'b']\n  }]\n};\ninherits(Cross, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          as = _.as || ['a', 'b'],\n          a = as[0],\n          b = as[1],\n          reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n\n    let data = this.value;\n\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  }\n\n});\n\nfunction cross(input, a, b, filter) {\n  var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j,\n      left;\n\n  for (; i < n; ++i) {\n    t[a] = left = input[i];\n\n    for (j = 0; j < n; ++j) {\n      t[b] = input[j];\n\n      if (filter(t)) {\n        data.push(ingest(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n\n  return data;\n}\n\nconst Distributions = {\n  kde: randomKDE,\n  mixture: randomMixture,\n  normal: randomNormal,\n  lognormal: randomLogNormal,\n  uniform: randomUniform\n};\nconst DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n/**\n * Parse a parameter object for a probability distribution.\n * @param {object} def - The distribution parameter object.\n * @param {function():Array<object>} - A method for requesting\n *   source data. Used for distributions (such as KDE) that\n *   require sample data points. This method will only be\n *   invoked if the 'from' parameter for a target data source\n *   is not provided. Typically this method returns backing\n *   source data for a Pulse object.\n * @return {object} - The output distribution object.\n */\n\nfunction parse(def, data) {\n  const func = def[FUNCTION];\n\n  if (!hasOwnProperty(Distributions, func)) {\n    error('Unknown distribution function: ' + func);\n  }\n\n  const d = Distributions[func]();\n\n  for (const name in def) {\n    // if data field, extract values\n    if (name === FIELD) {\n      d.data((def.from || data()).map(def[name]));\n    } // if distribution mixture, recurse to parse each definition\n    else if (name === DISTRIBUTIONS) {\n      d[name](def[name].map(_ => parse(_, data)));\n    } // otherwise, simply set the parameter\n    else if (typeof d[name] === FUNCTION) {\n      d[name](def[name]);\n    }\n  }\n\n  return d;\n}\n\n/**\n * Grid sample points for a probability density. Given a distribution and\n * a sampling extent, will generate points suitable for plotting either\n * PDF (probability density function) or CDF (cumulative distribution\n * function) curves.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.distribution - The probability distribution. This\n *   is an object parameter dependent on the distribution type.\n * @param {string} [params.method='pdf'] - The distribution method to sample.\n *   One of 'pdf' or 'cdf'.\n * @param {Array<number>} [params.extent] - The [min, max] extent over which\n *   to sample the distribution. This argument is required in most cases, but\n *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n *   that returns numerical sample points from which the extent can be deduced.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\n\nfunction Density(params) {\n  Transform.call(this, null, params);\n}\nconst distributions = [{\n  'key': {\n    'function': 'normal'\n  },\n  'params': [{\n    'name': 'mean',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'stdev',\n    'type': 'number',\n    'default': 1\n  }]\n}, {\n  'key': {\n    'function': 'lognormal'\n  },\n  'params': [{\n    'name': 'mean',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'stdev',\n    'type': 'number',\n    'default': 1\n  }]\n}, {\n  'key': {\n    'function': 'uniform'\n  },\n  'params': [{\n    'name': 'min',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'max',\n    'type': 'number',\n    'default': 1\n  }]\n}, {\n  'key': {\n    'function': 'kde'\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'from',\n    'type': 'data'\n  }, {\n    'name': 'bandwidth',\n    'type': 'number',\n    'default': 0\n  }]\n}];\nconst mixture = {\n  'key': {\n    'function': 'mixture'\n  },\n  'params': [{\n    'name': 'distributions',\n    'type': 'param',\n    'array': true,\n    'params': distributions\n  }, {\n    'name': 'weights',\n    'type': 'number',\n    'array': true\n  }]\n};\nDensity.Definition = {\n  'type': 'Density',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'extent',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'steps',\n    'type': 'number'\n  }, {\n    'name': 'minsteps',\n    'type': 'number',\n    'default': 25\n  }, {\n    'name': 'maxsteps',\n    'type': 'number',\n    'default': 200\n  }, {\n    'name': 'method',\n    'type': 'string',\n    'default': 'pdf',\n    'values': ['pdf', 'cdf']\n  }, {\n    'name': 'distribution',\n    'type': 'param',\n    'params': distributions.concat(mixture)\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'default': ['value', 'density']\n  }]\n};\ninherits(Density, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const dist = parse(_.distribution, source(pulse)),\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n      let method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n\n      if (!_.extent && !dist.data) {\n        error('Missing density extent parameter.');\n      }\n\n      method = dist[method];\n      const as = _.as || ['value', 'density'],\n            domain = _.extent || extent(dist.data()),\n            values = sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n        const tuple = {};\n        tuple[as[0]] = v[0];\n        tuple[as[1]] = v[1];\n        return ingest(tuple);\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n\n});\n\nfunction source(pulse) {\n  return () => pulse.materialize(pulse.SOURCE).source;\n}\n\nfunction fieldNames(fields, as) {\n  if (!fields) return null;\n  return fields.map((f, i) => as[i] || accessorName(f));\n}\nfunction partition$1(data, groupby, field) {\n  const groups = [],\n        get = f => f(t);\n\n  let map, i, n, t, k, g; // partition data points into groups\n\n  if (groupby == null) {\n    groups.push(data.map(field));\n  } else {\n    for (map = {}, i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n\n      if (!g) {\n        map[k] = g = [];\n        g.dims = k;\n        groups.push(g);\n      }\n\n      g.push(field(t));\n    }\n  }\n\n  return groups;\n}\n\nconst Output = 'bin';\n/**\n * Dot density binning for dot plot construction.\n * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to bin.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.step] - The step size (bin width) within which dots should be\n *   stacked. Defaults to 1/30 of the extent of the data *field*.\n * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n *   stacks should be smoothed to reduce variance.\n */\n\nfunction DotBin(params) {\n  Transform.call(this, null, params);\n}\nDotBin.Definition = {\n  'type': 'DotBin',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'step',\n    'type': 'number'\n  }, {\n    'name': 'smooth',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'default': Output\n  }]\n};\n\nconst autostep = (data, field) => span(extent(data, field)) / 30;\n\ninherits(DotBin, Transform, {\n  transform(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition$1(pulse.source, _.groupby, identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length; // compute dotplot bins per group\n\n    let min = Infinity,\n        max = -Infinity,\n        i = 0,\n        j;\n\n    for (; i < n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n\n      for (const v of dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  }\n\n});\n\n/**\n * Wraps an expression function with access to external parameters.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function} params.expr - The expression function. The\n *  function should accept both a datum and a parameter object.\n *  This operator's value will be a new function that wraps the\n *  expression function with access to this operator's parameters.\n */\n\nfunction Expression(params) {\n  Operator.call(this, null, update$4, params);\n  this.modified(true);\n}\ninherits(Expression, Operator);\n\nfunction update$4(_) {\n  const expr = _.expr;\n  return this.value && !_.modified('expr') ? this.value : accessor(datum => expr(datum, _), accessorFields(expr), accessorName(expr));\n}\n\n/**\n * Computes extents (min/max) for a data field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field over which to compute extends.\n */\n\nfunction Extent(params) {\n  Transform.call(this, [undefined, undefined], params);\n}\nExtent.Definition = {\n  'type': 'Extent',\n  'metadata': {},\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }]\n};\ninherits(Extent, Transform, {\n  transform(_, pulse) {\n    const extent = this.value,\n          field = _.field,\n          mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n\n    let min = extent[0],\n        max = extent[1];\n\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n      const v = toNumber(field(t));\n\n      if (v != null) {\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = accessorName(field);\n      if (name) name = \" for field \\\"\".concat(name, \"\\\"\");\n      pulse.dataflow.warn(\"Infinite extent\".concat(name, \": [\").concat(min, \", \").concat(max, \"]\"));\n      min = max = undefined;\n    }\n\n    this.value = [min, max];\n  }\n\n});\n\n/**\n * Provides a bridge between a parent transform and a target subflow that\n * consumes only a subset of the tuples that pass through the parent.\n * @constructor\n * @param {Pulse} pulse - A pulse to use as the value of this operator.\n * @param {Transform} parent - The parent transform (typically a Facet instance).\n */\n\nfunction Subflow(pulse, parent) {\n  Operator.call(this, pulse);\n  this.parent = parent;\n  this.count = 0;\n}\ninherits(Subflow, Operator, {\n  /**\n   * Routes pulses from this subflow to a target transform.\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  connect(target) {\n    this.detachSubflow = target.detachSubflow;\n    this.targets().add(target);\n    return target.source = this;\n  },\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  add(t) {\n    this.count += 1;\n    this.value.add.push(t);\n  },\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  rem(t) {\n    this.count -= 1;\n    this.value.rem.push(t);\n  },\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  mod(t) {\n    this.value.mod.push(t);\n  },\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  init(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  },\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  evaluate() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  }\n\n});\n\n/**\n * Facets a dataflow into a set of subflows based on a key.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): *} params.key - The key field to facet by.\n */\n\nfunction Facet(params) {\n  Transform.call(this, {}, params);\n  this._keys = fastmap(); // cache previously calculated key values\n  // keep track of active subflows, use as targets array for listeners\n  // this allows us to limit propagation to only updated subflows\n\n  const a = this._targets = [];\n  a.active = 0;\n\n  a.forEach = f => {\n    for (let i = 0, n = a.active; i < n; ++i) {\n      f(a[i], i, a);\n    }\n  };\n}\ninherits(Facet, Transform, {\n  activate(flow) {\n    this._targets[this._targets.active++] = flow;\n  },\n\n  // parent argument provided by PreFacet subclass\n  subflow(key, flow, pulse, parent) {\n    const flows = this.value;\n    let sf = hasOwnProperty(flows, key) && flows[key],\n        df,\n        p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n      df.add(sf).connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  },\n\n  clean() {\n    const flows = this.value;\n    let detached = 0;\n\n    for (const key in flows) {\n      if (flows[key].count === 0) {\n        const detach = flows[key].detachSubflow;\n        if (detach) detach();\n        delete flows[key];\n        ++detached;\n      }\n    } // remove inactive targets from the active targets array\n\n\n    if (detached) {\n      const active = this._targets.filter(sf => sf && sf.count > 0);\n\n      this.initTargets(active);\n    }\n  },\n\n  initTargets(act) {\n    const a = this._targets,\n          n = a.length,\n          m = act ? act.length : 0;\n    let i = 0;\n\n    for (; i < m; ++i) {\n      a[i] = act[i];\n    }\n\n    for (; i < n && a[i] != null; ++i) {\n      a[i] = null; // ensure old flows can be garbage collected\n    }\n\n    a.active = m;\n  },\n\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          key = _.key,\n          flow = _.subflow,\n          cache = this._keys,\n          rekey = _.modified('key'),\n          subflow = key => this.subflow(key, flow, pulse);\n\n    this._group = _.group || {};\n    this.initTargets(); // reset list of active subflows\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t),\n            k = cache.get(id);\n\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n    pulse.visit(pulse.ADD, t => {\n      const k = key(t);\n      cache.set(tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, t => {\n        subflow(cache.get(tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (pulse.clean()) {\n      df.runAfter(() => {\n        this.clean();\n        cache.clean();\n      });\n    } else if (cache.empty > df.cleanThreshold) {\n      df.runAfter(cache.clean);\n    }\n\n    return pulse;\n  }\n\n});\n\n/**\n * Generates one or more field accessor functions.\n * If the 'name' parameter is an array, an array of field accessors\n * will be created and the 'as' parameter will be ignored.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.name - The field name(s) to access.\n * @param {string} params.as - The accessor function name.\n */\n\nfunction Field(params) {\n  Operator.call(this, null, update$3, params);\n}\ninherits(Field, Operator);\n\nfunction update$3(_) {\n  return this.value && !_.modified() ? this.value : isArray(_.name) ? array(_.name).map(f => field(f)) : field(_.name, _.as);\n}\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\n\nfunction Filter(params) {\n  Transform.call(this, fastmap(), params);\n}\nFilter.Definition = {\n  'type': 'Filter',\n  'metadata': {\n    'changes': true\n  },\n  'params': [{\n    'name': 'expr',\n    'type': 'expr',\n    'required': true\n  }]\n};\ninherits(Filter, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          cache = this.value,\n          // cache ids of filtered tuples\n    output = pulse.fork(),\n          add = output.add,\n          rem = output.rem,\n          mod = output.mod,\n          test = _.expr;\n    let isMod = true;\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      if (!cache.has(id)) rem.push(t);else cache.delete(id);\n    });\n    pulse.visit(pulse.ADD, t => {\n      if (test(t, _)) add.push(t);else cache.set(tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      const id = tupleid(t),\n            b = test(t, _),\n            s = cache.get(id);\n\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  }\n\n});\n\n/**\n * Flattens array-typed field values into new data objects.\n * If multiple fields are specified, they are treated as parallel arrays,\n * with output values included for each matching index (or null if missing).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of field\n *   accessors for the tuple fields that should be flattened.\n * @param {string} [params.index] - Optional output field name for index\n *   value. If unspecified, no index field is included in the output.\n * @param {Array<string>} [params.as] - Output field names for flattened\n *   array fields. Any unspecified fields will use the field name provided\n *   by the fields accessors.\n */\n\nfunction Flatten(params) {\n  Transform.call(this, [], params);\n}\nFlatten.Definition = {\n  'type': 'Flatten',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'fields',\n    'type': 'field',\n    'array': true,\n    'required': true\n  }, {\n    'name': 'index',\n    'type': 'string'\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true\n  }]\n};\ninherits(Flatten, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(fields, _.as || []),\n          index = _.index || null,\n          m = as.length; // remove any previous results\n\n    out.rem = this.value; // generate flattened tuples\n\n    pulse.visit(pulse.SOURCE, t => {\n      const arrays = fields.map(f => f(t)),\n            maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n      let i = 0,\n          j,\n          d,\n          v;\n\n      for (; i < maxlen; ++i) {\n        d = derive(t);\n\n        for (j = 0; j < m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n\n        if (index) {\n          d[index] = i;\n        }\n\n        out.add.push(d);\n      }\n    });\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  }\n\n});\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\n\nfunction Fold(params) {\n  Transform.call(this, [], params);\n}\nFold.Definition = {\n  'type': 'Fold',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'fields',\n    'type': 'field',\n    'array': true,\n    'required': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': ['key', 'value']\n  }]\n};\ninherits(Fold, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          fnames = fields.map(accessorName),\n          as = _.as || ['key', 'value'],\n          k = as[0],\n          v = as[1],\n          n = fields.length;\n    out.rem = this.value;\n    pulse.visit(pulse.SOURCE, t => {\n      for (let i = 0, d; i < n; ++i) {\n        d = derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  }\n\n});\n\n/**\n * Invokes a function for each data tuple and saves the results as a new field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n * @param {string} params.as - The field name under which to save the result.\n * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n *   added tuples only, and does not update in response to modifications.\n */\n\nfunction Formula(params) {\n  Transform.call(this, null, params);\n}\nFormula.Definition = {\n  'type': 'Formula',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'expr',\n    'type': 'expr',\n    'required': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'required': true\n  }, {\n    'name': 'initonly',\n    'type': 'boolean'\n  }]\n};\ninherits(Formula, Transform, {\n  transform(_, pulse) {\n    const func = _.expr,\n          as = _.as,\n          mod = _.modified(),\n          flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  }\n\n});\n\n/**\n * Generates data tuples using a provided generator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Parameters): object} params.generator - A tuple generator\n *   function. This function is given the operator parameters as input.\n *   Changes to any additional parameters will not trigger re-calculation\n *   of previously generated tuples. Only future tuples are affected.\n * @param {number} params.size - The number of tuples to produce.\n */\n\nfunction Generate(params) {\n  Transform.call(this, [], params);\n}\ninherits(Generate, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          gen = _.generator;\n    let data = this.value,\n        num = _.size - data.length,\n        add,\n        rem,\n        t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add = []; --num >= 0;) {\n        add.push(t = ingest(gen(_)));\n        data.push(t);\n      }\n\n      out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  }\n\n});\n\nconst Methods = {\n  value: 'value',\n  median: median,\n  mean: mean,\n  min: min,\n  max: max\n};\nconst Empty = [];\n/**\n * Impute missing values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to impute.\n * @param {Array<function(object): *>} [params.groupby] - An array of\n *   accessors to determine series within which to perform imputation.\n * @param {function(object): *} params.key - An accessor for a key value.\n *   Each key value should be unique within a group. New tuples will be\n *   imputed for any key values that are not found within a group.\n * @param {Array<*>} [params.keyvals] - Optional array of required key\n *   values. New tuples will be imputed for any key values that are not\n *   found within a group. In addition, these values will be automatically\n *   augmented with the key values observed in the input data.\n * @param {string} [method='value'] - The imputation method to use. One of\n *   'value', 'mean', 'median', 'max', 'min'.\n * @param {*} [value=0] - The constant value to use for imputation\n *   when using method 'value'.\n */\n\nfunction Impute(params) {\n  Transform.call(this, [], params);\n}\nImpute.Definition = {\n  'type': 'Impute',\n  'metadata': {\n    'changes': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'key',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'keyvals',\n    'array': true\n  }, {\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'method',\n    'type': 'enum',\n    'default': 'value',\n    'values': ['value', 'mean', 'median', 'max', 'min']\n  }, {\n    'name': 'value',\n    'default': 0\n  }]\n};\n\nfunction getValue(_) {\n  var m = _.method || Methods.value,\n      v;\n\n  if (Methods[m] == null) {\n    error('Unrecognized imputation method: ' + m);\n  } else if (m === Methods.value) {\n    v = _.value !== undefined ? _.value : 0;\n    return () => v;\n  } else {\n    return Methods[m];\n  }\n}\n\nfunction getField(_) {\n  const f = _.field;\n  return t => t ? f(t) : NaN;\n}\n\ninherits(Impute, Transform, {\n  transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = accessorName(_.field),\n        kName = accessorName(_.key),\n        gNames = (_.groupby || []).map(accessorName),\n        groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group,\n        value,\n        gVals,\n        kVal,\n        g,\n        i,\n        j,\n        l,\n        n,\n        t;\n\n    for (g = 0, l = groups.length; g < l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN; // add tuples for missing values\n\n      for (j = 0; j < m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n        t = {\n          _impute: true\n        };\n\n        for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];\n\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n        curr.push(ingest(t));\n      }\n    } // update pulse with imputed tuples\n\n\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n    return out;\n  }\n\n});\n\nfunction partition(data, groupby, key, keyvals) {\n  var get = f => f(t),\n      groups = [],\n      domain = keyvals ? keyvals.slice() : [],\n      kMap = {},\n      gMap = {},\n      gVals,\n      gKey,\n      group,\n      i,\n      j,\n      k,\n      n,\n      t;\n\n  domain.forEach((k, i) => kMap[k] = i + 1);\n\n  for (i = 0, n = data.length; i < n; ++i) {\n    t = data[i];\n    k = key(t);\n    j = kMap[k] || (kMap[k] = domain.push(k));\n    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n\n    if (!(group = gMap[gKey])) {\n      group = gMap[gKey] = [];\n      groups.push(group);\n      group.values = gVals;\n    }\n\n    group[j - 1] = t;\n  }\n\n  groups.domain = domain;\n  return groups;\n}\n\n/**\n * Extend input tuples with aggregate values.\n * Calcuates aggregate values and joins them with the input stream.\n * @constructor\n */\n\nfunction JoinAggregate(params) {\n  Aggregate.call(this, params);\n}\nJoinAggregate.Definition = {\n  'type': 'JoinAggregate',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'ops',\n    'type': 'enum',\n    'array': true,\n    'values': ValidAggregateOps\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'key',\n    'type': 'field'\n  }]\n};\ninherits(JoinAggregate, Aggregate, {\n  transform(_, pulse) {\n    const aggr = this,\n          mod = _.modified();\n\n    let cells; // process all input tuples to calculate aggregates\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    } // update aggregation cells\n\n\n    aggr.changes(); // write aggregate values to input tuples\n\n    pulse.visit(pulse.SOURCE, t => {\n      extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n    return pulse.reflow(mod).modifies(this._outputs);\n  },\n\n  changes() {\n    const adds = this._adds,\n          mods = this._mods;\n    let i, n;\n\n    for (i = 0, n = this._alen; i < n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i = 0, n = this._mlen; i < n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  }\n\n});\n\n/**\n * Compute kernel density estimates (KDE) for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {function(object): *} params.field - An accessor for the data field\n *   to estimate.\n * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n *   If zero or unspecified, the bandwidth is automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n *   density (false) or cumulative distribution (true) should be generated.\n * @param {Array<number>} [params.extent] - The domain extent over which to\n *   plot the density. If unspecified, the [min, max] data extent is used.\n * @param {string} [params.resolve='independent'] - Indicates how parameters for\n *   multiple densities should be resolved. If \"independent\" (the default), each\n *   density may have its own domain extent and dynamic number of curve sample\n *   steps. If \"shared\", the KDE transform will ensure that all densities are\n *   defined over a shared domain and curve steps, enabling stacking.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\n\nfunction KDE(params) {\n  Transform.call(this, null, params);\n}\nKDE.Definition = {\n  'type': 'KDE',\n  'metadata': {\n    'generates': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'cumulative',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'counts',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'bandwidth',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'extent',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'resolve',\n    'type': 'enum',\n    'values': ['shared', 'independent'],\n    'default': 'independent'\n  }, {\n    'name': 'steps',\n    'type': 'number'\n  }, {\n    'name': 'minsteps',\n    'type': 'number',\n    'default': 25\n  }, {\n    'name': 'maxsteps',\n    'type': 'number',\n    'default': 200\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'default': ['value', 'density']\n  }]\n};\ninherits(KDE, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(source, _.groupby, _.field),\n            names = (_.groupby || []).map(accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || extent(g);\n        sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n          const t = {};\n\n          for (let i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n\n          t[as[0]] = v[0];\n          t[as[1]] = v[1] * scale;\n          values.push(ingest(t));\n        });\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n\n});\n\n/**\n * Generates a key function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The field name(s) for the key function.\n * @param {boolean} params.flat - A boolean flag indicating if the field names\n *  should be treated as flat property names, side-stepping nested field\n *  lookups normally indicated by dot or bracket notation.\n */\n\nfunction Key(params) {\n  Operator.call(this, null, update$2, params);\n}\ninherits(Key, Operator);\n\nfunction update$2(_) {\n  return this.value && !_.modified() ? this.value : key(_.fields, _.flat);\n}\n\n/**\n * Load and parse data from an external source. Marshalls parameter\n * values and then invokes the Dataflow request method.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.url - The URL to load from.\n * @param {object} params.format - The data format options.\n */\n\nfunction Load(params) {\n  Transform.call(this, [], params);\n  this._pending = null;\n}\ninherits(Load, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (this._pending) {\n      // update state and return pulse\n      return output(this, pulse, this._pending);\n    }\n\n    if (stop(_)) return pulse.StopPropagation;\n\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      const p = df.request(_.url, _.format).then(res => {\n        this._pending = array(res.data);\n        return df => df.touch(this);\n      });\n      return {\n        async: p\n      };\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format).then(res => output(this, pulse, array(res.data)));\n    }\n  }\n\n});\n\nfunction stop(_) {\n  return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n}\n\nfunction output(op, pulse, data) {\n  data.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = op.value;\n  op.value = out.source = out.add = data;\n  op._pending = null;\n  if (out.rem.length) out.clean(true);\n  return out;\n}\n\n/**\n * Extend tuples by joining them with values from a lookup table.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Map} params.index - The lookup table map.\n * @param {Array<function(object): *} params.fields - The fields to lookup.\n * @param {Array<string>} params.as - Output field names for each lookup value.\n * @param {*} [params.default] - A default value to use if lookup fails.\n */\n\nfunction Lookup(params) {\n  Transform.call(this, {}, params);\n}\nLookup.Definition = {\n  'type': 'Lookup',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'index',\n    'type': 'index',\n    'params': [{\n      'name': 'from',\n      'type': 'data',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }]\n  }, {\n    'name': 'values',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'array': true,\n    'required': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true\n  }, {\n    'name': 'default',\n    'default': null\n  }]\n};\ninherits(Lookup, Transform, {\n  transform(_, pulse) {\n    const keys = _.fields,\n          index = _.index,\n          values = _.values,\n          defaultValue = _.default == null ? null : _.default,\n          reset = _.modified(),\n          n = keys.length;\n\n    let flag = reset ? pulse.SOURCE : pulse.ADD,\n        out = pulse,\n        as = _.as,\n        set,\n        m,\n        mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n\n      if (as && as.length !== n * m) {\n        error('The \"as\" parameter has too few output field names.');\n      }\n\n      as = as || values.map(accessorName);\n\n      set = function (t) {\n        for (var i = 0, k = 0, j, v; i < n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        error('Missing output field names.');\n      }\n\n      set = function (t) {\n        for (var i = 0, v; i < n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v == null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(k => pulse.modified(k.fields));\n      flag |= mods ? pulse.MOD : 0;\n    }\n\n    pulse.visit(flag, set);\n    return out.modifies(as);\n  }\n\n});\n\n/**\n * Computes global min/max extents over a collection of extents.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<number>>} params.extents - The input extents.\n */\n\nfunction MultiExtent(params) {\n  Operator.call(this, null, update$1, params);\n}\ninherits(MultiExtent, Operator);\n\nfunction update$1(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n\n  const ext = _.extents,\n        n = ext.length;\n  let min = +Infinity,\n      max = -Infinity,\n      i,\n      e;\n\n  for (i = 0; i < n; ++i) {\n    e = ext[i];\n    if (e[0] < min) min = e[0];\n    if (e[1] > max) max = e[1];\n  }\n\n  return [min, max];\n}\n\n/**\n * Merge a collection of value arrays.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<*>>} params.values - The input value arrrays.\n */\n\nfunction MultiValues(params) {\n  Operator.call(this, null, update, params);\n}\ninherits(MultiValues, Operator);\n\nfunction update(_) {\n  return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);\n}\n\n/**\n * Operator whose value is simply its parameter hash. This operator is\n * useful for enabling reactive updates to values of nested objects.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\nfunction Params(params) {\n  Transform.call(this, null, params);\n}\ninherits(Params, Transform, {\n  transform(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  }\n\n});\n\n/**\n * Aggregate and pivot selected field values to become new fields.\n * This operator is useful to construction cross-tabulations.\n * @constructor\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n * @param {function(object): *} params.field - The field to pivot on. The unique\n *  values of this field become new field names in the output stream.\n * @param {function(object): *} params.value - The field to populate pivoted fields.\n *  The aggregate values of this field become the values of the new pivoted fields.\n * @param {string} [params.op] - The aggregation operation for the value field,\n *  applied per cell in the output stream. The default is \"sum\".\n * @param {number} [params.limit] - An optional parameter indicating the maximum\n *  number of pivoted fields to generate. The pivoted field names are sorted in\n *  ascending order prior to enforcing the limit.\n */\n\nfunction Pivot(params) {\n  Aggregate.call(this, params);\n}\nPivot.Definition = {\n  'type': 'Pivot',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'value',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'op',\n    'type': 'enum',\n    'values': ValidAggregateOps,\n    'default': 'sum'\n  }, {\n    'name': 'limit',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'key',\n    'type': 'field'\n  }]\n};\ninherits(Pivot, Aggregate, {\n  _transform: Aggregate.prototype.transform,\n\n  transform(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  }\n\n}); // Shoehorn a pivot transform into an aggregate transform!\n// First collect all unique pivot field values.\n// Then generate aggregate fields for each output pivot field.\n\nfunction aggregateParams(_, pulse) {\n  const key = _.field,\n        value = _.value,\n        op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = accessorFields(key).concat(accessorFields(value)),\n        keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change\n  // flag parameter modification to ensure re-initialization\n\n  if (pulse.changed()) _.set('__pivot__', null, null, true);\n  return {\n    key: _.key,\n    groupby: _.groupby,\n    ops: keys.map(() => op),\n    fields: keys.map(k => get(k, key, value, fields)),\n    as: keys.map(k => k + ''),\n    modified: _.modified.bind(_)\n  };\n} // Generate aggregate field accessor.\n// Output NaN for non-existent values; aggregator will ignore!\n\n\nfunction get(k, key, value, fields) {\n  return accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');\n} // Collect (and optionally limit) all unique pivot values.\n\n\nfunction pivotKeys(key, limit, pulse) {\n  const map = {},\n        list = [];\n  pulse.visit(pulse.SOURCE, t => {\n    const k = key(t);\n\n    if (!map[k]) {\n      map[k] = 1;\n      list.push(k);\n    }\n  });\n  list.sort(ascending);\n  return limit ? list.slice(0, limit) : list;\n}\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\n\nfunction PreFacet(params) {\n  Facet.call(this, params);\n}\ninherits(PreFacet, Facet, {\n  transform(_, pulse) {\n    const flow = _.subflow,\n          field = _.field,\n          subflow = t => this.subflow(tupleid(t), flow, pulse, t);\n\n    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n      error('PreFacet does not support field modification.');\n    }\n\n    this.initTargets(); // reset list of active subflows\n\n    if (field) {\n      pulse.visit(pulse.MOD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.mod(_));\n      });\n      pulse.visit(pulse.ADD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.add(ingest(_)));\n      });\n      pulse.visit(pulse.REM, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.rem(_));\n      });\n    } else {\n      pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n      pulse.visit(pulse.ADD, t => subflow(t).add(t));\n      pulse.visit(pulse.REM, t => subflow(t).rem(t));\n    }\n\n    if (pulse.clean()) {\n      pulse.runAfter(() => this.clean());\n    }\n\n    return pulse;\n  }\n\n});\n\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\n\nfunction Project(params) {\n  Transform.call(this, null, params);\n}\nProject.Definition = {\n  'type': 'Project',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'fields',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }]\n};\ninherits(Project, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(_.fields, _.as || []),\n          derive = fields ? (s, t) => project(s, t, fields, as) : rederive;\n    let lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n    pulse.visit(pulse.ADD, t => {\n      const dt = derive(t, ingest({}));\n      lut[tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n    pulse.visit(pulse.MOD, t => {\n      out.mod.push(derive(t, lut[tupleid(t)]));\n    });\n    return out;\n  }\n\n});\n\nfunction project(s, t, fields, as) {\n  for (let i = 0, n = fields.length; i < n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n\n  return t;\n}\n\n/**\n * Proxy the value of another operator as a pure signal value.\n * Ensures no tuples are propagated.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {*} params.value - The value to proxy, becomes the value of this operator.\n */\n\nfunction Proxy(params) {\n  Transform.call(this, null, params);\n}\ninherits(Proxy, Transform, {\n  transform(_, pulse) {\n    this.value = _.value;\n    return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n  }\n\n});\n\n/**\n * Generates sample quantile values from an input data stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the data field\n *   over which to calculate quantile values.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {Array<number>} [params.probs] - An array of probabilities in\n *   the range (0, 1) for which to compute quantile values. If not specified,\n *   the *step* parameter will be used.\n * @param {Array<number>} [params.step=0.01] - A probability step size for\n *   sampling quantile values. All values from one-half the step size up to\n *   1 (exclusive) will be sampled. This parameter is only used if the\n *   *quantiles* parameter is not provided.\n */\n\nfunction Quantile(params) {\n  Transform.call(this, null, params);\n}\nQuantile.Definition = {\n  'type': 'Quantile',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'probs',\n    'type': 'number',\n    'array': true\n  }, {\n    'name': 'step',\n    'type': 'number',\n    'default': 0.01\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'default': ['prob', 'value']\n  }]\n};\nconst EPSILON = 1e-14;\ninherits(Quantile, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition$1(source, _.groupby, _.field),\n          names = (_.groupby || []).map(accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || range(step / 2, 1 - EPSILON, step),\n          n = p.length;\n    groups.forEach(g => {\n      const q = quantiles(g, p);\n\n      for (let i = 0; i < n; ++i) {\n        const t = {};\n\n        for (let i = 0; i < names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(ingest(t));\n      }\n    });\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n    return out;\n  }\n\n});\n\n/**\n * Relays a data stream between data processing pipelines.\n * If the derive parameter is set, this transform will create derived\n * copies of observed tuples. This provides derived data streams in which\n * modifications to the tuples do not pollute an upstream data source.\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.derive=false] - Boolean flag indicating if\n *   the transform should make derived copies of incoming tuples.\n * @constructor\n */\n\nfunction Relay(params) {\n  Transform.call(this, null, params);\n}\ninherits(Relay, Transform, {\n  transform(_, pulse) {\n    let out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t);\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, t => {\n        const dt = lut[tupleid(t)];\n\n        for (const k in t) {\n          dt[k] = t[k]; // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n\n          out.modifies(k);\n        }\n\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  }\n\n});\n\n/**\n * Samples tuples passing through this operator.\n * Uses reservoir sampling to maintain a representative sample.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.size=1000] - The maximum number of samples.\n */\n\nfunction Sample(params) {\n  Transform.call(this, [], params);\n  this.count = 0;\n}\nSample.Definition = {\n  'type': 'Sample',\n  'metadata': {},\n  'params': [{\n    'name': 'size',\n    'type': 'number',\n    'default': 1000\n  }]\n};\ninherits(Sample, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          mod = _.modified('size'),\n          num = _.size,\n          map = this.value.reduce((m, t) => (m[tupleid(t)] = 1, m), {});\n\n    let res = this.value,\n        cnt = this.count,\n        cap = 0; // sample reservoir update function\n\n    function update(t) {\n      let p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * random());\n\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[tupleid(p)]) out.rem.push(p); // eviction\n\n          res[idx] = t;\n        }\n      }\n\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n\n        --cnt;\n      }); // filter removed tuples out of the sample reservoir\n\n      res = res.filter(t => map[tupleid(t)] !== -1);\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, t => {\n        // update, but skip previously sampled tuples\n        if (!map[tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      const n = res.length - num;\n\n      for (let i = 0; i < n; ++i) {\n        map[tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, t => {\n        if (map[tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(t => !map[tupleid(t)]);\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  }\n\n});\n\n/**\n * Generates data tuples for a specified sequence range of numbers.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} params.start - The first number in the sequence.\n * @param {number} params.stop - The last number (exclusive) in the sequence.\n * @param {number} [params.step=1] - The step size between numbers in the sequence.\n */\n\nfunction Sequence(params) {\n  Transform.call(this, null, params);\n}\nSequence.Definition = {\n  'type': 'Sequence',\n  'metadata': {\n    'generates': true,\n    'changes': true\n  },\n  'params': [{\n    'name': 'start',\n    'type': 'number',\n    'required': true\n  }, {\n    'name': 'stop',\n    'type': 'number',\n    'required': true\n  }, {\n    'name': 'step',\n    'type': 'number',\n    'default': 1\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'default': 'data'\n  }]\n};\ninherits(Sequence, Transform, {\n  transform(_, pulse) {\n    if (this.value && !_.modified()) return;\n    const out = pulse.materialize().fork(pulse.MOD),\n          as = _.as || 'data';\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n    this.value = range(_.start, _.stop, _.step || 1).map(v => {\n      const t = {};\n      t[as] = v;\n      return ingest(t);\n    });\n    out.add = pulse.add.concat(this.value);\n    return out;\n  }\n\n});\n\n/**\n * Propagates a new pulse without any tuples so long as the input\n * pulse contains some added, removed or modified tuples.\n * @param {object} params - The parameters for this operator.\n * @constructor\n */\n\nfunction Sieve(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\ninherits(Sieve, Transform, {\n  transform(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n  }\n\n});\n\n/**\n * Discretize dates to specific time units.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The data field containing date/time values.\n */\n\nfunction TimeUnit(params) {\n  Transform.call(this, null, params);\n}\nconst OUTPUT = ['unit0', 'unit1'];\nTimeUnit.Definition = {\n  'type': 'TimeUnit',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'field',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'interval',\n    'type': 'boolean',\n    'default': true\n  }, {\n    'name': 'units',\n    'type': 'enum',\n    'values': TIME_UNITS,\n    'array': true\n  }, {\n    'name': 'step',\n    'type': 'number',\n    'default': 1\n  }, {\n    'name': 'maxbins',\n    'type': 'number',\n    'default': 40\n  }, {\n    'name': 'extent',\n    'type': 'date',\n    'array': true\n  }, {\n    'name': 'timezone',\n    'type': 'enum',\n    'default': 'local',\n    'values': ['local', 'utc']\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 2,\n    'default': OUTPUT\n  }]\n};\ninherits(TimeUnit, Transform, {\n  transform(_, pulse) {\n    const field = _.field,\n          band = _.interval !== false,\n          utc = _.timezone === 'utc',\n          floor = this._floor(_, pulse),\n          offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n          as = _.as || OUTPUT,\n          u0 = as[0],\n          u1 = as[1],\n          step = floor.step;\n\n    let min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        flag = pulse.ADD;\n\n    if (_.modified() || pulse.changed(pulse.REM) || pulse.modified(accessorFields(field))) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(flag, t => {\n      const v = field(t);\n      let a, b;\n\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n    floor.start = min;\n    floor.stop = max;\n    return pulse.modifies(band ? as : u0);\n  },\n\n  _floor(_, pulse) {\n    const utc = _.timezone === 'utc'; // get parameters\n\n    const {\n      units,\n      step\n    } = _.units ? {\n      units: _.units,\n      step: _.step || 1\n    } : timeBin({\n      extent: _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n      maxbins: _.maxbins\n    }); // check / standardize time units\n\n    const tunits = timeUnits(units),\n          prev = this.value || {},\n          floor = (utc ? utcFloor : timeFloor)(tunits, step);\n    floor.unit = peek(tunits);\n    floor.units = tunits;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  }\n\n});\n\n/**\n * An index that maps from unique, string-coerced, field values to tuples.\n * Assumes that the field serves as a unique key with no duplicate values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field accessor to index.\n */\n\nfunction TupleIndex(params) {\n  Transform.call(this, fastmap(), params);\n}\ninherits(TupleIndex, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          field = _.field,\n          index = this.value,\n          set = t => index.set(field(t), t);\n\n    let mod = true;\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, t => index.delete(field(t)));\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  }\n\n});\n\n/**\n * Extracts an array of values. Assumes the source data has already been\n * reduced as needed (e.g., by an upstream Aggregate transform).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The domain field to extract.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting the values. The comparator will be\n *   applied to backing tuples prior to value extraction.\n */\n\nfunction Values(params) {\n  Transform.call(this, null, params);\n}\ninherits(Values, Transform, {\n  transform(_, pulse) {\n    const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n\n    if (run) {\n      this.value = (_.sort ? pulse.source.slice().sort(stableCompare(_.sort)) : pulse.source).map(_.field);\n    }\n  }\n\n});\n\nfunction WindowOp(op, field, param, as) {\n  const fn = WindowOps[op](field, param);\n  return {\n    init: fn.init || zero,\n    update: function (w, t) {\n      t[as] = fn.next(w);\n    }\n  };\n}\nconst WindowOps = {\n  row_number: function () {\n    return {\n      next: w => w.index + 1\n    };\n  },\n  rank: function () {\n    let rank;\n    return {\n      init: () => rank = 1,\n      next: w => {\n        const i = w.index,\n              data = w.data;\n        return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n      }\n    };\n  },\n  dense_rank: function () {\n    let drank;\n    return {\n      init: () => drank = 1,\n      next: w => {\n        const i = w.index,\n              d = w.data;\n        return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n      }\n    };\n  },\n  percent_rank: function () {\n    const rank = WindowOps.rank(),\n          next = rank.next;\n    return {\n      init: rank.init,\n      next: w => (next(w) - 1) / (w.data.length - 1)\n    };\n  },\n  cume_dist: function () {\n    let cume;\n    return {\n      init: () => cume = 0,\n      next: w => {\n        const d = w.data,\n              c = w.compare;\n        let i = w.index;\n\n        if (cume < i) {\n          while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n\n          cume = i;\n        }\n\n        return (1 + cume) / d.length;\n      }\n    };\n  },\n  ntile: function (field, num) {\n    num = +num;\n    if (!(num > 0)) error('ntile num must be greater than zero.');\n    const cume = WindowOps.cume_dist(),\n          next = cume.next;\n    return {\n      init: cume.init,\n      next: w => Math.ceil(num * next(w))\n    };\n  },\n  lag: function (field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index - offset;\n        return i >= 0 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  lead: function (field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index + offset,\n              d = w.data;\n        return i < d.length ? field(d[i]) : null;\n      }\n    };\n  },\n  first_value: function (field) {\n    return {\n      next: w => field(w.data[w.i0])\n    };\n  },\n  last_value: function (field) {\n    return {\n      next: w => field(w.data[w.i1 - 1])\n    };\n  },\n  nth_value: function (field, nth) {\n    nth = +nth;\n    if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n    return {\n      next: w => {\n        const i = w.i0 + (nth - 1);\n        return i < w.i1 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  prev_value: function (field) {\n    let prev;\n    return {\n      init: () => prev = null,\n      next: w => {\n        const v = field(w.data[w.index]);\n        return v != null ? prev = v : prev;\n      }\n    };\n  },\n  next_value: function (field) {\n    let v, i;\n    return {\n      init: () => (v = null, i = -1),\n      next: w => {\n        const d = w.data;\n        return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n      }\n    };\n  }\n};\n\nfunction find(field, data, index) {\n  for (let n = data.length; index < n; ++index) {\n    const v = field(data[index]);\n    if (v != null) return index;\n  }\n\n  return -1;\n}\n\nconst ValidWindowOps = Object.keys(WindowOps);\n\nfunction WindowState(_) {\n  const ops = array(_.ops),\n        fields = array(_.fields),\n        params = array(_.params),\n        as = array(_.as),\n        outputs = this.outputs = [],\n        windows = this.windows = [],\n        inputs = {},\n        map = {},\n        counts = [],\n        measures = [];\n  let countOnly = true;\n\n  function visitInputs(f) {\n    array(accessorFields(f)).forEach(_ => inputs[_] = 1);\n  }\n\n  visitInputs(_.sort);\n  ops.forEach((op, i) => {\n    const field = fields[i],\n          mname = accessorName(field),\n          name = measureName(op, mname, as[i]);\n    visitInputs(field);\n    outputs.push(name); // Window operation\n\n    if (hasOwnProperty(WindowOps, op)) {\n      windows.push(WindowOp(op, fields[i], params[i], name));\n    } // Aggregate operation\n    else {\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n\n      if (op === 'count') {\n        counts.push(name);\n        return;\n      }\n\n      countOnly = false;\n      let m = map[mname];\n\n      if (!m) {\n        m = map[mname] = [];\n        m.field = field;\n        measures.push(m);\n      }\n\n      m.push(createMeasure(op, name));\n    }\n  });\n\n  if (counts.length || measures.length) {\n    this.cell = cell(measures, counts, countOnly);\n  }\n\n  this.inputs = Object.keys(inputs);\n}\nconst prototype = WindowState.prototype;\n\nprototype.init = function () {\n  this.windows.forEach(_ => _.init());\n  if (this.cell) this.cell.init();\n};\n\nprototype.update = function (w, t) {\n  const cell = this.cell,\n        wind = this.windows,\n        data = w.data,\n        m = wind && wind.length;\n  let j;\n\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n\n    for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n\n    cell.set(t);\n  }\n\n  for (j = 0; j < m; ++j) wind[j].update(w, t);\n};\n\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(m => compileMeasures(m, m.field));\n  const cell = {\n    num: 0,\n    agg: null,\n    store: false,\n    count: counts\n  };\n\n  if (!countOnly) {\n    var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n\n    for (; i < n; ++i) a[i] = new measures[i](cell);\n  }\n\n  if (cell.store) {\n    var store = cell.data = new TupleStore();\n  }\n\n  cell.add = function (t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n\n    for (let i = 0; i < n; ++i) {\n      a[i].add(a[i].get(t), t);\n    }\n  };\n\n  cell.rem = function (t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n\n    for (let i = 0; i < n; ++i) {\n      a[i].rem(a[i].get(t), t);\n    }\n  };\n\n  cell.set = function (t) {\n    let i, n; // consolidate stored values\n\n    if (store) store.values(); // update tuple properties\n\n    for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n\n    if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n  };\n\n  cell.init = function () {\n    cell.num = 0;\n    if (store) store.reset();\n\n    for (let i = 0; i < n; ++i) a[i].init();\n  };\n\n  return cell;\n}\n\n/**\n * Perform window calculations and write results to the input stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors\n *   for data fields to use as inputs to window operations.\n * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n * @param {Array<string>} [params.as] - An array of output field names for window operations.\n * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n *   number alone, ignoring peers with identical sort values. If false (default),\n *   the window boundaries will be adjusted to include peer values.\n */\n\nfunction Window(params) {\n  Transform.call(this, {}, params);\n  this._mlen = 0;\n  this._mods = [];\n}\nWindow.Definition = {\n  'type': 'Window',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'sort',\n    'type': 'compare'\n  }, {\n    'name': 'groupby',\n    'type': 'field',\n    'array': true\n  }, {\n    'name': 'ops',\n    'type': 'enum',\n    'array': true,\n    'values': ValidWindowOps.concat(ValidAggregateOps)\n  }, {\n    'name': 'params',\n    'type': 'number',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'fields',\n    'type': 'field',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'null': true,\n    'array': true\n  }, {\n    'name': 'frame',\n    'type': 'number',\n    'null': true,\n    'array': true,\n    'length': 2,\n    'default': [null, 0]\n  }, {\n    'name': 'ignorePeers',\n    'type': 'boolean',\n    'default': false\n  }]\n};\ninherits(Window, Transform, {\n  transform(_, pulse) {\n    this.stamp = pulse.stamp;\n\n    const mod = _.modified(),\n          cmp = stableCompare(_.sort),\n          key = groupkey(_.groupby),\n          group = t => this.group(key(t)); // initialize window state\n\n\n    let state = this.state;\n\n    if (!state || mod) {\n      state = this.state = new WindowState(_);\n    } // partition input tuples\n\n\n    if (mod || pulse.modified(state.inputs)) {\n      this.value = {};\n      pulse.visit(pulse.SOURCE, t => group(t).add(t));\n    } else {\n      pulse.visit(pulse.REM, t => group(t).remove(t));\n      pulse.visit(pulse.ADD, t => group(t).add(t));\n    } // perform window calculations for each modified partition\n\n\n    for (let i = 0, n = this._mlen; i < n; ++i) {\n      processPartition(this._mods[i], state, cmp, _);\n    }\n\n    this._mlen = 0;\n    this._mods = []; // TODO don't reflow everything?\n\n    return pulse.reflow(mod).modifies(state.outputs);\n  },\n\n  group(key) {\n    let group = this.value[key];\n\n    if (!group) {\n      group = this.value[key] = SortedList(tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < this.stamp) {\n      group.stamp = this.stamp;\n      this._mods[this._mlen++] = group;\n    }\n\n    return group;\n  }\n\n});\n\nfunction processPartition(list, state, cmp, _) {\n  const sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp),\n        // use cmp for stable sort\n  n = data.length,\n        b = range ? bisector(sort) : null,\n        w = {\n    i0: 0,\n    i1: 0,\n    p0: 0,\n    p1: 0,\n    index: 0,\n    data: data,\n    compare: sort || constant(-1)\n  };\n  state.init();\n\n  for (let i = 0; i < n; ++i) {\n    setWindow(w, frame, i, n);\n    if (range) adjustRange(w, b);\n    state.update(w, data[i]);\n  }\n}\n\nfunction setWindow(w, f, i, n) {\n  w.p0 = w.i0;\n  w.p1 = w.i1;\n  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n  w.index = i;\n} // if frame type is 'range', adjust window for peer values\n\n\nfunction adjustRange(w, bisect) {\n  const r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n  if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n  if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n}\n\nexport { Aggregate as aggregate, Bin as bin, Collect as collect, Compare as compare, CountPattern as countpattern, Cross as cross, Density as density, DotBin as dotbin, Expression as expression, Extent as extent, Facet as facet, Field as field, Filter as filter, Flatten as flatten, Fold as fold, Formula as formula, Generate as generate, Impute as impute, JoinAggregate as joinaggregate, KDE as kde, Key as key, Load as load, Lookup as lookup, MultiExtent as multiextent, MultiValues as multivalues, Params as params, Pivot as pivot, PreFacet as prefacet, Project as project, Proxy as proxy, Quantile as quantile, Relay as relay, Sample as sample, Sequence as sequence, Sieve as sieve, Subflow as subflow, TimeUnit as timeunit, TupleIndex as tupleindex, Values as values, Window as window };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}