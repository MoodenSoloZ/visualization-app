{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isArray, isString } from 'vega';\nimport { isSelectionParameter } from '../selection';\nimport { isUnitSpec } from '../spec';\nimport { SpecMapper } from '../spec/map';\nexport var TopLevelSelectionsNormalizer = /*#__PURE__*/function (_SpecMapper) {\n  _inherits(TopLevelSelectionsNormalizer, _SpecMapper);\n  var _super = _createSuper(TopLevelSelectionsNormalizer);\n  function TopLevelSelectionsNormalizer() {\n    _classCallCheck(this, TopLevelSelectionsNormalizer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TopLevelSelectionsNormalizer, [{\n    key: \"map\",\n    value: function map(spec, normParams) {\n      var _a;\n      var selections = (_a = normParams.selections) !== null && _a !== void 0 ? _a : [];\n      if (spec.params && !isUnitSpec(spec)) {\n        var params = [];\n        var _iterator = _createForOfIteratorHelper(spec.params),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var param = _step.value;\n            if (isSelectionParameter(param)) {\n              selections.push(param);\n            } else {\n              params.push(param);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        spec.params = params;\n      }\n      normParams.selections = selections;\n      return _get(_getPrototypeOf(TopLevelSelectionsNormalizer.prototype), \"map\", this).call(this, spec, addSpecNameToParams(spec, normParams));\n    }\n  }, {\n    key: \"mapUnit\",\n    value: function mapUnit(spec, normParams) {\n      var _a;\n      var selections = normParams.selections;\n      if (!selections || !selections.length) return spec;\n      var path = ((_a = normParams.path) !== null && _a !== void 0 ? _a : []).concat(spec.name);\n      var params = [];\n      var _iterator2 = _createForOfIteratorHelper(selections),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var selection = _step2.value;\n          // By default, apply selections to all unit views.\n          if (!selection.views || !selection.views.length) {\n            params.push(selection);\n          } else {\n            var _iterator3 = _createForOfIteratorHelper(selection.views),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var view = _step3.value;\n                // view is either a specific unit name, or a partial path through the spec tree.\n                if (isString(view) && (view === spec.name || path.indexOf(view) >= 0) || isArray(view) && view.map(function (v) {\n                  return path.indexOf(v);\n                }).every(function (v, i, arr) {\n                  return v !== -1 && (i === 0 || v > arr[i - 1]);\n                })) {\n                  params.push(selection);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (params.length) spec.params = params;\n      return spec;\n    }\n  }]);\n  return TopLevelSelectionsNormalizer;\n}(SpecMapper);\nvar _loop = function _loop() {\n  var method = _arr[_i];\n  var proto = TopLevelSelectionsNormalizer.prototype[method];\n  TopLevelSelectionsNormalizer.prototype[method] = function (spec, params) {\n    return proto.call(this, spec, addSpecNameToParams(spec, params));\n  };\n};\nfor (var _i = 0, _arr = ['mapFacet', 'mapRepeat', 'mapHConcat', 'mapVConcat', 'mapLayer']; _i < _arr.length; _i++) {\n  _loop();\n}\nfunction addSpecNameToParams(spec, params) {\n  var _a;\n  return spec.name ? Object.assign(Object.assign({}, params), {\n    path: ((_a = params.path) !== null && _a !== void 0 ? _a : []).concat(spec.name)\n  }) : params;\n}","map":{"version":3,"sources":["../../../src/normalize/toplevelselection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isArray, isString } from 'vega';\nimport { isSelectionParameter } from '../selection';\nimport { isUnitSpec } from '../spec';\nimport { SpecMapper } from '../spec/map';\nexport class TopLevelSelectionsNormalizer extends SpecMapper {\n    map(spec, normParams) {\n        var _a;\n        const selections = (_a = normParams.selections) !== null && _a !== void 0 ? _a : [];\n        if (spec.params && !isUnitSpec(spec)) {\n            const params = [];\n            for (const param of spec.params) {\n                if (isSelectionParameter(param)) {\n                    selections.push(param);\n                }\n                else {\n                    params.push(param);\n                }\n            }\n            spec.params = params;\n        }\n        normParams.selections = selections;\n        return super.map(spec, addSpecNameToParams(spec, normParams));\n    }\n    mapUnit(spec, normParams) {\n        var _a;\n        const selections = normParams.selections;\n        if (!selections || !selections.length)\n            return spec;\n        const path = ((_a = normParams.path) !== null && _a !== void 0 ? _a : []).concat(spec.name);\n        const params = [];\n        for (const selection of selections) {\n            // By default, apply selections to all unit views.\n            if (!selection.views || !selection.views.length) {\n                params.push(selection);\n            }\n            else {\n                for (const view of selection.views) {\n                    // view is either a specific unit name, or a partial path through the spec tree.\n                    if ((isString(view) && (view === spec.name || path.indexOf(view) >= 0)) ||\n                        (isArray(view) &&\n                            view.map(v => path.indexOf(v)).every((v, i, arr) => v !== -1 && (i === 0 || v > arr[i - 1])))) {\n                        params.push(selection);\n                    }\n                }\n            }\n        }\n        if (params.length)\n            spec.params = params;\n        return spec;\n    }\n}\nfor (const method of ['mapFacet', 'mapRepeat', 'mapHConcat', 'mapVConcat', 'mapLayer']) {\n    const proto = TopLevelSelectionsNormalizer.prototype[method];\n    TopLevelSelectionsNormalizer.prototype[method] = function (spec, params) {\n        return proto.call(this, spec, addSpecNameToParams(spec, params));\n    };\n}\nfunction addSpecNameToParams(spec, params) {\n    var _a;\n    return spec.name\n        ? Object.assign(Object.assign({}, params), { path: ((_a = params.path) !== null && _a !== void 0 ? _a : []).concat(spec.name) }) : params;\n}\n//# sourceMappingURL=toplevelselection.js.map"]},"metadata":{},"sourceType":"module"}