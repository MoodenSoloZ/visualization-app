{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { DataSourceType } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { StackNode } from './stack';\nimport { WindowTransformNode } from './window';\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet) {\n  function clone(node) {\n    if (!(node instanceof FacetNode)) {\n      var copy = node.clone();\n      if (copy instanceof OutputNode) {\n        var newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {\n        copy.addDimensions(facet.fields);\n      }\n      var _iterator = _createForOfIteratorHelper(node.children.flatMap(clone)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var n = _step.value;\n          n.parent = copy;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return [copy];\n    }\n    return node.children.flatMap(clone);\n  }\n  return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      var child = node.children[0];\n      if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {\n        child.addDimensions(node.fields);\n      }\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n      var facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain);\n      // replicate the subtree and place it before the facet's main node\n      var cloner = cloneSubtree(node);\n      var copy = node.children.map(cloner).flat();\n      var _iterator2 = _createForOfIteratorHelper(copy),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var c = _step2.value;\n          c.parent = facetMain;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\nfunction moveMainDownToFacet(node) {\n  if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n    if (node.numChildren() === 1) {\n      var child = node.children[0];\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/compile/data/subtree.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DataSourceType } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { StackNode } from './stack';\nimport { WindowTransformNode } from './window';\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet) {\n    function clone(node) {\n        if (!(node instanceof FacetNode)) {\n            const copy = node.clone();\n            if (copy instanceof OutputNode) {\n                const newName = FACET_SCALE_PREFIX + copy.getSource();\n                copy.setSource(newName);\n                facet.model.component.data.outputNodes[newName] = copy;\n            }\n            else if (copy instanceof AggregateNode ||\n                copy instanceof StackNode ||\n                copy instanceof WindowTransformNode ||\n                copy instanceof JoinAggregateTransformNode) {\n                copy.addDimensions(facet.fields);\n            }\n            for (const n of node.children.flatMap(clone)) {\n                n.parent = copy;\n            }\n            return [copy];\n        }\n        return node.children.flatMap(clone);\n    }\n    return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n        if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n            // move down until we hit a fork or output node\n            const child = node.children[0];\n            if (child instanceof AggregateNode ||\n                child instanceof StackNode ||\n                child instanceof WindowTransformNode ||\n                child instanceof JoinAggregateTransformNode) {\n                child.addDimensions(node.fields);\n            }\n            child.swapWithParent();\n            moveFacetDown(node);\n        }\n        else {\n            // move main to facet\n            const facetMain = node.model.component.data.main;\n            moveMainDownToFacet(facetMain);\n            // replicate the subtree and place it before the facet's main node\n            const cloner = cloneSubtree(node);\n            const copy = node.children.map(cloner).flat();\n            for (const c of copy) {\n                c.parent = facetMain;\n            }\n        }\n    }\n    else {\n        node.children.map(moveFacetDown);\n    }\n}\nfunction moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n        if (node.numChildren() === 1) {\n            const child = node.children[0];\n            if (!(child instanceof FacetNode)) {\n                child.swapWithParent();\n                moveMainDownToFacet(node);\n            }\n        }\n    }\n}\n//# sourceMappingURL=subtree.js.map"]},"metadata":{},"sourceType":"module"}