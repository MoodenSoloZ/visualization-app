{"ast":null,"code":"import { getFormatMixins, isFieldOrDatumDef, isValueDef } from '../../../channeldef';\nimport { signalOrValueRef } from '../../common';\nimport { formatSignalRef } from '../../format';\nimport { wrapCondition } from './conditional';\nexport function text(model) {\n  var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';\n  var channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, function (cDef) {\n    return textRef(cDef, model.config);\n  });\n}\nexport function textRef(channelDef, config) {\n  var expr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'datum';\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return signalOrValueRef(channelDef.value);\n    }\n    if (isFieldOrDatumDef(channelDef)) {\n      var _getFormatMixins = getFormatMixins(channelDef),\n        format = _getFormatMixins.format,\n        formatType = _getFormatMixins.formatType;\n      return formatSignalRef({\n        fieldOrDatumDef: channelDef,\n        format: format,\n        formatType: formatType,\n        expr: expr,\n        config: config\n      });\n    }\n  }\n  return undefined;\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/text.ts"],"names":[],"mappings":"AAAA,SAAQ,eAAe,EAAE,iBAAiB,EAAE,UAAU,QAAO,qBAAqB;AAIlF,SAAQ,gBAAgB,QAAO,cAAc;AAC7C,SAAQ,eAAe,QAAO,cAAc;AAE5C,SAAQ,aAAa,QAAO,eAAe;AAE3C,OAAM,SAAU,IAAI,CAAC,KAAgB,EAA2D;EAAA,IAAzD,OAAA,uEAAmD,MAAM;EAC9F,IAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;EAC1C,OAAO,aAAa,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,UAAA,IAAI;IAAA,OAAI,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;EAAA,EAAC;AACvF;AAEA,OAAM,SAAU,OAAO,CACrB,UAAgD,EAChD,MAAc,EACyB;EAAA,IAAvC,IAAA,uEAAgC,OAAO;EAEvC;EACA,IAAI,UAAU,EAAE;IACd,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;MAC1B,OAAO,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC;IAC1C;IACD,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;MACjC,uBAA6B,eAAe,CAAC,UAAU,CAAC;QAAjD,MAAM,oBAAN,MAAM;QAAE,UAAU,oBAAV,UAAU;MACzB,OAAO,eAAe,CAAC;QAAC,eAAe,EAAE,UAAU;QAAE,MAAM,EAAN,MAAM;QAAE,UAAU,EAAV,UAAU;QAAE,IAAI,EAAJ,IAAI;QAAE,MAAM,EAAN;MAAM,CAAC,CAAC;IACxF;EACF;EACD,OAAO,SAAS;AAClB","sourceRoot":"","sourcesContent":["import { getFormatMixins, isFieldOrDatumDef, isValueDef } from '../../../channeldef';\nimport { signalOrValueRef } from '../../common';\nimport { formatSignalRef } from '../../format';\nimport { wrapCondition } from './conditional';\nexport function text(model, channel = 'text') {\n    const channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n}\nexport function textRef(channelDef, config, expr = 'datum') {\n    // text\n    if (channelDef) {\n        if (isValueDef(channelDef)) {\n            return signalOrValueRef(channelDef.value);\n        }\n        if (isFieldOrDatumDef(channelDef)) {\n            const { format, formatType } = getFormatMixins(channelDef);\n            return formatSignalRef({ fieldOrDatumDef: channelDef, format, formatType, expr, config });\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"module"}