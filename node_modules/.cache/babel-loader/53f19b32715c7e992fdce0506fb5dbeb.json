{"ast":null,"code":"import _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/visualization-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for density transform nodes\n */\nexport var DensityTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(DensityTransformNode, _DataFlowNode);\n  var _super = _createSuper(DensityTransformNode);\n  function DensityTransformNode(parent, transform) {\n    var _this;\n    _classCallCheck(this, DensityTransformNode);\n    var _a, _b, _c;\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    _this.transform = duplicate(transform); // duplicate to prevent side effects\n    var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n    _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'value', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'density'];\n    // set steps when we are grouping so that we get consitent sampling points for imputing and grouping\n    if (transform.groupby && transform.minsteps == null && transform.maxsteps == null && transform.steps == null) {\n      _this.transform.steps = 200;\n    }\n    return _this;\n  }\n  _createClass(DensityTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new DensityTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n      return new Set([this.transform.density].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"DensityTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _a = this.transform,\n        density = _a.density,\n        rest = __rest(_a, [\"density\"]);\n      var result = Object.assign({\n        type: 'kde',\n        field: density\n      }, rest);\n      return result;\n    }\n  }]);\n  return DensityTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/density.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,SAAQ,SAAS,EAAE,IAAI,IAAJ,KAAI,QAAO,YAAY;AAC1C,SAAQ,YAAY,QAAO,YAAY;AAEvC;;AAEG;AACH,WAAa,oBAAqB;EAAA;EAAA;EAKhC,8BAAY,MAAoB,EAAU,SAA2B,EAAA;IAAA;IAAA;;IACnE,0BAAM,MAAM;IAD4B,MAAA,SAAS,GAAT,SAAS;IAEjD,MAAK,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACvC,IAAM,WAAW,GAAG,CAAA,EAAA,GAAA,MAAK,SAAS,CAAC,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,SAAS,EAAE,SAAS,CAAC;IAC/D,MAAK,SAAS,CAAC,EAAE,GAAG,CAAC,CAAA,EAAA,GAAA,WAAW,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,EAAE,CAAA,EAAA,GAAA,WAAW,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS,CAAC;IAE5E;IACA,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,IAAI,SAAS,CAAC,KAAK,IAAI,IAAI,EAAE;MAC5G,MAAK,SAAS,CAAC,KAAK,GAAG,GAAG;;IAC3B;EACH;EAAC;IAAA;IAAA,OAdM,iBAAK;MACV,OAAO,IAAI,oBAAoB,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE;EAAC;IAAA;IAAA,OAcM,2BAAe;;MACpB,OAAO,IAAI,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,4BAAM,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,GAAG;IAC7E;EAAC;IAAA;IAAA,OAEM,0BAAc;MACnB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACnC;EAAC;IAAA;IAAA,OAEM,gBAAI;MACT,kCAA2B,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IACjD;EAAC;IAAA;IAAA,OAEM,oBAAQ;MACP,IAAA,EAAA,GAAqB,IAAI,CAAC,SAA1B;QAAC,OAAO,GAAA,EAA2B,CAAlC,OAAO;QAAK,IAAI,GAAA,MAAA,CAAA,EAAA,EAAjB,CAAA,SAAA,CAAkB,CAAiB;MACzC,IAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA;QACV,IAAI,EAAE,KAAK;QACX,KAAK,EAAE;MAAO,CAAA,EACX,IAAI,CACR;MACD,OAAO,MAAM;IACf;EAAC;EAAA;AAAA,EArCuC,YAAY","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for density transform nodes\n */\nexport class DensityTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        var _a, _b, _c;\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n        this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'value', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'density'];\n        // set steps when we are grouping so that we get consitent sampling points for imputing and grouping\n        if (transform.groupby && transform.minsteps == null && transform.maxsteps == null && transform.steps == null) {\n            this.transform.steps = 200;\n        }\n    }\n    clone() {\n        return new DensityTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        var _a;\n        return new Set([this.transform.density, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `DensityTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const _a = this.transform, { density } = _a, rest = __rest(_a, [\"density\"]);\n        const result = Object.assign({ type: 'kde', field: density }, rest);\n        return result;\n    }\n}\n//# sourceMappingURL=density.js.map"]},"metadata":{},"sourceType":"module"}