{"ast":null,"code":"import _classCallCheck from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * Vega-Lite's singleton logger utility.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LocalLogger_level;\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as message_1 from './message';\nexport { message_1 as message };\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nvar main = logger(Warn);\nvar current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport var LocalLogger = /*#__PURE__*/function () {\n  function LocalLogger() {\n    _classCallCheck(this, LocalLogger);\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n    _LocalLogger_level.set(this, Warn);\n  }\n  _createClass(LocalLogger, [{\n    key: \"level\",\n    value: function level(_) {\n      if (_) {\n        __classPrivateFieldSet(this, _LocalLogger_level, _, \"f\");\n        return this;\n      }\n      return __classPrivateFieldGet(this, _LocalLogger_level, \"f\");\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      var _this$warns;\n      if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Warn) (_this$warns = this.warns).push.apply(_this$warns, arguments);\n      return this;\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      var _this$infos;\n      if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Info) (_this$infos = this.infos).push.apply(_this$infos, arguments);\n      return this;\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      var _this$debugs;\n      if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Debug) (_this$debugs = this.debugs).push.apply(_this$debugs, arguments);\n      return this;\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= ErrorLevel) throw Error.apply(void 0, arguments);\n      return this;\n    }\n  }]);\n  return LocalLogger;\n}();\n_LocalLogger_level = new WeakMap();\nexport function wrap(f) {\n  return function () {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function error() {\n  var _current;\n  (_current = current).error.apply(_current, arguments);\n}\nexport function warn() {\n  var _current2;\n  (_current2 = current).warn.apply(_current2, arguments);\n}\nexport function info() {\n  var _current3;\n  (_current3 = current).info.apply(_current3, arguments);\n}\nexport function debug() {\n  var _current4;\n  (_current4 = current).debug.apply(_current4, arguments);\n}","map":{"version":3,"sources":["../../../src/log/index.ts"],"names":[],"mappings":";;AAAA;;AAEG;;;;;;;;;;;;;AAEH,SAAQ,KAAK,EAAE,KAAK,IAAI,UAAU,EAAE,IAAI,EAAE,MAAM,EAAmB,IAAI,QAAO,WAAW;2BAChE,WAAW;sBAAxB,OAAO;AAEnB;;AAEG;AACH,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACzB,IAAI,OAAO,GAAoB,IAAI;AAEnC;;AAEG;AACH,WAAa,WAAW;EAAxB,uBAAA;IAAA;IACS,IAAA,CAAA,KAAK,GAAU,EAAE;IACjB,IAAA,CAAA,KAAK,GAAU,EAAE;IACjB,IAAA,CAAA,MAAM,GAAU,EAAE;IAEzB,kBAAA,CAAA,GAAA,CAAA,IAAA,EAAiB,IAAI,CAAA;EA+BvB;EAAC;IAAA;IAAA,OA3BQ,eAAM,CAAU,EAAA;MACrB,IAAI,CAAC,EAAE;QACL,sBAAA,CAAA,IAAI,EAAA,kBAAA,EAAU,CAAC,EAAA,GAAA,CAAA;QACf,OAAO,IAAI;MACZ;MACD,OAAO,sBAAA,CAAA,IAAI,EAAA,kBAAA,EAAA,GAAA,CAAO;IACpB;EAAC;IAAA;IAAA,OAEM,gBAA4B;MAAA;MACjC,IAAI,sBAAA,CAAA,IAAI,EAAA,kBAAA,EAAA,GAAA,CAAO,IAAI,IAAI,EAAE,mBAAI,CAAC,KAAK,EAAC,IAAI,8BAAS;MACjD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEM,gBAA4B;MAAA;MACjC,IAAI,sBAAA,CAAA,IAAI,EAAA,kBAAA,EAAA,GAAA,CAAO,IAAI,IAAI,EAAE,mBAAI,CAAC,KAAK,EAAC,IAAI,8BAAS;MACjD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEM,iBAA6B;MAAA;MAClC,IAAI,sBAAA,CAAA,IAAI,EAAA,kBAAA,EAAA,GAAA,CAAO,IAAI,KAAK,EAAE,oBAAI,CAAC,MAAM,EAAC,IAAI,+BAAS;MACnD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEM,iBAA6B;MAClC,IAAI,sBAAA,CAAA,IAAI,EAAA,kBAAA,EAAA,GAAA,CAAO,IAAI,UAAU,EAAE,MAAM,KAAK,yBAAS;MACnD,OAAO,IAAI;IACb;EAAC;EAAA;AAAA;;AAGH,OAAM,SAAU,IAAI,CAAC,CAAgC,EAAA;EACnD,OAAO,YAAK;IACV,OAAO,GAAG,IAAI,WAAW,EAAE;IAC3B,CAAC,CAAC,OAAsB,CAAC;IACzB,KAAK,EAAE;EACT,CAAC;AACH;AAEA;;AAEG;AACH,OAAM,SAAU,GAAG,CAAC,SAA0B,EAAA;EAC5C,OAAO,GAAG,SAAS;EACnB,OAAO,OAAO;AAChB;AAEA;;AAEG;AACH,OAAM,SAAU,KAAK,GAAA;EACnB,OAAO,GAAG,IAAI;EACd,OAAO,OAAO;AAChB;AAEA,OAAM,SAAU,KAAK,GAAwB;EAAA;EAC3C,YAAA,OAAO,EAAC,KAAK,2BAAS;AACxB;AAEA,OAAM,SAAU,IAAI,GAAwB;EAAA;EAC1C,aAAA,OAAO,EAAC,IAAI,4BAAS;AACvB;AAEA,OAAM,SAAU,IAAI,GAAwB;EAAA;EAC1C,aAAA,OAAO,EAAC,IAAI,4BAAS;AACvB;AAEA,OAAM,SAAU,KAAK,GAAwB;EAAA;EAC3C,aAAA,OAAO,EAAC,KAAK,4BAAS;AACxB","sourceRoot":"","sourcesContent":["/**\n * Vega-Lite's singleton logger utility.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LocalLogger_level;\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as message_1 from './message';\nexport { message_1 as message };\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport class LocalLogger {\n    constructor() {\n        this.warns = [];\n        this.infos = [];\n        this.debugs = [];\n        _LocalLogger_level.set(this, Warn);\n    }\n    level(_) {\n        if (_) {\n            __classPrivateFieldSet(this, _LocalLogger_level, _, \"f\");\n            return this;\n        }\n        return __classPrivateFieldGet(this, _LocalLogger_level, \"f\");\n    }\n    warn(...args) {\n        if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Warn)\n            this.warns.push(...args);\n        return this;\n    }\n    info(...args) {\n        if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Info)\n            this.infos.push(...args);\n        return this;\n    }\n    debug(...args) {\n        if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Debug)\n            this.debugs.push(...args);\n        return this;\n    }\n    error(...args) {\n        if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= ErrorLevel)\n            throw Error(...args);\n        return this;\n    }\n}\n_LocalLogger_level = new WeakMap();\nexport function wrap(f) {\n    return () => {\n        current = new LocalLogger();\n        f(current);\n        reset();\n    };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger) {\n    current = newLogger;\n    return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n    current = main;\n    return current;\n}\nexport function error(...args) {\n    current.error(...args);\n}\nexport function warn(...args) {\n    current.warn(...args);\n}\nexport function info(...args) {\n    current.info(...args);\n}\nexport function debug(...args) {\n    current.debug(...args);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}