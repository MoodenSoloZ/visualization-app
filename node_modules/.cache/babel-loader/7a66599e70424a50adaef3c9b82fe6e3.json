{"ast":null,"code":"import _toConsumableArray from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/weihangzhang/Documents/webpage/gosling-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { duplicate, hash as _hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\nexport var PivotTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(PivotTransformNode, _DataFlowNode);\n  var _super = _createSuper(PivotTransformNode);\n  function PivotTransformNode(parent, transform) {\n    var _this;\n    _classCallCheck(this, PivotTransformNode);\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    return _this;\n  }\n  _createClass(PivotTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PivotTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"addDimensions\",\n    value: function addDimensions(fields) {\n      var _a;\n      this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), function (d) {\n        return d;\n      });\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n      return new Set([this.transform.pivot, this.transform.value].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"PivotTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform = this.transform,\n        pivot = _this$transform.pivot,\n        value = _this$transform.value,\n        groupby = _this$transform.groupby,\n        limit = _this$transform.limit,\n        op = _this$transform.op;\n      return Object.assign(Object.assign(Object.assign({\n        type: 'pivot',\n        field: pivot,\n        value: value\n      }, limit !== undefined ? {\n        limit: limit\n      } : {}), op !== undefined ? {\n        op: op\n      } : {}), groupby !== undefined ? {\n        groupby: groupby\n      } : {});\n    }\n  }]);\n  return PivotTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/pivot.ts"],"names":[],"mappings":";;;;;AACA,SAAQ,SAAS,EAAE,IAAI,IAAJ,KAAI,EAAE,MAAM,QAAO,YAAY;AAElD,SAAQ,YAAY,QAAO,YAAY;AAEvC;;AAEG;AACH,WAAa,kBAAmB;EAAA;EAAA;EAK9B,4BAAY,MAAoB,EAAU,SAAyB,EAAA;IAAA;IAAA;IACjE,0BAAM,MAAM;IAD4B,MAAA,SAAS,GAAT,SAAS;IAAgB;EAEnE;EAAC;IAAA;IAAA,OANM,iBAAK;MACV,OAAO,IAAI,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChE;EAAC;IAAA;IAAA,OAMM,uBAAc,MAAyB,EAAA;;MAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,UAAA,CAAC;QAAA,OAAI,CAAC;MAAA,EAAC;IACxF;EAAC;IAAA;IAAA,OAEM,0BAAc;MACnB,OAAO,SAAS,CAAC,CAAC;IACpB;EAAC;IAAA;IAAA,OAEM,2BAAe;;MACpB,OAAO,IAAI,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,4BAAM,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,GAAG;IACjG;EAAC;IAAA;IAAA,OAEM,gBAAI;MACT,gCAAyB,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IAC/C;EAAC;IAAA;IAAA,OAEM,oBAAQ;MACb,sBAA2C,IAAI,CAAC,SAAS;QAAlD,KAAK,mBAAL,KAAK;QAAE,KAAK,mBAAL,KAAK;QAAE,OAAO,mBAAP,OAAO;QAAE,KAAK,mBAAL,KAAK;QAAE,EAAE,mBAAF,EAAE;MACvC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;QACE,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,KAAK;QACZ,KAAK,EAAL;MAAK,CAAA,EACD,KAAK,KAAK,SAAS,GAAG;QAAC,KAAK,EAAL;MAAK,CAAC,GAAG,CAAA,CAAE,CAAC,EACnC,EAAE,KAAK,SAAS,GAAG;QAAC,EAAE,EAAF;MAAE,CAAC,GAAG,CAAA,CAAE,CAAC,EAC7B,OAAO,KAAK,SAAS,GAAG;QAAC,OAAO,EAAP;MAAO,CAAC,GAAG,CAAA,CAAE,CAAC;IAE/C;EAAC;EAAA;AAAA,EAnCqC,YAAY","sourceRoot":"","sourcesContent":["import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\nexport class PivotTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new PivotTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        var _a;\n        this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), d => d);\n    }\n    producedFields() {\n        return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n    dependentFields() {\n        var _a;\n        return new Set([this.transform.pivot, this.transform.value, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n    }\n    hash() {\n        return `PivotTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { pivot, value, groupby, limit, op } = this.transform;\n        return Object.assign(Object.assign(Object.assign({ type: 'pivot', field: pivot, value }, (limit !== undefined ? { limit } : {})), (op !== undefined ? { op } : {})), (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=pivot.js.map"]},"metadata":{},"sourceType":"module"}