{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { facetSortFieldName } from '../facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nexport function makeJoinAggregateFromFacet(parent, facet) {\n  var row = facet.row,\n    column = facet.column;\n  if (row && column) {\n    var newParent = null;\n    // only need to make one for crossed facet\n    for (var _i = 0, _arr = [row, column]; _i < _arr.length; _i++) {\n      var fieldDef = _arr[_i];\n      if (isSortField(fieldDef.sort)) {\n        var _fieldDef$sort = fieldDef.sort,\n          field = _fieldDef$sort.field,\n          _fieldDef$sort$op = _fieldDef$sort.op,\n          op = _fieldDef$sort$op === void 0 ? DEFAULT_SORT_OP : _fieldDef$sort$op;\n        parent = newParent = new JoinAggregateTransformNode(parent, {\n          joinaggregate: [{\n            op: op,\n            field: field,\n            as: facetSortFieldName(fieldDef, fieldDef.sort, {\n              forAs: true\n            })\n          }],\n          groupby: [vgField(fieldDef)]\n        });\n      }\n    }\n    return newParent;\n  }\n  return null;\n}","map":{"version":3,"sources":["../../../../src/compile/data/joinaggregatefacet.ts"],"names":[],"mappings":"AAAA,SAAQ,OAAO,QAAO,kBAAkB;AACxC,SAAQ,eAAe,EAAE,WAAW,QAAO,YAAY;AAEvD,SAAQ,kBAAkB,QAAO,UAAU;AAE3C,SAAQ,0BAA0B,QAAO,iBAAiB;AAE1D,OAAM,SAAU,0BAA0B,CACxC,MAAoB,EACpB,KAA2B,EAAA;EAE3B,IAAO,GAAG,GAAY,KAAK,CAApB,GAAG;IAAE,MAAM,GAAI,KAAK,CAAf,MAAM;EAClB,IAAI,GAAG,IAAI,MAAM,EAAE;IACjB,IAAI,SAAS,GAAG,IAAI;IACpB;IACA,wBAAuB,CAAC,GAAG,EAAE,MAAM,CAAC,0BAAE;MAAjC,IAAM,QAAQ;MACjB,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC9B,qBAAsC,QAAQ,CAAC,IAAI;UAA5C,KAAK,kBAAL,KAAK;UAAA,mCAAE,EAAE;UAAF,EAAE,kCAAG,eAAe;QAClC,MAAM,GAAG,SAAS,GAAG,IAAI,0BAA0B,CAAC,MAAM,EAAE;UAC1D,aAAa,EAAE,CACb;YACE,EAAE,EAAF,EAAE;YACF,KAAK,EAAL,KAAK;YACL,EAAE,EAAE,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE;cAAC,KAAK,EAAE;YAAI,CAAC;WAC9D,CACF;UACD,OAAO,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC5B,CAAC;MACH;IACF;IACD,OAAO,SAAS;EACjB;EACD,OAAO,IAAI;AACb","sourceRoot":"","sourcesContent":["import { vgField } from '../../channeldef';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { facetSortFieldName } from '../facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nexport function makeJoinAggregateFromFacet(parent, facet) {\n    const { row, column } = facet;\n    if (row && column) {\n        let newParent = null;\n        // only need to make one for crossed facet\n        for (const fieldDef of [row, column]) {\n            if (isSortField(fieldDef.sort)) {\n                const { field, op = DEFAULT_SORT_OP } = fieldDef.sort;\n                parent = newParent = new JoinAggregateTransformNode(parent, {\n                    joinaggregate: [\n                        {\n                            op,\n                            field,\n                            as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })\n                        }\n                    ],\n                    groupby: [vgField(fieldDef)]\n                });\n            }\n        }\n        return newParent;\n    }\n    return null;\n}\n//# sourceMappingURL=joinaggregatefacet.js.map"]},"metadata":{},"sourceType":"module"}